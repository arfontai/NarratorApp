#define MCG_WINRT_SUPPORTED
using Mcg.System;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.WindowsRuntime;
using global::Windows.Foundation;
using global::Windows.Foundation.Collections;


// -----------------------------------------------------------------------------------------------------------
// 
// WARNING: THIS SOURCE FILE IS FOR 32-BIT BUILDS ONLY!
// 
// MCG GENERATED CODE
// 
// This C# source file is generated by MCG and is added into the application at compile time to support interop features.
// 
// It has three primary components:
// 
// 1. Public type definitions with interop implementation used by this application including WinRT & COM data structures and P/Invokes.
// 
// 2. The '__Interop' class containing marshaling code that acts as a bridge from managed code to native code.
// 
// 3. The 'McgNative' class containing marshaling code and native type definitions that call into native code and are called by native code.
// 
// -----------------------------------------------------------------------------------------------------------
// 
// warning CS0067: The event 'event' is never used
#pragma warning disable 67
// warning CS0169: The field 'field' is never used
#pragma warning disable 169
// warning CS0649: Field 'field' is never assigned to, and will always have its default value 0
#pragma warning disable 414
// warning CS0414: The private field 'field' is assigned but its value is never used
#pragma warning disable 649
// warning CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// warning CS0108 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable 108
// warning CS0114 'member1' hides inherited member 'member2'.  To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
#pragma warning disable 114
// warning CS0659 'type' overrides Object.Equals but does not override GetHashCode.
#pragma warning disable 659
// warning CS0465 Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?
#pragma warning disable 465
// warning CS0028 'function declaration' has the wrong signature to be an entry point
#pragma warning disable 28
// warning CS0162 Unreachable code Detected
#pragma warning disable 162
// warning CS0628 new protected member declared in sealed class
#pragma warning disable 628

namespace __Interop
{
	/// <summary>
	/// P/Invoke class for module 'Microsoft.CognitiveServices.Speech.core.dll'
	/// </summary>
	public unsafe static partial class Microsoft_CognitiveServices_Speech_core_dll
	{
		// Signature, bot_framework_config_from_subscription, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConfig", "bot_framework_config_from_subscription")]
		public static global::System.IntPtr bot_framework_config_from_subscription(
					out global::System.IntPtr config, 
					string subscription, 
					string region)
		{
			// Setup
			byte* unsafe_subscription = default(byte*);
			byte* unsafe_region = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_config = &(config))
				{
					unsafe_subscription = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(subscription, true, false);
					unsafe_region = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(region, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.bot_framework_config_from_subscription(
										pinned_config, 
										unsafe_subscription, 
										unsafe_region
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_subscription);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_region);
			}
		}

		// Signature, bot_framework_config_from_authorization_token, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConfig", "bot_framework_config_from_authorization_token")]
		public static global::System.IntPtr bot_framework_config_from_authorization_token(
					out global::System.IntPtr config, 
					string auth_token, 
					string region)
		{
			// Setup
			byte* unsafe_auth_token = default(byte*);
			byte* unsafe_region = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_config = &(config))
				{
					unsafe_auth_token = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(auth_token, true, false);
					unsafe_region = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(region, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.bot_framework_config_from_authorization_token(
										pinned_config, 
										unsafe_auth_token, 
										unsafe_region
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_auth_token);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_region);
			}
		}

		// Signature, custom_commands_config_from_subscription, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConfig", "custom_commands_config_from_subscription")]
		public static global::System.IntPtr custom_commands_config_from_subscription(
					out global::System.IntPtr config, 
					string app_id, 
					string subscription, 
					string region)
		{
			// Setup
			byte* unsafe_app_id = default(byte*);
			byte* unsafe_subscription = default(byte*);
			byte* unsafe_region = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_config = &(config))
				{
					unsafe_app_id = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(app_id, true, false);
					unsafe_subscription = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(subscription, true, false);
					unsafe_region = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(region, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.custom_commands_config_from_subscription(
										pinned_config, 
										unsafe_app_id, 
										unsafe_subscription, 
										unsafe_region
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_app_id);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_subscription);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_region);
			}
		}

		// Signature, custom_commands_config_from_authorization_token, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConfig", "custom_commands_config_from_authorization_token")]
		public static global::System.IntPtr custom_commands_config_from_authorization_token(
					out global::System.IntPtr config, 
					string app_id, 
					string auth_token, 
					string region)
		{
			// Setup
			byte* unsafe_app_id = default(byte*);
			byte* unsafe_auth_token = default(byte*);
			byte* unsafe_region = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_config = &(config))
				{
					unsafe_app_id = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(app_id, true, false);
					unsafe_auth_token = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(auth_token, true, false);
					unsafe_region = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(region, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.custom_commands_config_from_authorization_token(
										pinned_config, 
										unsafe_app_id, 
										unsafe_auth_token, 
										unsafe_region
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_app_id);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_auth_token);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_region);
			}
		}

		// Signature, dialog_service_connector_get_property_bag, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_get_property_bag")]
		public static global::System.IntPtr dialog_service_connector_get_property_bag(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connectorHandle, 
					out global::System.IntPtr propertyBag)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			connectorHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_propertyBag = &(propertyBag))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_get_property_bag(
									connectorHandle.DangerousGetHandle(), 
									pinned_propertyBag
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				connectorHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, dialog_service_connector_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_handle_release")]
		public static global::System.IntPtr dialog_service_connector_handle_release(global::System.IntPtr connectorHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_handle_release(connectorHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, dialog_service_connector_connect, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_connect")]
		public static global::System.IntPtr dialog_service_connector_connect(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connectorHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			connectorHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_connect(connectorHandle.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				connectorHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, dialog_service_connector_disconnect, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_disconnect")]
		public static global::System.IntPtr dialog_service_connector_disconnect(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connectorHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			connectorHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_disconnect(connectorHandle.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				connectorHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, dialog_service_connector_send_activity, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_send_activity")]
		public static global::System.IntPtr dialog_service_connector_send_activity(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connectorHandle, 
					global::System.IntPtr activityHandle, 
					global::System.Text.StringBuilder interactionId)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_interactionId = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				connectorHandle.DangerousAddRef(ref addRefed);
				if (interactionId == null)
					unsafe_interactionId = null;
				else
				{
					unsafe_interactionId = (byte*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(interactionId.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_interactionId == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_interactionId != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToAnsiString(
										interactionId, 
										unsafe_interactionId, 
										true, 
										false
									);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_send_activity(
									connectorHandle.DangerousGetHandle(), 
									activityHandle, 
									unsafe_interactionId
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (interactionId != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_interactionId, 
										interactionId
									);
				if (addRefed)
					connectorHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_interactionId != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_interactionId);
			}
		}

		// Signature, dialog_service_connector_start_keyword_recognition, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_start_keyword_recognition")]
		public static global::System.IntPtr dialog_service_connector_start_keyword_recognition(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connectorHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp keywordHandle)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			connectorHandle.DangerousAddRef(ref addRefed);
			keywordHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_start_keyword_recognition(
								connectorHandle.DangerousGetHandle(), 
								keywordHandle.DangerousGetHandle()
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed_1)
				keywordHandle.DangerousRelease();
			if (addRefed)
				connectorHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, dialog_service_connector_stop_keyword_recognition, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_stop_keyword_recognition")]
		public static global::System.IntPtr dialog_service_connector_stop_keyword_recognition(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connectorHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			connectorHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_stop_keyword_recognition(connectorHandle.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				connectorHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, dialog_service_connector_listen_once, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_listen_once")]
		public static global::System.IntPtr dialog_service_connector_listen_once(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connectorHandle, 
					out global::System.IntPtr result)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			connectorHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_result = &(result))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_listen_once(
									connectorHandle.DangerousGetHandle(), 
									pinned_result
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				connectorHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, dialog_service_connector_session_started_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_session_started_set_callback")]
		public static global::System.IntPtr dialog_service_connector_session_started_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connectorHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				connectorHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_session_started_set_callback(
									connectorHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					connectorHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, dialog_service_connector_session_stopped_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_session_stopped_set_callback")]
		public static global::System.IntPtr dialog_service_connector_session_stopped_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connectorHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				connectorHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_session_stopped_set_callback(
									connectorHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					connectorHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, dialog_service_connector_recognized_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_recognized_set_callback")]
		public static global::System.IntPtr dialog_service_connector_recognized_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connectorHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				connectorHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_recognized_set_callback(
									connectorHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					connectorHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, dialog_service_connector_recognizing_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_recognizing_set_callback")]
		public static global::System.IntPtr dialog_service_connector_recognizing_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connectorHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				connectorHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_recognizing_set_callback(
									connectorHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					connectorHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, dialog_service_connector_canceled_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_canceled_set_callback")]
		public static global::System.IntPtr dialog_service_connector_canceled_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connectorHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				connectorHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_canceled_set_callback(
									connectorHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					connectorHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, dialog_service_connector_activity_received_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.DialogServiceConnector", "dialog_service_connector_activity_received_set_callback")]
		public static global::System.IntPtr dialog_service_connector_activity_received_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connectorHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				connectorHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_activity_received_set_callback(
									connectorHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					connectorHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, dialog_service_connector_activity_received_event_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.ActivityReceivedEventArgs", "dialog_service_connector_activity_received_event_handle_is_valid")]
		public static bool dialog_service_connector_activity_received_event_handle_is_valid(global::System.IntPtr eventHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_activity_received_event_handle_is_valid(eventHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, dialog_service_connector_activity_received_event_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.ActivityReceivedEventArgs", "dialog_service_connector_activity_received_event_release")]
		public static global::System.IntPtr dialog_service_connector_activity_received_event_release(global::System.IntPtr eventHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_activity_received_event_release(eventHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, dialog_service_connector_activity_received_event_get_activity_size, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.ActivityReceivedEventArgs", "dialog_service_connector_activity_received_event_get_activity_size")]
		public static global::System.IntPtr dialog_service_connector_activity_received_event_get_activity_size(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp eventHandle, 
					out uint size)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			eventHandle.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_size = &(size))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_activity_received_event_get_activity_size(
									eventHandle.DangerousGetHandle(), 
									pinned_size
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				eventHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, dialog_service_connector_activity_received_event_get_activity, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.ActivityReceivedEventArgs", "dialog_service_connector_activity_received_event_get_activity")]
		public static global::System.IntPtr dialog_service_connector_activity_received_event_get_activity(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp eventHandle, 
					global::System.IntPtr activity, 
					uint bufferSize)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			eventHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_activity_received_event_get_activity(
								eventHandle.DangerousGetHandle(), 
								activity, 
								bufferSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				eventHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, dialog_service_connector_activity_received_event_has_audio, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.ActivityReceivedEventArgs", "dialog_service_connector_activity_received_event_has_audio")]
		public static bool dialog_service_connector_activity_received_event_has_audio(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp eventHandle)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			eventHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_activity_received_event_has_audio(eventHandle.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				eventHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, dialog_service_connector_activity_received_event_get_audio, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Dialog.Internal.ActivityReceivedEventArgs", "dialog_service_connector_activity_received_event_get_audio")]
		public static global::System.IntPtr dialog_service_connector_activity_received_event_get_audio(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp eventHandle, 
					out global::System.IntPtr audioHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			eventHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_audioHandle = &(audioHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_activity_received_event_get_audio(
									eventHandle.DangerousGetHandle(), 
									pinned_audioHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				eventHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, grammar_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.c_interop", "grammar_handle_is_valid")]
		public static bool grammar_handle_is_valid(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp grammar)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			grammar.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.grammar_handle_is_valid(grammar.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				grammar.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, phrase_list_grammar_from_recognizer_by_name, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.c_interop", "phrase_list_grammar_from_recognizer_by_name")]
		public static global::System.IntPtr phrase_list_grammar_from_recognizer_by_name(
					out global::System.IntPtr grammar, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp reco, 
					string name)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_name = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_grammar = &(grammar))
				{
					reco.DangerousAddRef(ref addRefed);
					unsafe_name = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(name, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.phrase_list_grammar_from_recognizer_by_name(
										pinned_grammar, 
										reco.DangerousGetHandle(), 
										unsafe_name
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					if (addRefed)
						reco.DangerousRelease();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_name);
			}
		}

		// Signature, grammar_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.c_interop", "grammar_handle_release")]
		public static global::System.IntPtr grammar_handle_release(global::System.IntPtr grammar)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.grammar_handle_release(grammar);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, phrase_list_grammar_add_phrase, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.c_interop", "phrase_list_grammar_add_phrase")]
		public static global::System.IntPtr phrase_list_grammar_add_phrase(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp grammar, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp phrase)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			grammar.DangerousAddRef(ref addRefed);
			phrase.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.phrase_list_grammar_add_phrase(
								grammar.DangerousGetHandle(), 
								phrase.DangerousGetHandle()
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed_1)
				phrase.DangerousRelease();
			if (addRefed)
				grammar.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, phrase_list_grammar_clear, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.c_interop", "phrase_list_grammar_clear")]
		public static global::System.IntPtr phrase_list_grammar_clear(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp grammar)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			grammar.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.phrase_list_grammar_clear(grammar.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				grammar.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, grammar_phrase_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.c_interop", "grammar_phrase_handle_is_valid")]
		public static bool grammar_phrase_handle_is_valid(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp phrase)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			phrase.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.grammar_phrase_handle_is_valid(phrase.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				phrase.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, grammar_phrase_create_from_text, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.c_interop", "grammar_phrase_create_from_text")]
		public static global::System.IntPtr grammar_phrase_create_from_text(
					out global::System.IntPtr phrase, 
					global::System.IntPtr text)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_phrase = &(phrase))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.grammar_phrase_create_from_text(
									pinned_phrase, 
									text
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, grammar_phrase_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.c_interop", "grammar_phrase_handle_release")]
		public static global::System.IntPtr grammar_phrase_handle_release(global::System.IntPtr phrase)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.grammar_phrase_handle_release(phrase);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, grammar_create_from_storage_id, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.c_interop", "grammar_create_from_storage_id")]
		public static global::System.IntPtr grammar_create_from_storage_id(
					out global::System.IntPtr hgrammarlist, 
					global::System.IntPtr id)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_hgrammarlist = &(hgrammarlist))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.grammar_create_from_storage_id(
									pinned_hgrammarlist, 
									id
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, grammar_list_from_recognizer, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.c_interop", "grammar_list_from_recognizer")]
		public static global::System.IntPtr grammar_list_from_recognizer(
					out global::System.IntPtr hgrammarlist, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp hreco)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_hgrammarlist = &(hgrammarlist))
			{
				hreco.DangerousAddRef(ref addRefed);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.grammar_list_from_recognizer(
									pinned_hgrammarlist, 
									hreco.DangerousGetHandle()
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					hreco.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, grammar_list_add_grammar, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.c_interop", "grammar_list_add_grammar")]
		public static global::System.IntPtr grammar_list_add_grammar(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp hgrammarlist, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp hgrammar)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			hgrammarlist.DangerousAddRef(ref addRefed);
			hgrammar.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.grammar_list_add_grammar(
								hgrammarlist.DangerousGetHandle(), 
								hgrammar.DangerousGetHandle()
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed_1)
				hgrammar.DangerousRelease();
			if (addRefed)
				hgrammarlist.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, class_language_model_from_storage_id, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.c_interop", "class_language_model_from_storage_id")]
		public static global::System.IntPtr class_language_model_from_storage_id(
					out global::System.IntPtr hclm, 
					global::System.IntPtr storageid)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_hclm = &(hclm))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.class_language_model_from_storage_id(
									pinned_hclm, 
									storageid
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, class_language_model_assign_class, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.c_interop", "class_language_model_assign_class")]
		public static global::System.IntPtr class_language_model_assign_class(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp hclm, 
					global::System.IntPtr classname, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp hgrammar)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			hclm.DangerousAddRef(ref addRefed);
			hgrammar.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.class_language_model_assign_class(
								hclm.DangerousGetHandle(), 
								classname, 
								hgrammar.DangerousGetHandle()
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed_1)
				hgrammar.DangerousRelease();
			if (addRefed)
				hclm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, result_get_reason_canceled, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_CancellationReason__Microsoft_CognitiveServices_Speech_csharp__CancellationReason__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.CancellationDetails", "result_get_reason_canceled")]
		public static global::System.IntPtr result_get_reason_canceled(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					out global::Microsoft_CognitiveServices_Speech.CancellationReason__Microsoft_CognitiveServices_Speech_csharp reason)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			fixed (global::Microsoft_CognitiveServices_Speech.CancellationReason__Microsoft_CognitiveServices_Speech_csharp* pinned_reason = &(reason))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.result_get_reason_canceled(
									result.DangerousGetHandle(), 
									pinned_reason
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, result_get_canceled_error_code, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp__CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.CancellationDetails", "result_get_canceled_error_code")]
		public static global::System.IntPtr result_get_canceled_error_code(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					out global::Microsoft_CognitiveServices_Speech.CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp errorCode)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			fixed (global::Microsoft_CognitiveServices_Speech.CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp* pinned_errorCode = &(errorCode))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.result_get_canceled_error_code(
									result.DangerousGetHandle(), 
									pinned_errorCode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, audio_config_is_handle_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioConfig", "audio_config_is_handle_valid")]
		public static bool audio_config_is_handle_valid(global::System.IntPtr audioConfig)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_config_is_handle_valid(audioConfig);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, audio_config_create_audio_input_from_default_microphone, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioConfig", "audio_config_create_audio_input_from_default_microphone")]
		public static global::System.IntPtr audio_config_create_audio_input_from_default_microphone(out global::System.IntPtr audioConfig)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_audioConfig = &(audioConfig))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_config_create_audio_input_from_default_microphone(pinned_audioConfig);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, audio_config_create_audio_input_from_wav_file_name, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioConfig", "audio_config_create_audio_input_from_wav_file_name")]
		public static global::System.IntPtr audio_config_create_audio_input_from_wav_file_name(
					out global::System.IntPtr audioConfig, 
					global::System.IntPtr fileName)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_audioConfig = &(audioConfig))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_config_create_audio_input_from_wav_file_name(
									pinned_audioConfig, 
									fileName
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, audio_config_create_audio_input_from_a_microphone, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioConfig", "audio_config_create_audio_input_from_a_microphone")]
		public static global::System.IntPtr audio_config_create_audio_input_from_a_microphone(
					out global::System.IntPtr audioConfig, 
					string deviceName)
		{
			// Setup
			byte* unsafe_deviceName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_audioConfig = &(audioConfig))
				{
					unsafe_deviceName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(deviceName, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_config_create_audio_input_from_a_microphone(
										pinned_audioConfig, 
										unsafe_deviceName
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_deviceName);
			}
		}

		// Signature, audio_config_create_audio_input_from_stream, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioConfig", "audio_config_create_audio_input_from_stream")]
		public static global::System.IntPtr audio_config_create_audio_input_from_stream(
					out global::System.IntPtr audioConfig, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_audioConfig = &(audioConfig))
			{
				audioStream.DangerousAddRef(ref addRefed);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_config_create_audio_input_from_stream(
									pinned_audioConfig, 
									audioStream.DangerousGetHandle()
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					audioStream.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, audio_config_create_audio_output_from_default_speaker, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioConfig", "audio_config_create_audio_output_from_default_speaker")]
		public static global::System.IntPtr audio_config_create_audio_output_from_default_speaker(out global::System.IntPtr audioConfig)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_audioConfig = &(audioConfig))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_config_create_audio_output_from_default_speaker(pinned_audioConfig);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, audio_config_create_audio_output_from_wav_file_name, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioConfig", "audio_config_create_audio_output_from_wav_file_name")]
		public static global::System.IntPtr audio_config_create_audio_output_from_wav_file_name(
					out global::System.IntPtr audioConfig, 
					global::System.IntPtr fileName)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_audioConfig = &(audioConfig))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_config_create_audio_output_from_wav_file_name(
									pinned_audioConfig, 
									fileName
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, audio_config_create_audio_output_from_stream, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioConfig", "audio_config_create_audio_output_from_stream")]
		public static global::System.IntPtr audio_config_create_audio_output_from_stream(
					out global::System.IntPtr audioConfig, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_audioConfig = &(audioConfig))
			{
				audioStream.DangerousAddRef(ref addRefed);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_config_create_audio_output_from_stream(
									pinned_audioConfig, 
									audioStream.DangerousGetHandle()
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					audioStream.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, audio_config_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioConfig", "audio_config_release")]
		public static global::System.IntPtr audio_config_release(global::System.IntPtr audioConfig)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_config_release(audioConfig);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, speech_config_is_handle_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechConfig", "speech_config_is_handle_valid")]
		public static bool speech_config_is_handle_valid(global::System.IntPtr config)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_config_is_handle_valid(config);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, speech_config_from_subscription, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechConfig", "speech_config_from_subscription")]
		public static global::System.IntPtr speech_config_from_subscription(
					out global::System.IntPtr config, 
					string subscriptionKey, 
					string region)
		{
			// Setup
			byte* unsafe_subscriptionKey = default(byte*);
			byte* unsafe_region = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_config = &(config))
				{
					unsafe_subscriptionKey = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(subscriptionKey, true, false);
					unsafe_region = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(region, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_config_from_subscription(
										pinned_config, 
										unsafe_subscriptionKey, 
										unsafe_region
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_subscriptionKey);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_region);
			}
		}

		// Signature, speech_config_from_authorization_token, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechConfig", "speech_config_from_authorization_token")]
		public static global::System.IntPtr speech_config_from_authorization_token(
					out global::System.IntPtr config, 
					string authToken, 
					string region)
		{
			// Setup
			byte* unsafe_authToken = default(byte*);
			byte* unsafe_region = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_config = &(config))
				{
					unsafe_authToken = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(authToken, true, false);
					unsafe_region = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(region, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_config_from_authorization_token(
										pinned_config, 
										unsafe_authToken, 
										unsafe_region
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_authToken);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_region);
			}
		}

		// Signature, speech_config_from_endpoint, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechConfig", "speech_config_from_endpoint")]
		public static global::System.IntPtr speech_config_from_endpoint(
					out global::System.IntPtr config, 
					string endpoint, 
					string subscription)
		{
			// Setup
			byte* unsafe_endpoint = default(byte*);
			byte* unsafe_subscription = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_config = &(config))
				{
					unsafe_endpoint = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(endpoint, true, false);
					unsafe_subscription = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(subscription, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_config_from_endpoint(
										pinned_config, 
										unsafe_endpoint, 
										unsafe_subscription
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_endpoint);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_subscription);
			}
		}

		// Signature, speech_config_from_host, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechConfig", "speech_config_from_host")]
		public static global::System.IntPtr speech_config_from_host(
					out global::System.IntPtr config, 
					string host, 
					string subscription)
		{
			// Setup
			byte* unsafe_host = default(byte*);
			byte* unsafe_subscription = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_config = &(config))
				{
					unsafe_host = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(host, true, false);
					unsafe_subscription = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(subscription, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_config_from_host(
										pinned_config, 
										unsafe_host, 
										unsafe_subscription
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_host);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_subscription);
			}
		}

		// Signature, speech_config_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechConfig", "speech_config_release")]
		public static global::System.IntPtr speech_config_release(global::System.IntPtr config)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_config_release(config);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, speech_config_get_property_bag, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechConfig", "speech_config_get_property_bag")]
		public static global::System.IntPtr speech_config_get_property_bag(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp config, 
					out global::System.IntPtr propbag)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			config.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_propbag = &(propbag))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_config_get_property_bag(
									config.DangerousGetHandle(), 
									pinned_propbag
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				config.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, speech_config_set_audio_output_format, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_SpeechSynthesisOutputFormat__Microsoft_CognitiveServices_Speech_csharp__SpeechSynthesisOutputFormat__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechConfig", "speech_config_set_audio_output_format")]
		public static global::System.IntPtr speech_config_set_audio_output_format(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp config, 
					global::Microsoft_CognitiveServices_Speech.SpeechSynthesisOutputFormat__Microsoft_CognitiveServices_Speech_csharp formatId)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			config.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_config_set_audio_output_format(
								config.DangerousGetHandle(), 
								formatId
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				config.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, speech_config_set_service_property, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_ServicePropertyChannel__Microsoft_CognitiveServices_Speech_csharp__ServicePropertyChannel__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechConfig", "speech_config_set_service_property")]
		public static global::System.IntPtr speech_config_set_service_property(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp config, 
					string name, 
					string value, 
					global::Microsoft_CognitiveServices_Speech.ServicePropertyChannel__Microsoft_CognitiveServices_Speech_csharp channel)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_name = default(byte*);
			byte* unsafe_value = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				config.DangerousAddRef(ref addRefed);
				unsafe_name = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(name, true, false);
				unsafe_value = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(value, true, false);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_config_set_service_property(
									config.DangerousGetHandle(), 
									unsafe_name, 
									unsafe_value, 
									channel
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					config.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_name);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_value);
			}
		}

		// Signature, speech_config_set_profanity, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_ProfanityOption__Microsoft_CognitiveServices_Speech_csharp__ProfanityOption__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechConfig", "speech_config_set_profanity")]
		public static global::System.IntPtr speech_config_set_profanity(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp config, 
					global::Microsoft_CognitiveServices_Speech.ProfanityOption__Microsoft_CognitiveServices_Speech_csharp profanity)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			config.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_config_set_profanity(
								config.DangerousGetHandle(), 
								profanity
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				config.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, speech_translation_config_from_subscription, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechTranslationConfig", "speech_translation_config_from_subscription")]
		public static global::System.IntPtr speech_translation_config_from_subscription(
					out global::System.IntPtr config, 
					string subscriptionKey, 
					string region)
		{
			// Setup
			byte* unsafe_subscriptionKey = default(byte*);
			byte* unsafe_region = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_config = &(config))
				{
					unsafe_subscriptionKey = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(subscriptionKey, true, false);
					unsafe_region = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(region, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_translation_config_from_subscription(
										pinned_config, 
										unsafe_subscriptionKey, 
										unsafe_region
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_subscriptionKey);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_region);
			}
		}

		// Signature, speech_translation_config_from_authorization_token, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechTranslationConfig", "speech_translation_config_from_authorization_token")]
		public static global::System.IntPtr speech_translation_config_from_authorization_token(
					out global::System.IntPtr config, 
					string authToken, 
					string region)
		{
			// Setup
			byte* unsafe_authToken = default(byte*);
			byte* unsafe_region = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_config = &(config))
				{
					unsafe_authToken = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(authToken, true, false);
					unsafe_region = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(region, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_translation_config_from_authorization_token(
										pinned_config, 
										unsafe_authToken, 
										unsafe_region
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_authToken);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_region);
			}
		}

		// Signature, speech_translation_config_from_endpoint, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechTranslationConfig", "speech_translation_config_from_endpoint")]
		public static global::System.IntPtr speech_translation_config_from_endpoint(
					out global::System.IntPtr config, 
					string endpoint, 
					string subscription)
		{
			// Setup
			byte* unsafe_endpoint = default(byte*);
			byte* unsafe_subscription = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_config = &(config))
				{
					unsafe_endpoint = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(endpoint, true, false);
					unsafe_subscription = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(subscription, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_translation_config_from_endpoint(
										pinned_config, 
										unsafe_endpoint, 
										unsafe_subscription
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_endpoint);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_subscription);
			}
		}

		// Signature, speech_translation_config_from_host, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechTranslationConfig", "speech_translation_config_from_host")]
		public static global::System.IntPtr speech_translation_config_from_host(
					out global::System.IntPtr config, 
					string host, 
					string subscription)
		{
			// Setup
			byte* unsafe_host = default(byte*);
			byte* unsafe_subscription = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_config = &(config))
				{
					unsafe_host = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(host, true, false);
					unsafe_subscription = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(subscription, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_translation_config_from_host(
										pinned_config, 
										unsafe_host, 
										unsafe_subscription
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_host);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_subscription);
			}
		}

		// Signature, speech_translation_config_add_target_language, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechTranslationConfig", "speech_translation_config_add_target_language")]
		public static global::System.IntPtr speech_translation_config_add_target_language(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp config, 
					string language)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_language = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				config.DangerousAddRef(ref addRefed);
				unsafe_language = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(language, true, false);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_translation_config_add_target_language(
									config.DangerousGetHandle(), 
									unsafe_language
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					config.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_language);
			}
		}

		// Signature, speech_translation_config_remove_target_language, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpeechTranslationConfig", "speech_translation_config_remove_target_language")]
		public static global::System.IntPtr speech_translation_config_remove_target_language(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp config, 
					string language)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_language = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				config.DangerousAddRef(ref addRefed);
				unsafe_language = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(language, true, false);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.speech_translation_config_remove_target_language(
									config.DangerousGetHandle(), 
									unsafe_language
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					config.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_language);
			}
		}

		// Signature, connection_from_recognizer, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Connection", "connection_from_recognizer")]
		public static global::System.IntPtr connection_from_recognizer(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recognizerHandle, 
					out global::System.IntPtr connectionHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			recognizerHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_connectionHandle = &(connectionHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.connection_from_recognizer(
									recognizerHandle.DangerousGetHandle(), 
									pinned_connectionHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				recognizerHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, connection_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Connection", "connection_handle_is_valid")]
		public static bool connection_handle_is_valid(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp handle)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.connection_handle_is_valid(handle.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, connection_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Connection", "connection_handle_release")]
		public static global::System.IntPtr connection_handle_release(global::System.IntPtr handle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.connection_handle_release(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, connection_open, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Connection", "connection_open")]
		public static global::System.IntPtr connection_open(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp handle, 
					bool forContinuousRecognition)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.connection_open(
								handle.DangerousGetHandle(), 
								(forContinuousRecognition ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, connection_close, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Connection", "connection_close")]
		public static global::System.IntPtr connection_close(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp handle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.connection_close(handle.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, connection_connected_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_ConnectionCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__ConnectionCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Connection", "connection_connected_set_callback")]
		public static global::System.IntPtr connection_connected_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connection, 
					global::Microsoft.CognitiveServices.Speech.Internal.ConnectionCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				connection.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.ConnectionCallbackFunctionDelegate,Microsoft.CognitiveServices.Speec" +
											"h.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.connection_connected_set_callback(
									connection.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					connection.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, connection_disconnected_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_ConnectionCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__ConnectionCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Connection", "connection_disconnected_set_callback")]
		public static global::System.IntPtr connection_disconnected_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connection, 
					global::Microsoft.CognitiveServices.Speech.Internal.ConnectionCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp Callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_Callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				connection.DangerousAddRef(ref addRefed);
				unsafe_Callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.ConnectionCallbackFunctionDelegate,Microsoft.CognitiveServices.Speec" +
											"h.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									Callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.connection_disconnected_set_callback(
									connection.DangerousGetHandle(), 
									unsafe_Callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					connection.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(Callback);
			}
		}

		// Signature, connection_set_message_property, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Connection", "connection_set_message_property")]
		public static global::System.IntPtr connection_set_message_property(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connection, 
					string path, 
					string name, 
					string value)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_path = default(byte*);
			byte* unsafe_name = default(byte*);
			byte* unsafe_value = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				connection.DangerousAddRef(ref addRefed);
				unsafe_path = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(path, true, false);
				unsafe_name = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(name, true, false);
				unsafe_value = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(value, true, false);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.connection_set_message_property(
									connection.DangerousGetHandle(), 
									unsafe_path, 
									unsafe_name, 
									unsafe_value
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					connection.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_path);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_name);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_value);
			}
		}

		// Signature, connection_send_message, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Connection", "connection_send_message")]
		public static global::System.IntPtr connection_send_message(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp connection, 
					string path, 
					global::System.IntPtr payload)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_path = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				connection.DangerousAddRef(ref addRefed);
				unsafe_path = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(path, true, false);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.connection_send_message(
									connection.DangerousGetHandle(), 
									unsafe_path, 
									payload
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					connection.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_path);
			}
		}

		// Signature, conversation_update_participant, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Conversation", "conversation_update_participant")]
		public static global::System.IntPtr conversation_update_participant(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp convHandle, 
					bool add, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp participant)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			convHandle.DangerousAddRef(ref addRefed);
			participant.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.conversation_update_participant(
								convHandle.DangerousGetHandle(), 
								(add ? 1 : 0), 
								participant.DangerousGetHandle()
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed_1)
				participant.DangerousRelease();
			if (addRefed)
				convHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, conversation_update_participant_by_user, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Conversation", "conversation_update_participant_by_user")]
		public static global::System.IntPtr conversation_update_participant_by_user(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp convHandle, 
					bool add, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp participant)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			convHandle.DangerousAddRef(ref addRefed);
			participant.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.conversation_update_participant_by_user(
								convHandle.DangerousGetHandle(), 
								(add ? 1 : 0), 
								participant.DangerousGetHandle()
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed_1)
				participant.DangerousRelease();
			if (addRefed)
				convHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, conversation_update_participant_by_user_id, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Conversation", "conversation_update_participant_by_user_id")]
		public static global::System.IntPtr conversation_update_participant_by_user_id(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp convHandle, 
					bool add, 
					string userId)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_userId = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				convHandle.DangerousAddRef(ref addRefed);
				unsafe_userId = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(userId, true, false);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.conversation_update_participant_by_user_id(
									convHandle.DangerousGetHandle(), 
									(add ? 1 : 0), 
									unsafe_userId
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					convHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_userId);
			}
		}

		// Signature, conversation_get_conversation_id, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Conversation", "conversation_get_conversation_id")]
		public static global::System.IntPtr conversation_get_conversation_id(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp convHandle, 
					global::System.IntPtr conversationIdPtr, 
					uint size)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			convHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.conversation_get_conversation_id(
								convHandle.DangerousGetHandle(), 
								conversationIdPtr, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				convHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, conversation_end_conversation, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Conversation", "conversation_end_conversation")]
		public static global::System.IntPtr conversation_end_conversation(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp convHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			convHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.conversation_end_conversation(convHandle.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				convHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, conversation_get_property_bag, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Conversation", "conversation_get_property_bag")]
		public static global::System.IntPtr conversation_get_property_bag(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp convHandle, 
					out global::System.IntPtr propbag)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			convHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_propbag = &(propbag))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.conversation_get_property_bag(
									convHandle.DangerousGetHandle(), 
									pinned_propbag
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				convHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, conversation_release_handle, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Conversation", "conversation_release_handle")]
		public static global::System.IntPtr conversation_release_handle(global::System.IntPtr convHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.conversation_release_handle(convHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, conversation_transcription_result_get_user_id, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.ConversationTranscriptionResult", "conversation_transcription_result_get_user_id")]
		public static global::System.IntPtr conversation_transcription_result_get_user_id(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					global::System.IntPtr userIdPtr, 
					uint userIdSize)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.conversation_transcription_result_get_user_id(
								result.DangerousGetHandle(), 
								userIdPtr, 
								userIdSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, error_get_message, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpxError", "error_get_message")]
		public static global::System.IntPtr error_get_message(global::System.IntPtr errorHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.error_get_message(errorHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, error_get_call_stack, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpxError", "error_get_call_stack")]
		public static global::System.IntPtr error_get_call_stack(global::System.IntPtr errorHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.error_get_call_stack(errorHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, error_get_error_code, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpxError", "error_get_error_code")]
		public static global::System.IntPtr error_get_error_code(global::System.IntPtr errorHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.error_get_error_code(errorHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, error_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpxError", "error_release")]
		public static global::System.IntPtr error_release(global::System.IntPtr errorHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.error_release(errorHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_event_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.EventArgs", "recognizer_event_handle_is_valid")]
		public static bool recognizer_event_handle_is_valid(global::System.IntPtr eventHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_event_handle_is_valid(eventHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, recognizer_event_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.EventArgs", "recognizer_event_handle_release")]
		public static global::System.IntPtr recognizer_event_handle_release(global::System.IntPtr eventHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_event_handle_release(eventHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_create_speech_recognizer_from_config, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpxFactory", "recognizer_create_speech_recognizer_from_config")]
		public static global::System.IntPtr recognizer_create_speech_recognizer_from_config(
					out global::System.IntPtr recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp speechconfig, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioInput)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_recoHandle = &(recoHandle))
			{
				speechconfig.DangerousAddRef(ref addRefed);
				audioInput.DangerousAddRef(ref addRefed_1);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_create_speech_recognizer_from_config(
									pinned_recoHandle, 
									speechconfig.DangerousGetHandle(), 
									audioInput.DangerousGetHandle()
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed_1)
					audioInput.DangerousRelease();
				if (addRefed)
					speechconfig.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_create_translation_recognizer_from_config, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpxFactory", "recognizer_create_translation_recognizer_from_config")]
		public static global::System.IntPtr recognizer_create_translation_recognizer_from_config(
					out global::System.IntPtr recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp speechconfig, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioInput)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_recoHandle = &(recoHandle))
			{
				speechconfig.DangerousAddRef(ref addRefed);
				audioInput.DangerousAddRef(ref addRefed_1);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_create_translation_recognizer_from_config(
									pinned_recoHandle, 
									speechconfig.DangerousGetHandle(), 
									audioInput.DangerousGetHandle()
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed_1)
					audioInput.DangerousRelease();
				if (addRefed)
					speechconfig.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_create_intent_recognizer_from_config, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpxFactory", "recognizer_create_intent_recognizer_from_config")]
		public static global::System.IntPtr recognizer_create_intent_recognizer_from_config(
					out global::System.IntPtr recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp speechconfig, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioInput)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_recoHandle = &(recoHandle))
			{
				speechconfig.DangerousAddRef(ref addRefed);
				audioInput.DangerousAddRef(ref addRefed_1);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_create_intent_recognizer_from_config(
									pinned_recoHandle, 
									speechconfig.DangerousGetHandle(), 
									audioInput.DangerousGetHandle()
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed_1)
					audioInput.DangerousRelease();
				if (addRefed)
					speechconfig.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_create_speech_synthesizer_from_config, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpxFactory", "synthesizer_create_speech_synthesizer_from_config")]
		public static global::System.IntPtr synthesizer_create_speech_synthesizer_from_config(
					out global::System.IntPtr synthHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp speechconfig, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioOutput)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_synthHandle = &(synthHandle))
			{
				speechconfig.DangerousAddRef(ref addRefed);
				audioOutput.DangerousAddRef(ref addRefed_1);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_create_speech_synthesizer_from_config(
									pinned_synthHandle, 
									speechconfig.DangerousGetHandle(), 
									audioOutput.DangerousGetHandle()
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed_1)
					audioOutput.DangerousRelease();
				if (addRefed)
					speechconfig.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, dialog_service_connector_create_dialog_service_connector_from_config, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpxFactory", "dialog_service_connector_create_dialog_service_connector_from_config")]
		public static global::System.IntPtr dialog_service_connector_create_dialog_service_connector_from_config(
					out global::System.IntPtr recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp speechconfig, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioInput)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_recoHandle = &(recoHandle))
			{
				speechconfig.DangerousAddRef(ref addRefed);
				audioInput.DangerousAddRef(ref addRefed_1);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.dialog_service_connector_create_dialog_service_connector_from_config(
									pinned_recoHandle, 
									speechconfig.DangerousGetHandle(), 
									audioInput.DangerousGetHandle()
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed_1)
					audioInput.DangerousRelease();
				if (addRefed)
					speechconfig.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, conversation_create_from_config, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpxFactory", "conversation_create_from_config")]
		public static global::System.IntPtr conversation_create_from_config(
					out global::System.IntPtr recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp speechconfig, 
					global::System.IntPtr id)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_recoHandle = &(recoHandle))
			{
				speechconfig.DangerousAddRef(ref addRefed);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.conversation_create_from_config(
									pinned_recoHandle, 
									speechconfig.DangerousGetHandle(), 
									id
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					speechconfig.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_create_conversation_transcriber_from_config, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SpxFactory", "recognizer_create_conversation_transcriber_from_config")]
		public static global::System.IntPtr recognizer_create_conversation_transcriber_from_config(
					out global::System.IntPtr recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioInput)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_recoHandle = &(recoHandle))
			{
				audioInput.DangerousAddRef(ref addRefed);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_create_conversation_transcriber_from_config(
									pinned_recoHandle, 
									audioInput.DangerousGetHandle()
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					audioInput.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, intent_trigger_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.IntentTrigger", "intent_trigger_handle_is_valid")]
		public static bool intent_trigger_handle_is_valid(global::System.IntPtr trigger)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.intent_trigger_handle_is_valid(trigger);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, intent_trigger_create_from_phrase, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.IntentTrigger", "intent_trigger_create_from_phrase")]
		public static global::System.IntPtr intent_trigger_create_from_phrase(
					out global::System.IntPtr trigger, 
					global::System.IntPtr phrase)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_trigger = &(trigger))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.intent_trigger_create_from_phrase(
									pinned_trigger, 
									phrase
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, intent_trigger_create_from_language_understanding_model, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.IntentTrigger", "intent_trigger_create_from_language_understanding_model")]
		public static global::System.IntPtr intent_trigger_create_from_language_understanding_model(
					out global::System.IntPtr trigger, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp lumodel, 
					global::System.IntPtr intentName)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_trigger = &(trigger))
			{
				lumodel.DangerousAddRef(ref addRefed);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.intent_trigger_create_from_language_understanding_model(
									pinned_trigger, 
									lumodel.DangerousGetHandle(), 
									intentName
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					lumodel.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, intent_trigger_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.IntentTrigger", "intent_trigger_handle_release")]
		public static global::System.IntPtr intent_trigger_handle_release(global::System.IntPtr trigger)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.intent_trigger_handle_release(trigger);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, keyword_recognition_model_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.KeywordRecognitionModel", "keyword_recognition_model_handle_is_valid")]
		public static bool keyword_recognition_model_handle_is_valid(global::System.IntPtr keyword)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.keyword_recognition_model_handle_is_valid(keyword);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, keyword_recognition_model_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.KeywordRecognitionModel", "keyword_recognition_model_handle_release")]
		public static global::System.IntPtr keyword_recognition_model_handle_release(global::System.IntPtr keyword)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.keyword_recognition_model_handle_release(keyword);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, keyword_recognition_model_create_from_file, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.KeywordRecognitionModel", "keyword_recognition_model_create_from_file")]
		public static global::System.IntPtr keyword_recognition_model_create_from_file(
					string fileName, 
					out global::System.IntPtr kwmodel)
		{
			// Setup
			byte* unsafe_fileName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_fileName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(fileName, true, false);
				fixed (global::System.IntPtr* pinned_kwmodel = &(kwmodel))
				{
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.keyword_recognition_model_create_from_file(
										unsafe_fileName, 
										pinned_kwmodel
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_fileName);
			}
		}

		// Signature, language_understanding_model_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.LanguageUnderstandingModel", "language_understanding_model_handle_is_valid")]
		public static bool language_understanding_model_handle_is_valid(global::System.IntPtr lumodel)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.language_understanding_model_handle_is_valid(lumodel);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, language_understanding_model_create_from_uri, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.LanguageUnderstandingModel", "language_understanding_model_create_from_uri")]
		public static global::System.IntPtr language_understanding_model_create_from_uri(
					out global::System.IntPtr lumodel, 
					string uri)
		{
			// Setup
			byte* unsafe_uri = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_lumodel = &(lumodel))
				{
					unsafe_uri = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(uri, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.language_understanding_model_create_from_uri(
										pinned_lumodel, 
										unsafe_uri
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_uri);
			}
		}

		// Signature, language_understanding_model_create_from_app_id, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.LanguageUnderstandingModel", "language_understanding_model_create_from_app_id")]
		public static global::System.IntPtr language_understanding_model_create_from_app_id(
					out global::System.IntPtr lumodel, 
					string appId)
		{
			// Setup
			byte* unsafe_appId = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_lumodel = &(lumodel))
				{
					unsafe_appId = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(appId, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.language_understanding_model_create_from_app_id(
										pinned_lumodel, 
										unsafe_appId
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_appId);
			}
		}

		// Signature, language_understanding_model_create_from_subscription, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.LanguageUnderstandingModel", "language_understanding_model_create_from_subscription")]
		public static global::System.IntPtr language_understanding_model_create_from_subscription(
					out global::System.IntPtr lumodel, 
					string subscriptionKey, 
					string appId, 
					string region)
		{
			// Setup
			byte* unsafe_subscriptionKey = default(byte*);
			byte* unsafe_appId = default(byte*);
			byte* unsafe_region = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_lumodel = &(lumodel))
				{
					unsafe_subscriptionKey = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(subscriptionKey, true, false);
					unsafe_appId = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(appId, true, false);
					unsafe_region = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(region, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.language_understanding_model_create_from_subscription(
										pinned_lumodel, 
										unsafe_subscriptionKey, 
										unsafe_appId, 
										unsafe_region
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_subscriptionKey);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_appId);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_region);
			}
		}

		// Signature, language_understanding_model__handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.LanguageUnderstandingModel", "language_understanding_model__handle_release")]
		public static global::System.IntPtr language_understanding_model__handle_release(global::System.IntPtr lumodel)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.language_understanding_model__handle_release(lumodel);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, result_get_no_match_reason, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_NoMatchReason__Microsoft_CognitiveServices_Speech_csharp__NoMatchReason__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.NoMatchDetails", "result_get_no_match_reason")]
		public static global::System.IntPtr result_get_no_match_reason(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					ref global::Microsoft_CognitiveServices_Speech.NoMatchReason__Microsoft_CognitiveServices_Speech_csharp reason)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			fixed (global::Microsoft_CognitiveServices_Speech.NoMatchReason__Microsoft_CognitiveServices_Speech_csharp* pinned_reason = &(reason))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.result_get_no_match_reason(
									result.DangerousGetHandle(), 
									pinned_reason
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, participant_set_preferred_langugage, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Participant", "participant_set_preferred_langugage")]
		public static global::System.IntPtr participant_set_preferred_langugage(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp participant, 
					string value)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_value = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				participant.DangerousAddRef(ref addRefed);
				unsafe_value = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(value, true, false);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.participant_set_preferred_langugage(
									participant.DangerousGetHandle(), 
									unsafe_value
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					participant.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_value);
			}
		}

		// Signature, participant_set_voice_signature, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Participant", "participant_set_voice_signature")]
		public static global::System.IntPtr participant_set_voice_signature(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp participant, 
					string value, 
					int size)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_value = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				participant.DangerousAddRef(ref addRefed);
				unsafe_value = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(value, true, false);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.participant_set_voice_signature(
									participant.DangerousGetHandle(), 
									unsafe_value, 
									size
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					participant.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_value);
			}
		}

		// Signature, participant_create_handle, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Participant", "participant_create_handle")]
		public static global::System.IntPtr participant_create_handle(
					out global::System.IntPtr participant, 
					global::System.IntPtr userId, 
					string preferredLanguage, 
					string voice)
		{
			// Setup
			byte* unsafe_preferredLanguage = default(byte*);
			byte* unsafe_voice = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_participant = &(participant))
				{
					unsafe_preferredLanguage = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(preferredLanguage, true, false);
					unsafe_voice = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(voice, true, false);
					// Call to native method
					unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.participant_create_handle(
										pinned_participant, 
										userId, 
										unsafe_preferredLanguage, 
										unsafe_voice
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_preferredLanguage);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_voice);
			}
		}

		// Signature, participant_release_handle, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Participant", "participant_release_handle")]
		public static global::System.IntPtr participant_release_handle(global::System.IntPtr participant)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.participant_release_handle(participant);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, participant_get_property_bag, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Participant", "participant_get_property_bag")]
		public static global::System.IntPtr participant_get_property_bag(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp participant, 
					out global::System.IntPtr hpropbag)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			participant.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_hpropbag = &(hpropbag))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.participant_get_property_bag(
									participant.DangerousGetHandle(), 
									pinned_hpropbag
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				participant.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, property_bag_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PropertyCollection", "property_bag_is_valid")]
		public static bool property_bag_is_valid(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp propbag)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			propbag.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.property_bag_is_valid(propbag.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				propbag.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, property_bag_set_string, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PropertyCollection", "property_bag_set_string")]
		public static global::System.IntPtr property_bag_set_string(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp propbag, 
					int id, 
					global::System.IntPtr name, 
					global::System.IntPtr value)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			propbag.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.property_bag_set_string(
								propbag.DangerousGetHandle(), 
								id, 
								name, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				propbag.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, property_bag_get_string, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PropertyCollection", "property_bag_get_string")]
		public static global::System.IntPtr property_bag_get_string(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp propbag, 
					int id, 
					global::System.IntPtr name, 
					global::System.IntPtr defaultValue)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			propbag.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.property_bag_get_string(
								propbag.DangerousGetHandle(), 
								id, 
								name, 
								defaultValue
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				propbag.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, property_bag_free_string, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PropertyCollection", "property_bag_free_string")]
		public static global::System.IntPtr property_bag_free_string(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.property_bag_free_string(ptr);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, property_bag_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PropertyCollection", "property_bag_release")]
		public static global::System.IntPtr property_bag_release(global::System.IntPtr propbag)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.property_bag_release(propbag);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, result_get_reason, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_ResultReason__Microsoft_CognitiveServices_Speech_csharp__ResultReason__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.RecognitionResult", "result_get_reason")]
		public static global::System.IntPtr result_get_reason(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					ref global::Microsoft_CognitiveServices_Speech.ResultReason__Microsoft_CognitiveServices_Speech_csharp reason)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			fixed (global::Microsoft_CognitiveServices_Speech.ResultReason__Microsoft_CognitiveServices_Speech_csharp* pinned_reason = &(reason))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.result_get_reason(
									result.DangerousGetHandle(), 
									pinned_reason
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, result_get_result_id, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.RecognitionResult", "result_get_result_id")]
		public static global::System.IntPtr result_get_result_id(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					global::System.IntPtr resultId, 
					uint resultIdLength)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.result_get_result_id(
								result.DangerousGetHandle(), 
								resultId, 
								resultIdLength
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, result_get_text, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.RecognitionResult", "result_get_text")]
		public static global::System.IntPtr result_get_text(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					global::System.IntPtr text, 
					uint textLength)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.result_get_text(
								result.DangerousGetHandle(), 
								text, 
								textLength
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, result_get_offset, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.RecognitionResult", "result_get_offset")]
		public static global::System.IntPtr result_get_offset(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					ref ulong offset)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			fixed (ulong* pinned_offset = &(offset))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.result_get_offset(
									result.DangerousGetHandle(), 
									pinned_offset
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, result_get_duration, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.RecognitionResult", "result_get_duration")]
		public static global::System.IntPtr result_get_duration(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					ref ulong duration)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			fixed (ulong* pinned_duration = &(duration))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.result_get_duration(
									result.DangerousGetHandle(), 
									pinned_duration
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, result_get_property_bag, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.RecognitionResult", "result_get_property_bag")]
		public static global::System.IntPtr result_get_property_bag(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					out global::System.IntPtr hpropbag)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_hpropbag = &(hpropbag))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.result_get_property_bag(
									result.DangerousGetHandle(), 
									pinned_hpropbag
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_result_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.RecognitionResult", "recognizer_result_handle_is_valid")]
		public static bool recognizer_result_handle_is_valid(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_result_handle_is_valid(result.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, recognizer_result_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.RecognitionResult", "recognizer_result_handle_release")]
		public static global::System.IntPtr recognizer_result_handle_release(global::System.IntPtr result)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_result_handle_release(result);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, translation_text_result_get_translation_text_buffer_header, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.RecognitionResult", "translation_text_result_get_translation_text_buffer_header")]
		public static global::System.IntPtr translation_text_result_get_translation_text_buffer_header(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp handle, 
					global::System.IntPtr translationResultBuffer, 
					ref int lengthPointer)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_lengthPointer = &(lengthPointer))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.translation_text_result_get_translation_text_buffer_header(
									handle.DangerousGetHandle(), 
									translationResultBuffer, 
									pinned_lengthPointer
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, translation_synthesis_result_get_audio_data, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.RecognitionResult", "translation_synthesis_result_get_audio_data")]
		public static global::System.IntPtr translation_synthesis_result_get_audio_data(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp handle, 
					global::System.IntPtr audioBuffer, 
					ref int lengthPointer)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_lengthPointer = &(lengthPointer))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.translation_synthesis_result_get_audio_data(
									handle.DangerousGetHandle(), 
									audioBuffer, 
									pinned_lengthPointer
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, intent_result_get_intent_id, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.RecognitionResult", "intent_result_get_intent_id")]
		public static global::System.IntPtr intent_result_get_intent_id(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					global::System.IntPtr intentId, 
					uint intentIdLength)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.intent_result_get_intent_id(
								result.DangerousGetHandle(), 
								intentId, 
								intentIdLength
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_get_property_bag, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_get_property_bag")]
		public static global::System.IntPtr recognizer_get_property_bag(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					out global::System.IntPtr propbag)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			recoHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_propbag = &(propbag))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_get_property_bag(
									recoHandle.DangerousGetHandle(), 
									pinned_propbag
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				recoHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_handle_is_valid")]
		public static bool recognizer_handle_is_valid(global::System.IntPtr recoHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_handle_is_valid(recoHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, recognizer_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_handle_release")]
		public static global::System.IntPtr recognizer_handle_release(global::System.IntPtr recoHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_handle_release(recoHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_enable, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_enable")]
		public static global::System.IntPtr recognizer_enable(global::System.IntPtr recoHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_enable(recoHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_disable, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_disable")]
		public static global::System.IntPtr recognizer_disable(global::System.IntPtr recoHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_disable(recoHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_is_enabled, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_is_enabled")]
		public static global::System.IntPtr recognizer_is_enabled(
					global::System.IntPtr recoHandle, 
					out bool enabled)
		{
			// Setup
			int unsafe_enabled;
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_is_enabled(
								recoHandle, 
								&(unsafe_enabled)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			enabled = unsafe_enabled != 0;
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_recognize_once, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_recognize_once")]
		public static global::System.IntPtr recognizer_recognize_once(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					out global::System.IntPtr result)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			recoHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_result = &(result))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_recognize_once(
									recoHandle.DangerousGetHandle(), 
									pinned_result
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				recoHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_recognize_once_async, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_recognize_once_async")]
		public static global::System.IntPtr recognizer_recognize_once_async(
					global::System.IntPtr recoHandle, 
					out global::System.IntPtr asyncHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_asyncHandle = &(asyncHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_recognize_once_async(
									recoHandle, 
									pinned_asyncHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_recognize_once_async_wait_for, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_recognize_once_async_wait_for")]
		public static global::System.IntPtr recognizer_recognize_once_async_wait_for(
					global::System.IntPtr asyncHandle, 
					uint milliseconds, 
					out global::System.IntPtr phresult)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_phresult = &(phresult))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_recognize_once_async_wait_for(
									asyncHandle, 
									milliseconds, 
									pinned_phresult
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_start_continuous_recognition_async, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_start_continuous_recognition_async")]
		public static global::System.IntPtr recognizer_start_continuous_recognition_async(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					out global::System.IntPtr asyncHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			recoHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_asyncHandle = &(asyncHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_start_continuous_recognition_async(
									recoHandle.DangerousGetHandle(), 
									pinned_asyncHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				recoHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_start_continuous_recognition_async_wait_for, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_start_continuous_recognition_async_wait_for")]
		public static global::System.IntPtr recognizer_start_continuous_recognition_async_wait_for(
					global::System.IntPtr asyncHandle, 
					uint milliseconds)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_start_continuous_recognition_async_wait_for(
								asyncHandle, 
								milliseconds
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_stop_continuous_recognition_async, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_stop_continuous_recognition_async")]
		public static global::System.IntPtr recognizer_stop_continuous_recognition_async(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					out global::System.IntPtr asyncHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			recoHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_asyncHandle = &(asyncHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_stop_continuous_recognition_async(
									recoHandle.DangerousGetHandle(), 
									pinned_asyncHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				recoHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_stop_continuous_recognition_async_wait_for, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_stop_continuous_recognition_async_wait_for")]
		public static global::System.IntPtr recognizer_stop_continuous_recognition_async_wait_for(
					global::System.IntPtr asyncHandle, 
					uint milliseconds)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_stop_continuous_recognition_async_wait_for(
								asyncHandle, 
								milliseconds
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_async_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_async_handle_is_valid")]
		public static bool recognizer_async_handle_is_valid(global::System.IntPtr asyncHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_async_handle_is_valid(asyncHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, recognizer_async_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_async_handle_release")]
		public static global::System.IntPtr recognizer_async_handle_release(global::System.IntPtr asyncHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_async_handle_release(asyncHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_start_keyword_recognition, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_start_keyword_recognition")]
		public static global::System.IntPtr recognizer_start_keyword_recognition(
					global::System.IntPtr recoHandle, 
					global::System.IntPtr keyword)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_start_keyword_recognition(
								recoHandle, 
								keyword
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_start_keyword_recognition_async, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_start_keyword_recognition_async")]
		public static global::System.IntPtr recognizer_start_keyword_recognition_async(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp hkeyword, 
					out global::System.IntPtr asyncHandle)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			recoHandle.DangerousAddRef(ref addRefed);
			hkeyword.DangerousAddRef(ref addRefed_1);
			fixed (global::System.IntPtr* pinned_asyncHandle = &(asyncHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_start_keyword_recognition_async(
									recoHandle.DangerousGetHandle(), 
									hkeyword.DangerousGetHandle(), 
									pinned_asyncHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed_1)
				hkeyword.DangerousRelease();
			if (addRefed)
				recoHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_start_keyword_recognition_async_wait_for, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_start_keyword_recognition_async_wait_for")]
		public static global::System.IntPtr recognizer_start_keyword_recognition_async_wait_for(
					global::System.IntPtr asyncHandle, 
					uint milliseconds)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_start_keyword_recognition_async_wait_for(
								asyncHandle, 
								milliseconds
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_stop_keyword_recognition, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_stop_keyword_recognition")]
		public static global::System.IntPtr recognizer_stop_keyword_recognition(global::System.IntPtr recoHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_stop_keyword_recognition(recoHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_stop_keyword_recognition_async, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_stop_keyword_recognition_async")]
		public static global::System.IntPtr recognizer_stop_keyword_recognition_async(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					out global::System.IntPtr asyncHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			recoHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_asyncHandle = &(asyncHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_stop_keyword_recognition_async(
									recoHandle.DangerousGetHandle(), 
									pinned_asyncHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				recoHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_stop_keyword_recognition_async_wait_for, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_stop_keyword_recognition_async_wait_for")]
		public static global::System.IntPtr recognizer_stop_keyword_recognition_async_wait_for(
					global::System.IntPtr asyncHandle, 
					uint milliseconds)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_stop_keyword_recognition_async_wait_for(
								asyncHandle, 
								milliseconds
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_recognition_event_get_offset, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_recognition_event_get_offset")]
		public static global::System.IntPtr recognizer_recognition_event_get_offset(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp eventHandle, 
					ref ulong offset)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			eventHandle.DangerousAddRef(ref addRefed);
			fixed (ulong* pinned_offset = &(offset))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_recognition_event_get_offset(
									eventHandle.DangerousGetHandle(), 
									pinned_offset
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				eventHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_session_event_get_session_id, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_session_event_get_session_id")]
		public static global::System.IntPtr recognizer_session_event_get_session_id(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp eventHandle, 
					global::System.IntPtr sessionIdStr, 
					uint sessionId)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			eventHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_session_event_get_session_id(
								eventHandle.DangerousGetHandle(), 
								sessionIdStr, 
								sessionId
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				eventHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_recognition_event_get_result, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_recognition_event_get_result")]
		public static global::System.IntPtr recognizer_recognition_event_get_result(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp eventHandle, 
					out global::System.IntPtr result)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			eventHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_result = &(result))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_recognition_event_get_result(
									eventHandle.DangerousGetHandle(), 
									pinned_result
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				eventHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_event_handle_is_valid__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_event_handle_is_valid")]
		public static bool recognizer_event_handle_is_valid__0(global::System.IntPtr eventHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_event_handle_is_valid__0(eventHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, recognizer_session_started_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_session_started_set_callback")]
		public static global::System.IntPtr recognizer_session_started_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				recoHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_session_started_set_callback(
									recoHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					recoHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, recognizer_session_stopped_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_session_stopped_set_callback")]
		public static global::System.IntPtr recognizer_session_stopped_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				recoHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_session_stopped_set_callback(
									recoHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					recoHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, recognizer_speech_start_detected_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_speech_start_detected_set_callback")]
		public static global::System.IntPtr recognizer_speech_start_detected_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				recoHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_speech_start_detected_set_callback(
									recoHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					recoHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, recognizer_speech_end_detected_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_speech_end_detected_set_callback")]
		public static global::System.IntPtr recognizer_speech_end_detected_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				recoHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_speech_end_detected_set_callback(
									recoHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					recoHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, recognizer_recognizing_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_recognizing_set_callback")]
		public static global::System.IntPtr recognizer_recognizing_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				recoHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_recognizing_set_callback(
									recoHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					recoHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, recognizer_recognized_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_recognized_set_callback")]
		public static global::System.IntPtr recognizer_recognized_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				recoHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_recognized_set_callback(
									recoHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					recoHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, recognizer_canceled_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_canceled_set_callback")]
		public static global::System.IntPtr recognizer_canceled_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				recoHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_canceled_set_callback(
									recoHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					recoHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, intent_recognizer_add_intent, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "intent_recognizer_add_intent")]
		public static global::System.IntPtr intent_recognizer_add_intent(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					global::System.IntPtr intentId, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp trigger)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			recoHandle.DangerousAddRef(ref addRefed);
			trigger.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.intent_recognizer_add_intent(
								recoHandle.DangerousGetHandle(), 
								intentId, 
								trigger.DangerousGetHandle()
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed_1)
				trigger.DangerousRelease();
			if (addRefed)
				recoHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, translator_synthesizing_audio_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "translator_synthesizing_audio_set_callback")]
		public static global::System.IntPtr translator_synthesizing_audio_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				recoHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.CallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.csharp, " +
											"Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.translator_synthesizing_audio_set_callback(
									recoHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					recoHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, translator_add_target_language, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "translator_add_target_language")]
		public static global::System.IntPtr translator_add_target_language(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					string language)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_language = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				recoHandle.DangerousAddRef(ref addRefed);
				unsafe_language = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(language, true, false);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.translator_add_target_language(
									recoHandle.DangerousGetHandle(), 
									unsafe_language
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					recoHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_language);
			}
		}

		// Signature, translator_remove_target_language, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "translator_remove_target_language")]
		public static global::System.IntPtr translator_remove_target_language(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle, 
					string language)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_language = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				recoHandle.DangerousAddRef(ref addRefed);
				unsafe_language = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(language, true, false);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.translator_remove_target_language(
									recoHandle.DangerousGetHandle(), 
									unsafe_language
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					recoHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_language);
			}
		}

		// Signature, recognizer_join_conversation, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_join_conversation")]
		public static global::System.IntPtr recognizer_join_conversation(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp convhandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			convhandle.DangerousAddRef(ref addRefed);
			recoHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_join_conversation(
								convhandle.DangerousGetHandle(), 
								recoHandle.DangerousGetHandle()
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed_1)
				recoHandle.DangerousRelease();
			if (addRefed)
				convhandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recognizer_leave_conversation, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Recognizer", "recognizer_leave_conversation")]
		public static global::System.IntPtr recognizer_leave_conversation(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp recoHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			recoHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.recognizer_leave_conversation(recoHandle.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				recoHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, audio_data_stream_is_handle_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_is_handle_valid")]
		public static bool audio_data_stream_is_handle_valid(global::System.IntPtr audioStream)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_is_handle_valid(audioStream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, audio_data_stream_create_from_result, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_create_from_result")]
		public static global::System.IntPtr audio_data_stream_create_from_result(
					out global::System.IntPtr audioStream, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_audioStream = &(audioStream))
			{
				result.DangerousAddRef(ref addRefed);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_create_from_result(
									pinned_audioStream, 
									result.DangerousGetHandle()
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					result.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, audio_data_stream_get_status, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_StreamStatus__Microsoft_CognitiveServices_Speech_csharp__StreamStatus__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_get_status")]
		public static global::System.IntPtr audio_data_stream_get_status(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					out global::Microsoft_CognitiveServices_Speech.StreamStatus__Microsoft_CognitiveServices_Speech_csharp status)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			fixed (global::Microsoft_CognitiveServices_Speech.StreamStatus__Microsoft_CognitiveServices_Speech_csharp* pinned_status = &(status))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_get_status(
									audioStream.DangerousGetHandle(), 
									pinned_status
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, audio_data_stream_get_reason_canceled, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_CancellationReason__Microsoft_CognitiveServices_Speech_csharp__CancellationReason__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_get_reason_canceled")]
		public static global::System.IntPtr audio_data_stream_get_reason_canceled(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					out global::Microsoft_CognitiveServices_Speech.CancellationReason__Microsoft_CognitiveServices_Speech_csharp reason)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			fixed (global::Microsoft_CognitiveServices_Speech.CancellationReason__Microsoft_CognitiveServices_Speech_csharp* pinned_reason = &(reason))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_get_reason_canceled(
									audioStream.DangerousGetHandle(), 
									pinned_reason
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, audio_data_stream_get_canceled_error_code, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp__CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_get_canceled_error_code")]
		public static global::System.IntPtr audio_data_stream_get_canceled_error_code(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					out global::Microsoft_CognitiveServices_Speech.CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp errorCode)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			fixed (global::Microsoft_CognitiveServices_Speech.CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp* pinned_errorCode = &(errorCode))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_get_canceled_error_code(
									audioStream.DangerousGetHandle(), 
									pinned_errorCode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, audio_data_stream_can_read_data, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_can_read_data")]
		public static bool audio_data_stream_can_read_data(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					uint requestedSize)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_can_read_data(
								audioStream.DangerousGetHandle(), 
								requestedSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, audio_data_stream_can_read_data_from_position, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_can_read_data_from_position")]
		public static bool audio_data_stream_can_read_data_from_position(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					uint requestedSize, 
					uint position)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_can_read_data_from_position(
								audioStream.DangerousGetHandle(), 
								requestedSize, 
								position
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, audio_data_stream_read, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_read")]
		public static global::System.IntPtr audio_data_stream_read(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					global::System.IntPtr buffer, 
					uint bufferSize, 
					out uint filledSize)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_filledSize = &(filledSize))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_read(
									audioStream.DangerousGetHandle(), 
									buffer, 
									bufferSize, 
									pinned_filledSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, audio_data_stream_read_from_position, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_read_from_position")]
		public static global::System.IntPtr audio_data_stream_read_from_position(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					global::System.IntPtr buffer, 
					uint bufferSize, 
					uint position, 
					out uint filledSize)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_filledSize = &(filledSize))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_read_from_position(
									audioStream.DangerousGetHandle(), 
									buffer, 
									bufferSize, 
									position, 
									pinned_filledSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, audio_data_stream_save_to_wave_file, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_save_to_wave_file")]
		public static global::System.IntPtr audio_data_stream_save_to_wave_file(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					string fileName)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_fileName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				audioStream.DangerousAddRef(ref addRefed);
				unsafe_fileName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(fileName, true, false);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_save_to_wave_file(
									audioStream.DangerousGetHandle(), 
									unsafe_fileName
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					audioStream.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_fileName);
			}
		}

		// Signature, audio_data_stream_get_position, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_get_position")]
		public static global::System.IntPtr audio_data_stream_get_position(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					out uint position)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_position = &(position))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_get_position(
									audioStream.DangerousGetHandle(), 
									pinned_position
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, audio_data_stream_set_position, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_set_position")]
		public static global::System.IntPtr audio_data_stream_set_position(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					uint position)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_set_position(
								audioStream.DangerousGetHandle(), 
								position
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, audio_data_stream_get_property_bag, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_get_property_bag")]
		public static global::System.IntPtr audio_data_stream_get_property_bag(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					out global::System.IntPtr propbag)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_propbag = &(propbag))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_get_property_bag(
									audioStream.DangerousGetHandle(), 
									pinned_propbag
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, audio_data_stream_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioDataStream", "audio_data_stream_release")]
		public static global::System.IntPtr audio_data_stream_release(global::System.IntPtr audioStream)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_data_stream_release(audioStream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, audio_stream_is_handle_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioInputStream", "audio_stream_is_handle_valid")]
		public static bool audio_stream_is_handle_valid(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_is_handle_valid(audioStream.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, audio_stream_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioInputStream", "audio_stream_release")]
		public static global::System.IntPtr audio_stream_release(global::System.IntPtr audioStream)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_release(audioStream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, audio_stream_is_handle_valid__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioOutputStream", "audio_stream_is_handle_valid")]
		public static bool audio_stream_is_handle_valid__0(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_is_handle_valid__0(audioStream.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, audio_stream_release__0, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioOutputStream", "audio_stream_release")]
		public static global::System.IntPtr audio_stream_release__0(global::System.IntPtr audioStream)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_release__0(audioStream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, audio_stream_format_is_handle_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioStreamFormat", "audio_stream_format_is_handle_valid")]
		public static bool audio_stream_format_is_handle_valid(global::System.IntPtr format)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_format_is_handle_valid(format);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, audio_stream_format_create_from_default_input, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioStreamFormat", "audio_stream_format_create_from_default_input")]
		public static global::System.IntPtr audio_stream_format_create_from_default_input(out global::System.IntPtr format)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_format = &(format))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_format_create_from_default_input(pinned_format);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, audio_stream_format_create_from_default_output, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioStreamFormat", "audio_stream_format_create_from_default_output")]
		public static global::System.IntPtr audio_stream_format_create_from_default_output(out global::System.IntPtr format)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_format = &(format))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_format_create_from_default_output(pinned_format);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, audio_stream_format_create_from_waveformat_pcm, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] byte__unsigned char, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioStreamFormat", "audio_stream_format_create_from_waveformat_pcm")]
		public static global::System.IntPtr audio_stream_format_create_from_waveformat_pcm(
					out global::System.IntPtr format, 
					uint samplesPerSecond, 
					byte bitsPerSample, 
					byte channels)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_format = &(format))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_format_create_from_waveformat_pcm(
									pinned_format, 
									samplesPerSecond, 
									bitsPerSample, 
									channels
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, audio_stream_format_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioStreamFormat", "audio_stream_format_release")]
		public static global::System.IntPtr audio_stream_format_release(global::System.IntPtr format)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_format_release(format);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, audio_stream_format_create_from_compressed_format, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_Audio_AudioStreamContainerFormat__Microsoft_CognitiveServices_Speech_csharp__AudioStreamContainerFormat__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.AudioStreamFormat", "audio_stream_format_create_from_compressed_format")]
		public static global::System.IntPtr audio_stream_format_create_from_compressed_format(
					out global::System.IntPtr format, 
					global::Microsoft_CognitiveServices_Speech_Audio.AudioStreamContainerFormat__Microsoft_CognitiveServices_Speech_csharp compressedFormat)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_format = &(format))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_format_create_from_compressed_format(
									pinned_format, 
									compressedFormat
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, audio_stream_create_pull_audio_input_stream, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PullAudioInputStream", "audio_stream_create_pull_audio_input_stream")]
		public static global::System.IntPtr audio_stream_create_pull_audio_input_stream(
					out global::System.IntPtr audioStream, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp format)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_audioStream = &(audioStream))
			{
				format.DangerousAddRef(ref addRefed);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_create_pull_audio_input_stream(
									pinned_audioStream, 
									format.DangerousGetHandle()
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					format.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, pull_audio_input_stream_set_callbacks, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_PullAudioStreamReadDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__PullAudioStreamReadDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_PullAudioStreamCloseDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__PullAudioStreamCloseDelegate__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PullAudioInputStream", "pull_audio_input_stream_set_callbacks")]
		public static global::System.IntPtr pull_audio_input_stream_set_callbacks(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					global::System.IntPtr context, 
					global::Microsoft.CognitiveServices.Speech.Internal.PullAudioStreamReadDelegate__Microsoft_CognitiveServices_Speech_csharp readCallback, 
					global::Microsoft.CognitiveServices.Speech.Internal.PullAudioStreamCloseDelegate__Microsoft_CognitiveServices_Speech_csharp closeCallback)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_readCallback = default(void*);
			void* unsafe_closeCallback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				audioStream.DangerousAddRef(ref addRefed);
				unsafe_readCallback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.PullAudioStreamReadDelegate,Microsoft.CognitiveServices.Speech.cshar" +
											"p, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									readCallback
								);
				unsafe_closeCallback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.PullAudioStreamCloseDelegate,Microsoft.CognitiveServices.Speech.csha" +
											"rp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									closeCallback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.pull_audio_input_stream_set_callbacks(
									audioStream.DangerousGetHandle(), 
									context, 
									unsafe_readCallback, 
									unsafe_closeCallback
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					audioStream.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(readCallback);
				global::System.GC.KeepAlive(closeCallback);
			}
		}

		// Signature, pull_audio_input_stream_set_getproperty_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_PullAudioStreamGetPropertyDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__PullAudioStreamGetPropertyDelegate__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PullAudioInputStream", "pull_audio_input_stream_set_getproperty_callback")]
		public static global::System.IntPtr pull_audio_input_stream_set_getproperty_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					global::System.IntPtr context, 
					global::Microsoft.CognitiveServices.Speech.Internal.PullAudioStreamGetPropertyDelegate__Microsoft_CognitiveServices_Speech_csharp getPropertyCallback)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_getPropertyCallback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				audioStream.DangerousAddRef(ref addRefed);
				unsafe_getPropertyCallback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.PullAudioStreamGetPropertyDelegate,Microsoft.CognitiveServices.Speec" +
											"h.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									getPropertyCallback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.pull_audio_input_stream_set_getproperty_callback(
									audioStream.DangerousGetHandle(), 
									context, 
									unsafe_getPropertyCallback
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					audioStream.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(getPropertyCallback);
			}
		}

		// Signature, audio_stream_create_pull_audio_output_stream, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PullAudioOutputStream", "audio_stream_create_pull_audio_output_stream")]
		public static global::System.IntPtr audio_stream_create_pull_audio_output_stream(out global::System.IntPtr audioStream)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_audioStream = &(audioStream))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_create_pull_audio_output_stream(pinned_audioStream);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, pull_audio_output_stream_read, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PullAudioOutputStream", "pull_audio_output_stream_read")]
		public static global::System.IntPtr pull_audio_output_stream_read(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					global::System.IntPtr buffer, 
					uint bufferSize, 
					out uint filledSize)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_filledSize = &(filledSize))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.pull_audio_output_stream_read(
									audioStream.DangerousGetHandle(), 
									buffer, 
									bufferSize, 
									pinned_filledSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, audio_stream_create_push_audio_input_stream, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PushAudioInputStream", "audio_stream_create_push_audio_input_stream")]
		public static global::System.IntPtr audio_stream_create_push_audio_input_stream(
					out global::System.IntPtr audioStream, 
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp format)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_audioStream = &(audioStream))
			{
				format.DangerousAddRef(ref addRefed);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_create_push_audio_input_stream(
									pinned_audioStream, 
									format.DangerousGetHandle()
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					format.DangerousRelease();
			}
			// Return
			return unsafe___value;
		}

		// Signature, push_audio_input_stream_write, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PushAudioInputStream", "push_audio_input_stream_write")]
		public static global::System.IntPtr push_audio_input_stream_write(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					byte[] buffer, 
					uint size)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_buffer;
			global::System.IntPtr unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_buffer = ((buffer != null 
						&& buffer.Length == 0) ? new byte[1] : buffer))
			{
				unsafe_buffer = (byte*)pinned_buffer;
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.push_audio_input_stream_write(
									audioStream.DangerousGetHandle(), 
									unsafe_buffer, 
									size
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, push_audio_input_stream_close, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PushAudioInputStream", "push_audio_input_stream_close")]
		public static global::System.IntPtr push_audio_input_stream_close(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			audioStream.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.push_audio_input_stream_close(audioStream.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				audioStream.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, push_audio_input_stream_set_property_by_id, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PushAudioInputStream", "push_audio_input_stream_set_property_by_id")]
		public static global::System.IntPtr push_audio_input_stream_set_property_by_id(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp haudioStream, 
					int id, 
					string value)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_value = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				haudioStream.DangerousAddRef(ref addRefed);
				unsafe_value = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(value, true, false);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.push_audio_input_stream_set_property_by_id(
									haudioStream.DangerousGetHandle(), 
									id, 
									unsafe_value
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					haudioStream.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_value);
			}
		}

		// Signature, push_audio_input_stream_set_property_by_name, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PushAudioInputStream", "push_audio_input_stream_set_property_by_name")]
		public static global::System.IntPtr push_audio_input_stream_set_property_by_name(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp haudioStream, 
					string name, 
					string value)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_name = default(byte*);
			byte* unsafe_value = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				haudioStream.DangerousAddRef(ref addRefed);
				unsafe_name = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(name, true, false);
				unsafe_value = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(value, true, false);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.push_audio_input_stream_set_property_by_name(
									haudioStream.DangerousGetHandle(), 
									unsafe_name, 
									unsafe_value
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					haudioStream.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_name);
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_value);
			}
		}

		// Signature, audio_stream_create_push_audio_output_stream, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PushAudioOutputStream", "audio_stream_create_push_audio_output_stream")]
		public static global::System.IntPtr audio_stream_create_push_audio_output_stream(out global::System.IntPtr audioStream)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_audioStream = &(audioStream))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.audio_stream_create_push_audio_output_stream(pinned_audioStream);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, push_audio_output_stream_set_callbacks, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_PushAudioStreamWriteDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__PushAudioStreamWriteDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_PushAudioStreamCloseDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__PushAudioStreamCloseDelegate__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.PushAudioOutputStream", "push_audio_output_stream_set_callbacks")]
		public static global::System.IntPtr push_audio_output_stream_set_callbacks(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp audioStream, 
					global::System.IntPtr context, 
					global::Microsoft.CognitiveServices.Speech.Internal.PushAudioStreamWriteDelegate__Microsoft_CognitiveServices_Speech_csharp writeCallback, 
					global::Microsoft.CognitiveServices.Speech.Internal.PushAudioStreamCloseDelegate__Microsoft_CognitiveServices_Speech_csharp closeCallback)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_writeCallback = default(void*);
			void* unsafe_closeCallback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				audioStream.DangerousAddRef(ref addRefed);
				unsafe_writeCallback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.PushAudioStreamWriteDelegate,Microsoft.CognitiveServices.Speech.csha" +
											"rp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									writeCallback
								);
				unsafe_closeCallback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.PushAudioStreamCloseDelegate,Microsoft.CognitiveServices.Speech.csha" +
											"rp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									closeCallback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.push_audio_output_stream_set_callbacks(
									audioStream.DangerousGetHandle(), 
									context, 
									unsafe_writeCallback, 
									unsafe_closeCallback
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					audioStream.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(writeCallback);
				global::System.GC.KeepAlive(closeCallback);
			}
		}

		// Signature, synth_result_get_result_id, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SynthesisResult", "synth_result_get_result_id")]
		public static global::System.IntPtr synth_result_get_result_id(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					global::System.IntPtr resultId, 
					uint resultIdLength)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synth_result_get_result_id(
								result.DangerousGetHandle(), 
								resultId, 
								resultIdLength
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synth_result_get_reason, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_ResultReason__Microsoft_CognitiveServices_Speech_csharp__ResultReason__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SynthesisResult", "synth_result_get_reason")]
		public static global::System.IntPtr synth_result_get_reason(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					out global::Microsoft_CognitiveServices_Speech.ResultReason__Microsoft_CognitiveServices_Speech_csharp reason)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			fixed (global::Microsoft_CognitiveServices_Speech.ResultReason__Microsoft_CognitiveServices_Speech_csharp* pinned_reason = &(reason))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synth_result_get_reason(
									result.DangerousGetHandle(), 
									pinned_reason
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synth_result_get_reason_canceled, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_CancellationReason__Microsoft_CognitiveServices_Speech_csharp__CancellationReason__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SynthesisResult", "synth_result_get_reason_canceled")]
		public static global::System.IntPtr synth_result_get_reason_canceled(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					out global::Microsoft_CognitiveServices_Speech.CancellationReason__Microsoft_CognitiveServices_Speech_csharp reason)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			fixed (global::Microsoft_CognitiveServices_Speech.CancellationReason__Microsoft_CognitiveServices_Speech_csharp* pinned_reason = &(reason))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synth_result_get_reason_canceled(
									result.DangerousGetHandle(), 
									pinned_reason
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synth_result_get_canceled_error_code, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Microsoft_CognitiveServices_Speech_CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp__CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SynthesisResult", "synth_result_get_canceled_error_code")]
		public static global::System.IntPtr synth_result_get_canceled_error_code(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					out global::Microsoft_CognitiveServices_Speech.CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp errorCode)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			fixed (global::Microsoft_CognitiveServices_Speech.CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp* pinned_errorCode = &(errorCode))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synth_result_get_canceled_error_code(
									result.DangerousGetHandle(), 
									pinned_errorCode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synth_result_get_audio_data, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SynthesisResult", "synth_result_get_audio_data")]
		public static global::System.IntPtr synth_result_get_audio_data(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					global::System.IntPtr buffer, 
					uint bufferSize, 
					out uint filledSize)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_filledSize = &(filledSize))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synth_result_get_audio_data(
									result.DangerousGetHandle(), 
									buffer, 
									bufferSize, 
									pinned_filledSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synth_result_get_audio_length, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SynthesisResult", "synth_result_get_audio_length")]
		public static global::System.IntPtr synth_result_get_audio_length(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					out uint audioLength)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_audioLength = &(audioLength))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synth_result_get_audio_length(
									result.DangerousGetHandle(), 
									pinned_audioLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synth_result_get_property_bag, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SynthesisResult", "synth_result_get_property_bag")]
		public static global::System.IntPtr synth_result_get_property_bag(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result, 
					out global::System.IntPtr hpropbag)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_hpropbag = &(hpropbag))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synth_result_get_property_bag(
									result.DangerousGetHandle(), 
									pinned_hpropbag
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_result_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SynthesisResult", "synthesizer_result_handle_is_valid")]
		public static bool synthesizer_result_handle_is_valid(global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp result)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			result.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_result_handle_is_valid(result.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				result.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, synthesizer_result_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.SynthesisResult", "synthesizer_result_handle_release")]
		public static global::System.IntPtr synthesizer_result_handle_release(global::System.IntPtr result)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_result_handle_release(result);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_handle_is_valid")]
		public static bool synthesizer_handle_is_valid(global::System.IntPtr synthHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_handle_is_valid(synthHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, synthesizer_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_handle_release")]
		public static global::System.IntPtr synthesizer_handle_release(global::System.IntPtr synthHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_handle_release(synthHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_async_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_async_handle_is_valid")]
		public static bool synthesizer_async_handle_is_valid(global::System.IntPtr synthHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_async_handle_is_valid(synthHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, synthesizer_async_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_async_handle_release")]
		public static global::System.IntPtr synthesizer_async_handle_release(global::System.IntPtr synthHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_async_handle_release(synthHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_result_handle_is_valid__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_result_handle_is_valid")]
		public static bool synthesizer_result_handle_is_valid__0(global::System.IntPtr resultHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_result_handle_is_valid__0(resultHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, synthesizer_result_handle_release__0, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_result_handle_release")]
		public static global::System.IntPtr synthesizer_result_handle_release__0(global::System.IntPtr resultHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_result_handle_release__0(resultHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_event_handle_is_valid, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_event_handle_is_valid")]
		public static bool synthesizer_event_handle_is_valid(global::System.IntPtr eventHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_event_handle_is_valid(eventHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, synthesizer_event_handle_release, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_event_handle_release")]
		public static global::System.IntPtr synthesizer_event_handle_release(global::System.IntPtr eventHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_event_handle_release(eventHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_enable, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_enable")]
		public static global::System.IntPtr synthesizer_enable(global::System.IntPtr synthHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_enable(synthHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_disable, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_disable")]
		public static global::System.IntPtr synthesizer_disable(global::System.IntPtr synthHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_disable(synthHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_is_enabled, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_is_enabled")]
		public static global::System.IntPtr synthesizer_is_enabled(
					global::System.IntPtr synthHandle, 
					out bool enabled)
		{
			// Setup
			int unsafe_enabled;
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_is_enabled(
								synthHandle, 
								&(unsafe_enabled)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			enabled = unsafe_enabled != 0;
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_get_property_bag, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_get_property_bag")]
		public static global::System.IntPtr synthesizer_get_property_bag(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					out global::System.IntPtr hpropbag)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			synthHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_hpropbag = &(hpropbag))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_get_property_bag(
									synthHandle.DangerousGetHandle(), 
									pinned_hpropbag
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				synthHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_speak_text, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_speak_text")]
		public static global::System.IntPtr synthesizer_speak_text(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					global::System.IntPtr text, 
					uint textLength, 
					out global::System.IntPtr resultHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			synthHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_resultHandle = &(resultHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_speak_text(
									synthHandle.DangerousGetHandle(), 
									text, 
									textLength, 
									pinned_resultHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				synthHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_speak_ssml, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_speak_ssml")]
		public static global::System.IntPtr synthesizer_speak_ssml(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					global::System.IntPtr ssml, 
					uint ssmlLength, 
					out global::System.IntPtr resultHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			synthHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_resultHandle = &(resultHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_speak_ssml(
									synthHandle.DangerousGetHandle(), 
									ssml, 
									ssmlLength, 
									pinned_resultHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				synthHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_speak_text_async, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_speak_text_async")]
		public static global::System.IntPtr synthesizer_speak_text_async(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					global::System.IntPtr text, 
					uint textLength, 
					out global::System.IntPtr asyncHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			synthHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_asyncHandle = &(asyncHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_speak_text_async(
									synthHandle.DangerousGetHandle(), 
									text, 
									textLength, 
									pinned_asyncHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				synthHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_speak_ssml_async, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_speak_ssml_async")]
		public static global::System.IntPtr synthesizer_speak_ssml_async(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					global::System.IntPtr ssml, 
					uint ssmlLength, 
					out global::System.IntPtr asyncHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			synthHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_asyncHandle = &(asyncHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_speak_ssml_async(
									synthHandle.DangerousGetHandle(), 
									ssml, 
									ssmlLength, 
									pinned_asyncHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				synthHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_start_speaking_text, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_start_speaking_text")]
		public static global::System.IntPtr synthesizer_start_speaking_text(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					global::System.IntPtr text, 
					uint textLength, 
					out global::System.IntPtr resultHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			synthHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_resultHandle = &(resultHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_start_speaking_text(
									synthHandle.DangerousGetHandle(), 
									text, 
									textLength, 
									pinned_resultHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				synthHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_start_speaking_ssml, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_start_speaking_ssml")]
		public static global::System.IntPtr synthesizer_start_speaking_ssml(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					global::System.IntPtr ssml, 
					uint ssmlLength, 
					out global::System.IntPtr resultHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			synthHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_resultHandle = &(resultHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_start_speaking_ssml(
									synthHandle.DangerousGetHandle(), 
									ssml, 
									ssmlLength, 
									pinned_resultHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				synthHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_start_speaking_text_async, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_start_speaking_text_async")]
		public static global::System.IntPtr synthesizer_start_speaking_text_async(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					global::System.IntPtr text, 
					uint textLength, 
					out global::System.IntPtr asyncHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			synthHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_asyncHandle = &(asyncHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_start_speaking_text_async(
									synthHandle.DangerousGetHandle(), 
									text, 
									textLength, 
									pinned_asyncHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				synthHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_start_speaking_ssml_async, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_start_speaking_ssml_async")]
		public static global::System.IntPtr synthesizer_start_speaking_ssml_async(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					global::System.IntPtr ssml, 
					uint ssmlLength, 
					out global::System.IntPtr asyncHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			synthHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_asyncHandle = &(asyncHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_start_speaking_ssml_async(
									synthHandle.DangerousGetHandle(), 
									ssml, 
									ssmlLength, 
									pinned_asyncHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				synthHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_speak_async_wait_for, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_speak_async_wait_for")]
		public static global::System.IntPtr synthesizer_speak_async_wait_for(
					global::System.IntPtr hasync, 
					uint milliseconds, 
					out global::System.IntPtr resultHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_resultHandle = &(resultHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_speak_async_wait_for(
									hasync, 
									milliseconds, 
									pinned_resultHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_started_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_started_set_callback")]
		public static global::System.IntPtr synthesizer_started_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				synthHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.TtsCallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.cshar" +
											"p, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_started_set_callback(
									synthHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					synthHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, synthesizer_synthesizing_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_synthesizing_set_callback")]
		public static global::System.IntPtr synthesizer_synthesizing_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				synthHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.TtsCallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.cshar" +
											"p, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_synthesizing_set_callback(
									synthHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					synthHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, synthesizer_completed_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_completed_set_callback")]
		public static global::System.IntPtr synthesizer_completed_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				synthHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.TtsCallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.cshar" +
											"p, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_completed_set_callback(
									synthHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					synthHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, synthesizer_canceled_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_canceled_set_callback")]
		public static global::System.IntPtr synthesizer_canceled_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				synthHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.TtsCallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.cshar" +
											"p, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_canceled_set_callback(
									synthHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					synthHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, synthesizer_word_boundary_set_callback, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] Microsoft_CognitiveServices_Speech_Internal_TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp__Microsoft_CognitiveServices_Speech_Internal__TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_word_boundary_set_callback")]
		public static global::System.IntPtr synthesizer_word_boundary_set_callback(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp synthHandle, 
					global::Microsoft.CognitiveServices.Speech.Internal.TtsCallbackFunctionDelegate__Microsoft_CognitiveServices_Speech_csharp callback, 
					global::System.IntPtr context)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				synthHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Microsoft.CognitiveServices.Speech.Internal.TtsCallbackFunctionDelegate,Microsoft.CognitiveServices.Speech.cshar" +
											"p, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_word_boundary_set_callback(
									synthHandle.DangerousGetHandle(), 
									unsafe_callback, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (addRefed)
					synthHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, synthesizer_synthesis_event_get_result, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_synthesis_event_get_result")]
		public static global::System.IntPtr synthesizer_synthesis_event_get_result(
					global::System.IntPtr eventHandle, 
					out global::System.IntPtr resultHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_resultHandle = &(resultHandle))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_synthesis_event_get_result(
									eventHandle, 
									pinned_resultHandle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, synthesizer_word_boundary_event_get_values, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] ulong__unsigned __int64, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.Synthesizer", "synthesizer_word_boundary_event_get_values")]
		public static global::System.IntPtr synthesizer_word_boundary_event_get_values(
					global::System.IntPtr eventHandle, 
					out ulong audioOffset, 
					out uint textOffset, 
					out uint wordLength)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (ulong* pinned_audioOffset = &(audioOffset))
				fixed (uint* pinned_textOffset = &(textOffset))
					fixed (uint* pinned_wordLength = &(wordLength))
					{
						// Call to native method
						unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.synthesizer_word_boundary_event_get_values(
											eventHandle, 
											pinned_audioOffset, 
											pinned_textOffset, 
											pinned_wordLength
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
			// Return
			return unsafe___value;
		}

		// Signature, user_get_id, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_CognitiveServices_Speech_Internal_InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.User", "user_get_id")]
		public static global::System.IntPtr user_get_id(
					global::Microsoft.CognitiveServices.Speech.Internal.InteropSafeHandle__Microsoft_CognitiveServices_Speech_csharp user, 
					global::System.IntPtr text, 
					uint size)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe___value;
			// Marshalling
			user.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.user_get_id(
								user.DangerousGetHandle(), 
								text, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				user.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, user_create_from_id, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.User", "user_create_from_id")]
		public static global::System.IntPtr user_create_from_id(
					global::System.IntPtr text, 
					out global::System.IntPtr user)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_user = &(user))
			{
				// Call to native method
				unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.user_create_from_id(
									text, 
									pinned_user
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, user_release_handle, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.CognitiveServices.Speech.csharp, Version=1.8.0.28, Culture=neutral, PublicKeyToken=d2e6dcccb609e663", "Microsoft.CognitiveServices.Speech.Internal.User", "user_release_handle")]
		public static global::System.IntPtr user_release_handle(global::System.IntPtr user)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Microsoft_CognitiveServices_Speech_core_dll_PInvokes.user_release_handle(user);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module '[MRT]'
	/// </summary>
	public unsafe static partial class _MRT_
	{
		// Signature, RhpGetFuncEvalParameterBufferSize, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetFuncEvalParameterBufferSize")]
		public static uint RhpGetFuncEvalParameterBufferSize()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetFuncEvalParameterBufferSize();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpGetFuncEvalMode, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetFuncEvalMode")]
		public static uint RhpGetFuncEvalMode()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetFuncEvalMode();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpRecordDebuggeeInitiatedHandle, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpRecordDebuggeeInitiatedHandle")]
		public static uint RhpRecordDebuggeeInitiatedHandle(void* objectHandle)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpRecordDebuggeeInitiatedHandle(((void*)objectHandle));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpVerifyDebuggerCleanup, [fwd] [return] [EETypeRva:0x00041F6C] void__void, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpVerifyDebuggerCleanup")]
		public static void RhpVerifyDebuggerCleanup()
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhpVerifyDebuggerCleanup();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, RhpGetCurrentThread, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetCurrentThread")]
		public static global::System.IntPtr RhpGetCurrentThread()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetCurrentThread();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhWaitForPendingFinalizers, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhWaitForPendingFinalizers")]
		public static void RhWaitForPendingFinalizers(int allowReentrantWait)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhWaitForPendingFinalizers(allowReentrantWait);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, _RhYield, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_RhYield")]
		public static int _RhYield()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes._RhYield();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhFlushProcessWriteBuffers, [fwd] [return] [EETypeRva:0x00041F6C] void__void, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhFlushProcessWriteBuffers")]
		public static void RhFlushProcessWriteBuffers()
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhFlushProcessWriteBuffers();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, RhCompatibleReentrantWaitAny, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr___ptr__w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCompatibleReentrantWaitAny")]
		public static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhCompatibleReentrantWaitAny(
								alertable, 
								timeout, 
								count, 
								((global::System.IntPtr*)handles)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhCallDescrWorkerNative, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCallDescrWorkerNative")]
		public static void RhCallDescrWorkerNative(global::System.IntPtr callDescr)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhCallDescrWorkerNative(callDescr);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, _ecvt_s, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int___ptrint *, [fwd] [in] [EETypeRva:0x000419B0] int___ptrint *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_ecvt_s")]
		public static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes._ecvt_s(
								((byte*)buffer), 
								sizeInBytes, 
								value, 
								count, 
								((int*)dec), 
								((int*)sign)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, memmove, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memmove")]
		public static void memmove(
					byte* dmem, 
					byte* smem, 
					uint size)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.memmove(
								((byte*)dmem), 
								((byte*)smem), 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, memset, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memset")]
		public static void memset(
					byte* mem, 
					int value, 
					uint size)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.memset(
								((byte*)mem), 
								value, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module '*'
	/// </summary>
	public unsafe static partial class _
	{
		// Signature, CallingConventionConverter_GetStubs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.TypeLoader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.Runtime.TypeLoader.CallConverterThunk", "CallingConventionConverter_GetStubs")]
		public static void CallingConventionConverter_GetStubs(
					out global::System.IntPtr returnVoidStub, 
					out global::System.IntPtr returnIntegerStub, 
					out global::System.IntPtr commonStub, 
					out global::System.IntPtr returnFloatingPointReturn4Thunk, 
					out global::System.IntPtr returnFloatingPointReturn8Thunk)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_returnVoidStub = &(returnVoidStub))
				fixed (global::System.IntPtr* pinned_returnIntegerStub = &(returnIntegerStub))
					fixed (global::System.IntPtr* pinned_commonStub = &(commonStub))
						fixed (global::System.IntPtr* pinned_returnFloatingPointReturn4Thunk = &(returnFloatingPointReturn4Thunk))
							fixed (global::System.IntPtr* pinned_returnFloatingPointReturn8Thunk = &(returnFloatingPointReturn8Thunk))
							{
								// Call to native method
								global::__Interop.__PInvokes.CallingConventionConverter_GetStubs(
													pinned_returnVoidStub, 
													pinned_returnIntegerStub, 
													pinned_commonStub, 
													pinned_returnFloatingPointReturn4Thunk, 
													pinned_returnFloatingPointReturn8Thunk
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
							}
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-string-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_string_l1_1_0_dll
	{
		// Signature, WindowsCreateStringReference, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_Runtime_InteropServices_HSTRING_HEADER__System_Private_Interop___ptrSystem_Runtime_InteropServices__HSTRING_HEADER__System_Private_Interop *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore", "WindowsCreateStringReference")]
		public static int WindowsCreateStringReference(
					char* sourceString, 
					uint length, 
					global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop* phstringHeader, 
					void* hstring)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_winrt_string_l1_1_0_dll_PInvokes.WindowsCreateStringReference(
								((ushort*)sourceString), 
								length, 
								((global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop*)phstringHeader), 
								((void*)hstring)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-errorhandling-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll
	{
		// Signature, GetLastError, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetLastError")]
		public static int GetLastError()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.GetLastError();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, SetLastError, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "SetLastError")]
		public static void SetLastError(uint dwErrCode)
		{
			// Marshalling
			// Call to native method
			global::__Interop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.SetLastError(dwErrCode);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll
	{
		// Signature, RoInitialize, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "RoInitialize")]
		public static int RoInitialize(uint initType)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_winrt_l1_1_0_dll_PInvokes.RoInitialize(initType);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-localization-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll
	{
		// Signature, IsValidLocaleName, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "IsValidLocaleName")]
		public static int IsValidLocaleName(char* lpLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.IsValidLocaleName(((ushort*)lpLocaleName));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResolveLocaleName, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "ResolveLocaleName")]
		public static int ResolveLocaleName(
					char* lpNameToResolve, 
					char* lpLocaleName, 
					int cchLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.ResolveLocaleName(
								((ushort*)lpNameToResolve), 
								((ushort*)lpLocaleName), 
								cchLocaleName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'kernel32.dll'
	/// </summary>
	public unsafe static partial class kernel32_dll
	{
		// Signature, GetCurrentProcessId, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCurrentProcessId")]
		public static uint GetCurrentProcessId()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCurrentProcessId();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, CreateDirectoryPrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem____Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CreateDirectoryPrivate")]
		public static bool CreateDirectoryPrivate(
					string path, 
					ref global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem lpSecurityAttributes)
		{
			// Setup
			ushort* unsafe_path = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_path = path)
			{
				unsafe_path = (ushort*)pinned_path;
				fixed (global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem* pinned_lpSecurityAttributes = &(lpSecurityAttributes))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.CreateDirectoryPrivate(
										unsafe_path, 
										pinned_lpSecurityAttributes
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetCPInfoExW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] __Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages___ptr__Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Text.Encoding.CodePages, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCPInfoExW")]
		public static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCPInfoExW(
								CodePage, 
								dwFlags, 
								((global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages*)lpCPInfoEx)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCurrentProcess, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCurrentProcess")]
		public static global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process GetCurrentProcess()
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCurrentProcess();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, SetThreadErrorMode, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "SetThreadErrorMode")]
		public static bool SetThreadErrorMode(
					uint dwNewMode, 
					out uint lpOldMode)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (uint* pinned_lpOldMode = &(lpOldMode))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.SetThreadErrorMode(
									dwNewMode, 
									pinned_lpOldMode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetFileAttributesExPrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem__Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem____Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetFileAttributesExPrivate")]
		public static bool GetFileAttributesExPrivate(
					string name, 
					global::_.Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem fileInfoLevel, 
					ref global::_.Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem lpFileInformation)
		{
			// Setup
			ushort* unsafe_name = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_name = name)
			{
				unsafe_name = (ushort*)pinned_name;
				fixed (global::_.Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem* pinned_lpFileInformation = &(lpFileInformation))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetFileAttributesExPrivate(
										unsafe_name, 
										fileInfoLevel, 
										pinned_lpFileInformation
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FindFirstFileExPrivate, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeFindHandle__System_IO_FileSystem____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem__Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem____Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem__Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FindFirstFileExPrivate")]
		public static global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem FindFirstFileExPrivate(
					string lpFileName, 
					global::_.Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem fInfoLevelId, 
					ref global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem lpFindFileData, 
					global::_.Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem fSearchOp, 
					global::System.IntPtr lpSearchFilter, 
					int dwAdditionalFlags)
		{
			// Setup
			ushort* unsafe_lpFileName = default(ushort*);
			global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_lpFileName = lpFileName)
			{
				unsafe_lpFileName = (ushort*)pinned_lpFileName;
				fixed (global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem* pinned_lpFindFileData = &(lpFindFileData))
				{
					__value = new global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem();
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.FindFirstFileExPrivate(
										unsafe_lpFileName, 
										fInfoLevelId, 
										pinned_lpFindFileData, 
										fSearchOp, 
										lpSearchFilter, 
										dwAdditionalFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										__value, 
										unsafe___value
									);
				}
			}
			// Return
			return __value;
		}

		// Signature, GetCurrentProcessId__0, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.TraceSource, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCurrentProcessId")]
		public static uint GetCurrentProcessId__0()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCurrentProcessId__0();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetProcessId, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetProcessId")]
		public static int GetProcessId(global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process nativeHandle)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			nativeHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetProcessId(nativeHandle.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				nativeHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, GetExitCodeProcess, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetExitCodeProcess")]
		public static bool GetExitCodeProcess(
					global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process processHandle, 
					out int exitCode)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			processHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_exitCode = &(exitCode))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetExitCodeProcess(
									processHandle.DangerousGetHandle(), 
									pinned_exitCode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				processHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CloseHandle, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CloseHandle")]
		public static bool CloseHandle(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.CloseHandle(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, DuplicateHandle, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, [fwd] [in] [EETypeRva:0x000434A4] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeWaitHandle__System_Private_CoreLib____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "DuplicateHandle")]
		public static bool DuplicateHandle(
					global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process hSourceProcessHandle, 
					global::System.Runtime.InteropServices.SafeHandle hSourceHandle, 
					global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process hTargetProcess, 
					out global::Microsoft.Win32.SafeHandles.SafeWaitHandle__System_Private_CoreLib targetHandle, 
					int dwDesiredAccess, 
					bool bInheritHandle, 
					int dwOptions)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			bool addRefed_2 = false;
			global::System.IntPtr unsafe_targetHandle;
			int unsafe___value;
			// Marshalling
			hSourceProcessHandle.DangerousAddRef(ref addRefed);
			hSourceHandle.DangerousAddRef(ref addRefed_1);
			hTargetProcess.DangerousAddRef(ref addRefed_2);
			targetHandle = new global::Microsoft.Win32.SafeHandles.SafeWaitHandle__System_Private_CoreLib();
			unsafe_targetHandle = targetHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.DuplicateHandle(
								hSourceProcessHandle.DangerousGetHandle(), 
								hSourceHandle.DangerousGetHandle(), 
								hTargetProcess.DangerousGetHandle(), 
								&(unsafe_targetHandle), 
								dwDesiredAccess, 
								(bInheritHandle ? 1 : 0), 
								dwOptions
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								targetHandle, 
								unsafe_targetHandle
							);
			if (addRefed_2)
				hTargetProcess.DangerousRelease();
			if (addRefed_1)
				hSourceHandle.DangerousRelease();
			if (addRefed)
				hSourceProcessHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetStdHandle, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetStdHandle")]
		public static global::System.IntPtr GetStdHandle(int nStdHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetStdHandle(nStdHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, GetFileType, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetFileType")]
		public static uint GetFileType(global::System.IntPtr hFile)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetFileType(hFile);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, FindClose, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FindClose")]
		public static bool FindClose(global::System.IntPtr hFindFile)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.FindClose(hFindFile);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, LocalAlloc, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_NetworkInformation____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NetworkInformation, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalAlloc")]
		public static global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_NetworkInformation LocalAlloc(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes)
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_NetworkInformation __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_NetworkInformation();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalAlloc(
								uFlags, 
								sizetdwBytes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, GetComputerName, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000418E8] char__wchar_t, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetComputerName")]
		public static int GetComputerName(
					ref char lpBuffer, 
					ref uint nSize)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_lpBuffer = &(lpBuffer))
			{
				ushort* unsafe_pinned_lpBuffer = (ushort*)pinned_lpBuffer;
				fixed (uint* pinned_nSize = &(nSize))
				{
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetComputerName(
										unsafe_pinned_lpBuffer, 
										pinned_nSize
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, OpenProcess, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "OpenProcess")]
		public static global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process OpenProcess(
					int access, 
					bool inherit, 
					int processId)
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.OpenProcess(
								access, 
								(inherit ? 1 : 0), 
								processId
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, GetConsoleMode, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetConsoleMode")]
		public static bool GetConsoleMode(
					global::System.IntPtr handle, 
					out int mode)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_mode = &(mode))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetConsoleMode(
									handle, 
									pinned_mode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FormatMessage, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__0(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__0(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, WriteFile, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "WriteFile")]
		public static int WriteFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToWrite, 
					out int numBytesWritten, 
					global::System.IntPtr mustBeZero)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_numBytesWritten = &(numBytesWritten))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.WriteFile(
									handle, 
									((byte*)bytes), 
									numBytesToWrite, 
									pinned_numBytesWritten, 
									mustBeZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, GetConsoleOutputCP, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetConsoleOutputCP")]
		public static uint GetConsoleOutputCP()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetConsoleOutputCP();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, LocalFree, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NetworkInformation, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalFree")]
		public static global::System.IntPtr LocalFree(global::System.IntPtr handle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalFree(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, ReadFile, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "ReadFile")]
		public static int ReadFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToRead, 
					out int numBytesRead, 
					global::System.IntPtr mustBeZero)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_numBytesRead = &(numBytesRead))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.ReadFile(
									handle, 
									((byte*)bytes), 
									numBytesToRead, 
									pinned_numBytesRead, 
									mustBeZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, ReadConsole, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "ReadConsole")]
		public static bool ReadConsole(
					global::System.IntPtr hConsoleInput, 
					byte* lpBuffer, 
					int nNumberOfCharsToRead, 
					out int lpNumberOfCharsRead, 
					global::System.IntPtr pInputControl)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_lpNumberOfCharsRead = &(lpNumberOfCharsRead))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.ReadConsole(
									hConsoleInput, 
									((byte*)lpBuffer), 
									nNumberOfCharsToRead, 
									pinned_lpNumberOfCharsRead, 
									pInputControl
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, WriteConsole, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "WriteConsole")]
		public static bool WriteConsole(
					global::System.IntPtr hConsoleOutput, 
					byte* lpBuffer, 
					int nNumberOfCharsToWrite, 
					out int lpNumberOfCharsWritten, 
					global::System.IntPtr lpReservedMustBeNull)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_lpNumberOfCharsWritten = &(lpNumberOfCharsWritten))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.WriteConsole(
									hConsoleOutput, 
									((byte*)lpBuffer), 
									nNumberOfCharsToWrite, 
									pinned_lpNumberOfCharsWritten, 
									lpReservedMustBeNull
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FormatMessage__1, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__1(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__1(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, GetConsoleCP, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetConsoleCP")]
		public static uint GetConsoleCP()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetConsoleCP();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, LocalAlloc__0, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_Primitives____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalAlloc")]
		public static global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives LocalAlloc__0(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes)
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalAlloc__0(
								uFlags, 
								sizetdwBytes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, WideCharToMultiByte, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "WideCharToMultiByte")]
		public static int WideCharToMultiByte(
					uint CodePage, 
					uint dwFlags, 
					char* lpWideCharStr, 
					int cchWideChar, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					global::System.IntPtr lpDefaultChar, 
					global::System.IntPtr lpUsedDefaultChar)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.WideCharToMultiByte(
								CodePage, 
								dwFlags, 
								((ushort*)lpWideCharStr), 
								cchWideChar, 
								((byte*)lpMultiByteStr), 
								cbMultiByte, 
								lpDefaultChar, 
								lpUsedDefaultChar
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MultiByteToWideChar, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "MultiByteToWideChar")]
		public static int MultiByteToWideChar(
					uint CodePage, 
					uint dwFlags, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					char* lpWideCharStr, 
					int cchWideChar)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.MultiByteToWideChar(
								CodePage, 
								dwFlags, 
								((byte*)lpMultiByteStr), 
								cbMultiByte, 
								((ushort*)lpWideCharStr), 
								cchWideChar
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, EnumProcesses, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "EnumProcesses")]
		public static bool EnumProcesses(
					int[] processIds, 
					int size, 
					out int needed)
		{
			// Setup
			int* unsafe_processIds;
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_processIds = ((processIds != null 
						&& processIds.Length == 0) ? new int[1] : processIds))
			{
				unsafe_processIds = (int*)pinned_processIds;
				fixed (int* pinned_needed = &(needed))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.EnumProcesses(
										unsafe_processIds, 
										size, 
										pinned_needed
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, LocalFree__0, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalFree")]
		public static global::System.IntPtr LocalFree__0(global::System.IntPtr handle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalFree__0(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, GetCPInfoExW__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] __Interop_Kernel32_CPINFOEXW__System_Console___ptr__Interop_Kernel32_CPINFOEXW__System_Console *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCPInfoExW")]
		public static int GetCPInfoExW__0(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Console* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCPInfoExW__0(
								CodePage, 
								dwFlags, 
								((global::_.Interop_Kernel32_CPINFOEXW__System_Console*)lpCPInfoEx)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__2, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__2(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__2(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__3, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__3(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__3(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__4, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__4(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__4(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__5, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__5(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__5(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, GetCurrentThread, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCurrentThread")]
		public static global::System.IntPtr GetCurrentThread()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCurrentThread();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCurrentProcess__0, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCurrentProcess")]
		public static global::System.IntPtr GetCurrentProcess__0()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCurrentProcess__0();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, CloseHandle__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CloseHandle")]
		public static bool CloseHandle__0(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.CloseHandle__0(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, LocalAlloc__1, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalAlloc")]
		public static global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows LocalAlloc__1(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes)
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalAlloc__1(
								uFlags, 
								sizetdwBytes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, CheckTokenMembershipEx, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CheckTokenMembershipEx")]
		public static bool CheckTokenMembershipEx(
					global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows TokenHandle, 
					byte[] SidToCheck, 
					uint Flags, 
					ref bool IsMember)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_SidToCheck;
			int unsafe_IsMember;
			int unsafe___value;
			// Marshalling
			TokenHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_SidToCheck = ((SidToCheck != null 
						&& SidToCheck.Length == 0) ? new byte[1] : SidToCheck))
			{
				unsafe_SidToCheck = (byte*)pinned_SidToCheck;
				unsafe_IsMember = (IsMember ? 1 : 0);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.CheckTokenMembershipEx(
									TokenHandle.DangerousGetHandle(), 
									unsafe_SidToCheck, 
									Flags, 
									&(unsafe_IsMember)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				IsMember = unsafe_IsMember != 0;
			}
			if (addRefed)
				TokenHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, DuplicateHandle__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "DuplicateHandle")]
		public static bool DuplicateHandle__0(
					global::System.IntPtr hSourceProcessHandle, 
					global::System.IntPtr hSourceHandle, 
					global::System.IntPtr hTargetProcessHandle, 
					ref global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows lpTargetHandle, 
					uint dwDesiredAccess, 
					bool bInheritHandle, 
					uint dwOptions)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_lpTargetHandle;
			global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows out_lpTargetHandle;
			global::System.IntPtr prev_unsafe_lpTargetHandle;
			int unsafe___value;
			// Marshalling
			lpTargetHandle.DangerousAddRef(ref addRefed);
			unsafe_lpTargetHandle = lpTargetHandle.DangerousGetHandle();
			prev_unsafe_lpTargetHandle = unsafe_lpTargetHandle;
			out_lpTargetHandle = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.DuplicateHandle__0(
								hSourceProcessHandle, 
								hSourceHandle, 
								hTargetProcessHandle, 
								&(unsafe_lpTargetHandle), 
								dwDesiredAccess, 
								(bInheritHandle ? 1 : 0), 
								dwOptions
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				lpTargetHandle.DangerousRelease();
			if (prev_unsafe_lpTargetHandle != unsafe_lpTargetHandle)
			{
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									out_lpTargetHandle, 
									unsafe_lpTargetHandle
								);
				lpTargetHandle = out_lpTargetHandle;
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, LocalFree__1, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalFree")]
		public static global::System.IntPtr LocalFree__1(global::System.IntPtr handle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalFree__1(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, SetFileCompletionNotificationModes, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets__Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "SetFileCompletionNotificationModes")]
		public static bool SetFileCompletionNotificationModes(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					global::_.Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets flags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.SetFileCompletionNotificationModes(
								handle.DangerousGetHandle(), 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'ws2_32.dll'
	/// </summary>
	public unsafe static partial class ws2_32_dll
	{
		// Signature, WSAStartup, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] short__short, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] __Interop_Winsock_WSAData__System_Net_NameResolution____Interop_Winsock_WSAData__System_Net_NameResolution, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAStartup")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAStartup(
					short wVersionRequested, 
					out global::_.Interop_Winsock_WSAData__System_Net_NameResolution lpWSAData)
		{
			// Setup
			global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType unsafe_lpWSAData = default(global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			unsafe_lpWSAData = default(global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAStartup(
								wVersionRequested, 
								&(unsafe_lpWSAData)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.Marshal__UnsafeToSafe(
								ref unsafe_lpWSAData, 
								out lpWSAData
							);
			// Return
			return unsafe___value;
		}

		// Signature, gethostname, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "gethostname")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives gethostname(
					global::System.Text.StringBuilder hostName, 
					int bufferLength)
		{
			// Setup
			byte* unsafe_hostName = default(byte*);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			try
			{
				// Marshalling
				if (hostName == null)
					unsafe_hostName = null;
				else
				{
					unsafe_hostName = (byte*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(hostName.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_hostName == null)
						throw new global::System.OutOfMemoryException();
				}
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.gethostname(
									unsafe_hostName, 
									bufferLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (hostName != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_hostName, 
										hostName
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_hostName != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_hostName);
			}
		}

		// Signature, FreeAddrInfoExW, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_Net_Sockets_AddressInfoEx__System_Net_NameResolution___ptrSystem_Net_Sockets__AddressInfoEx__System_Net_NameResolution *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "FreeAddrInfoExW")]
		public static void FreeAddrInfoExW(global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* pAddrInfo)
		{
			// Marshalling
			// Call to native method
			global::__Interop.ws2_32_dll_PInvokes.FreeAddrInfoExW(((global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution*)pAddrInfo));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, WSAGetOverlappedResult, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_Threading_NativeOverlapped__System_Private_CoreLib___ptrSystem_Threading__NativeOverlapped__System_Private_CoreLib *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAGetOverlappedResult")]
		public static bool WSAGetOverlappedResult(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					out uint bytesTransferred, 
					bool wait, 
					out global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_bytesTransferred = &(bytesTransferred))
				fixed (global::System_Net_Sockets.SocketFlags__System_Net_Sockets* pinned_socketFlags = &(socketFlags))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAGetOverlappedResult(
										socketHandle.DangerousGetHandle(), 
										((global::System_Threading.NativeOverlapped__System_Private_CoreLib*)overlapped), 
										pinned_bytesTransferred, 
										(wait ? 1 : 0), 
										pinned_socketFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, WSASocketW, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_AddressFamily__System_Net_Primitives__AddressFamily__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Internals_SocketType__System_Net_NameResolution__SocketType__System_Net_NameResolution, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASocketW")]
		public static global::System.IntPtr WSASocketW(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Internals.SocketType__System_Net_NameResolution socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASocketW(
								addressFamily, 
								socketType, 
								protocolType, 
								protocolInfo, 
								group, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, closesocket, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "closesocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket(global::System.IntPtr socketHandle)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.closesocket(socketHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					ref global::System.IntPtr pointer, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_pointer = &(pointer))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									pinned_pointer, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__0, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__0(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					byte[] optionValue, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_optionValue;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_optionValue = ((optionValue != null 
						&& optionValue.Length == 0) ? new byte[1] : optionValue))
			{
				unsafe_optionValue = (byte*)pinned_optionValue;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt__0(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									unsafe_optionValue, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockname, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockname")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockname(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					byte[] socketAddress, 
					ref int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				fixed (int* pinned_socketAddressSize = &(socketAddressSize))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockname(
										socketHandle.DangerousGetHandle(), 
										unsafe_socketAddress, 
										pinned_socketAddressSize
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getpeername, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getpeername")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getpeername(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					byte[] socketAddress, 
					ref int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				fixed (int* pinned_socketAddressSize = &(socketAddressSize))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getpeername(
										socketHandle.DangerousGetHandle(), 
										unsafe_socketAddress, 
										pinned_socketAddressSize
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, select, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Winsock_TimeValue__System_Net_Sockets____Interop_Winsock_TimeValue__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "select")]
		public static int select(
					int ignoredParameter, 
					global::System.IntPtr[] readfds, 
					global::System.IntPtr[] writefds, 
					global::System.IntPtr[] exceptfds, 
					ref global::_.Interop_Winsock_TimeValue__System_Net_Sockets timeout)
		{
			// Setup
			global::System.IntPtr* unsafe_readfds;
			global::System.IntPtr* unsafe_writefds;
			global::System.IntPtr* unsafe_exceptfds;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_readfds = ((readfds != null 
						&& readfds.Length == 0) ? new global::System.IntPtr[1] : readfds))
			{
				unsafe_readfds = (global::System.IntPtr*)pinned_readfds;
				fixed (global::System.IntPtr* pinned_writefds = ((writefds != null 
							&& writefds.Length == 0) ? new global::System.IntPtr[1] : writefds))
				{
					unsafe_writefds = (global::System.IntPtr*)pinned_writefds;
					fixed (global::System.IntPtr* pinned_exceptfds = ((exceptfds != null 
								&& exceptfds.Length == 0) ? new global::System.IntPtr[1] : exceptfds))
					{
						unsafe_exceptfds = (global::System.IntPtr*)pinned_exceptfds;
						fixed (global::_.Interop_Winsock_TimeValue__System_Net_Sockets* pinned_timeout = &(timeout))
						{
							global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
							// Call to native method
							unsafe___value = global::__Interop.ws2_32_dll_PInvokes.select(
												ignoredParameter, 
												unsafe_readfds, 
												unsafe_writefds, 
												unsafe_exceptfds, 
												pinned_timeout
											);
							global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
							global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
						}
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, select__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "select")]
		public static int select__0(
					int ignoredParameter, 
					global::System.IntPtr[] readfds, 
					global::System.IntPtr[] writefds, 
					global::System.IntPtr[] exceptfds, 
					global::System.IntPtr nullTimeout)
		{
			// Setup
			global::System.IntPtr* unsafe_readfds;
			global::System.IntPtr* unsafe_writefds;
			global::System.IntPtr* unsafe_exceptfds;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_readfds = ((readfds != null 
						&& readfds.Length == 0) ? new global::System.IntPtr[1] : readfds))
			{
				unsafe_readfds = (global::System.IntPtr*)pinned_readfds;
				fixed (global::System.IntPtr* pinned_writefds = ((writefds != null 
							&& writefds.Length == 0) ? new global::System.IntPtr[1] : writefds))
				{
					unsafe_writefds = (global::System.IntPtr*)pinned_writefds;
					fixed (global::System.IntPtr* pinned_exceptfds = ((exceptfds != null 
								&& exceptfds.Length == 0) ? new global::System.IntPtr[1] : exceptfds))
					{
						unsafe_exceptfds = (global::System.IntPtr*)pinned_exceptfds;
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.ws2_32_dll_PInvokes.select__0(
											ignoredParameter, 
											unsafe_readfds, 
											unsafe_writefds, 
											unsafe_exceptfds, 
											nullTimeout
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, ioctlsocket, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "ioctlsocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int cmd, 
					ref int argp)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_argp = &(argp))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.ioctlsocket(
									socketHandle.DangerousGetHandle(), 
									cmd, 
									pinned_argp
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, shutdown, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "shutdown")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives shutdown(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int how)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.shutdown(
								socketHandle.DangerousGetHandle(), 
								how
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__1, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__1(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					ref int optionValue, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_optionValue = &(optionValue))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt__1(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									pinned_optionValue, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recv, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "recv")]
		public static int recv(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.recv(
								socketHandle, 
								((byte*)pinnedBuffer), 
								len, 
								socketFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WSAIoctl, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_Guid__System.Guid, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAIoctl")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAIoctl(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int ioControlCode, 
					ref global::System.Guid guid, 
					int guidSize, 
					out global::System.IntPtr funcPtr, 
					int funcPtrSize, 
					out int bytesTransferred, 
					global::System.IntPtr shouldBeNull, 
					global::System.IntPtr shouldBeNull2)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.Guid* pinned_guid = &(guid))
				fixed (global::System.IntPtr* pinned_funcPtr = &(funcPtr))
					fixed (int* pinned_bytesTransferred = &(bytesTransferred))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAIoctl(
											socketHandle.DangerousGetHandle(), 
											ioControlCode, 
											pinned_guid, 
											guidSize, 
											pinned_funcPtr, 
											funcPtrSize, 
											pinned_bytesTransferred, 
											shouldBeNull, 
											shouldBeNull2
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, GetAddrInfoW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] System_Net_Sockets_AddressInfo__System_Net_NameResolution__System_Net_Sockets__AddressInfo__System_Net_NameResolution, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Net_Sockets_SafeFreeAddrInfo__System_Net_NameResolution____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "GetAddrInfoW")]
		public static int GetAddrInfoW(
					string nodename, 
					string servicename, 
					ref global::System_Net_Sockets.AddressInfo__System_Net_NameResolution hints, 
					out global::System.Net.Sockets.SafeFreeAddrInfo__System_Net_NameResolution handle)
		{
			// Setup
			ushort* unsafe_nodename = default(ushort*);
			ushort* unsafe_servicename = default(ushort*);
			global::System.IntPtr unsafe_handle;
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_nodename = nodename)
			{
				unsafe_nodename = (ushort*)pinned_nodename;
				fixed (char* pinned_servicename = servicename)
				{
					unsafe_servicename = (ushort*)pinned_servicename;
					fixed (global::System_Net_Sockets.AddressInfo__System_Net_NameResolution* pinned_hints = &(hints))
					{
						handle = new global::System.Net.Sockets.SafeFreeAddrInfo__System_Net_NameResolution();
						unsafe_handle = handle.DangerousGetHandle();
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.ws2_32_dll_PInvokes.GetAddrInfoW(
											unsafe_nodename, 
											unsafe_servicename, 
											pinned_hints, 
											&(unsafe_handle)
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											handle, 
											unsafe_handle
										);
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, WSASocketW__0, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_AddressFamily__System_Net_Primitives__AddressFamily__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketType__System_Net_Sockets__SocketType__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASocketW")]
		public static global::System.IntPtr WSASocketW__0(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASocketW__0(
								addressFamily, 
								socketType, 
								protocolType, 
								protocolInfo, 
								group, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, closesocket__0, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "closesocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket__0(global::System.IntPtr socketHandle)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.closesocket__0(socketHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WSASocketW__1, [fwd] [return] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_AddressFamily__System_Net_Primitives__AddressFamily__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketType__System_Net_Sockets__SocketType__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_ProtocolType__System_Net_Sockets__ProtocolType__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Winsock_SocketConstructorFlags__System_Net_Sockets__Interop_Winsock_SocketConstructorFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASocketW")]
		public static global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets WSASocketW__1(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					global::System_Net_Sockets.ProtocolType__System_Net_Sockets protocolType, 
					global::System.IntPtr protocolInfo, 
					uint group, 
					global::_.Interop_Winsock_SocketConstructorFlags__System_Net_Sockets flags)
		{
			// Setup
			global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASocketW__1(
								addressFamily, 
								socketType, 
								protocolType, 
								protocolInfo, 
								group, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, WSAConnect, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAConnect")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAConnect(
					global::System.IntPtr socketHandle, 
					byte[] socketAddress, 
					int socketAddressSize, 
					global::System.IntPtr inBuffer, 
					global::System.IntPtr outBuffer, 
					global::System.IntPtr sQOS, 
					global::System.IntPtr gQOS)
		{
			// Setup
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAConnect(
									socketHandle, 
									unsafe_socketAddress, 
									socketAddressSize, 
									inBuffer, 
									outBuffer, 
									sQOS, 
									gQOS
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, listen, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "listen")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives listen(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int backlog)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.listen(
								socketHandle.DangerousGetHandle(), 
								backlog
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, bind, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "bind")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives bind(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					byte[] socketAddress, 
					int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.bind(
									socketHandle.DangerousGetHandle(), 
									unsafe_socketAddress, 
									socketAddressSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out int optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_optionValue = &(optionValue))
				fixed (int* pinned_optionLength = &(optionLength))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt(
										socketHandle.DangerousGetHandle(), 
										optionLevel, 
										optionName, 
										pinned_optionValue, 
										pinned_optionLength
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, send, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "send")]
		public static int send(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.send(
								socketHandle, 
								((byte*)pinnedBuffer), 
								len, 
								socketFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, freeaddrinfo, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "freeaddrinfo")]
		public static void freeaddrinfo(global::System.IntPtr info)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.ws2_32_dll_PInvokes.freeaddrinfo(info);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, getsockopt__0, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Winsock_Linger__System_Net_Sockets____Interop_Winsock_Linger__System_Net_Sockets, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__0(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out global::_.Interop_Winsock_Linger__System_Net_Sockets optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Winsock_Linger__System_Net_Sockets* pinned_optionValue = &(optionValue))
				fixed (int* pinned_optionLength = &(optionLength))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt__0(
										socketHandle.DangerousGetHandle(), 
										optionLevel, 
										optionName, 
										pinned_optionValue, 
										pinned_optionLength
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt__1, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Winsock_IPMulticastRequest__System_Net_Sockets____Interop_Winsock_IPMulticastRequest__System_Net_Sockets, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__1(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out global::_.Interop_Winsock_IPMulticastRequest__System_Net_Sockets optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Winsock_IPMulticastRequest__System_Net_Sockets* pinned_optionValue = &(optionValue))
				fixed (int* pinned_optionLength = &(optionLength))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt__1(
										socketHandle.DangerousGetHandle(), 
										optionLevel, 
										optionName, 
										pinned_optionValue, 
										pinned_optionLength
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt__2, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] __Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets____Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__2(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType unsafe_optionValue = default(global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_optionValue = default(global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType);
			fixed (int* pinned_optionLength = &(optionLength))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt__2(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									&(unsafe_optionValue), 
									pinned_optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.Marshal__UnsafeToSafe(
								ref unsafe_optionValue, 
								out optionValue
							);
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, ioctlsocket__0, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "ioctlsocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket__0(
					global::System.IntPtr handle, 
					int cmd, 
					ref int argp)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (int* pinned_argp = &(argp))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.ioctlsocket__0(
									handle, 
									cmd, 
									pinned_argp
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__2, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Winsock_Linger__System_Net_Sockets____Interop_Winsock_Linger__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__2(
					global::System.IntPtr handle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					ref global::_.Interop_Winsock_Linger__System_Net_Sockets linger, 
					int optionLength)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (global::_.Interop_Winsock_Linger__System_Net_Sockets* pinned_linger = &(linger))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt__2(
									handle, 
									optionLevel, 
									optionName, 
									pinned_linger, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, accept, [fwd] [return] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "accept")]
		public static global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets accept(
					global::System.IntPtr socketHandle, 
					byte[] socketAddress, 
					ref int socketAddressSize)
		{
			// Setup
			byte* unsafe_socketAddress;
			global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				fixed (int* pinned_socketAddressSize = &(socketAddressSize))
				{
					__value = new global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets();
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.accept(
										socketHandle, 
										unsafe_socketAddress, 
										pinned_socketAddressSize
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										__value, 
										unsafe___value
									);
				}
			}
			// Return
			return __value;
		}

		// Signature, GetAddrInfoExW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] System_Net_Sockets_AddressInfoEx__System_Net_NameResolution__System_Net_Sockets__AddressInfoEx__System_Net_NameResolution, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_Net_Sockets_AddressInfoEx__System_Net_NameResolution___ptrSystem_Net_Sockets__AddressInfoEx__System_Net_NameResolution *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] System_Threading_NativeOverlapped__System_Private_CoreLib__System_Threading__NativeOverlapped__System_Private_CoreLib, [fwd] [in] [EETypeRva:0x00041EA8] Interop_Winsock_LPLOOKUPSERVICE_COMPLETION_ROUTINE__System_Net_NameResolution____Interop_Winsock_LPLOOKUPSERVICE_COMPLETION_ROUTINE__System_Net_NameResolution, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "GetAddrInfoExW")]
		public static int GetAddrInfoExW(
					string pName, 
					string pServiceName, 
					int dwNamespace, 
					global::System.IntPtr lpNspId, 
					ref global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution pHints, 
					out global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* ppResult, 
					global::System.IntPtr timeout, 
					ref global::System_Threading.NativeOverlapped__System_Private_CoreLib lpOverlapped, 
					global::Interop_Winsock_LPLOOKUPSERVICE_COMPLETION_ROUTINE__System_Net_NameResolution lpCompletionRoutine, 
					out global::System.IntPtr lpNameHandle)
		{
			// Setup
			ushort* unsafe_pName = default(ushort*);
			ushort* unsafe_pServiceName = default(ushort*);
			void* unsafe_lpCompletionRoutine = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (char* pinned_pName = pName)
				{
					unsafe_pName = (ushort*)pinned_pName;
					fixed (char* pinned_pServiceName = pServiceName)
					{
						unsafe_pServiceName = (ushort*)pinned_pServiceName;
						fixed (global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* pinned_pHints = &(pHints))
							fixed (global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution** pinned_ppResult = &(ppResult))
								fixed (global::System_Threading.NativeOverlapped__System_Private_CoreLib* pinned_lpOverlapped = &(lpOverlapped))
								{
									unsafe_lpCompletionRoutine = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
														global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Interop+Winsock+LPLOOKUPSERVICE_COMPLETION_ROUTINE,System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, " +
																"PublicKeyToken=b03f5f7f11d50a3a"), 
														lpCompletionRoutine
													);
									fixed (global::System.IntPtr* pinned_lpNameHandle = &(lpNameHandle))
									{
										global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
										// Call to native method
										unsafe___value = global::__Interop.ws2_32_dll_PInvokes.GetAddrInfoExW(
															unsafe_pName, 
															unsafe_pServiceName, 
															dwNamespace, 
															lpNspId, 
															pinned_pHints, 
															pinned_ppResult, 
															timeout, 
															pinned_lpOverlapped, 
															unsafe_lpCompletionRoutine, 
															pinned_lpNameHandle
														);
										global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
										global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
									}
								}
					}
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(lpCompletionRoutine);
			}
		}

		// Signature, WSARecv, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_Net_Sockets_WSABuffer__System_Net_Sockets___ptrSystem_Net_Sockets__WSABuffer__System_Net_Sockets *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] System_Threading_NativeOverlapped__System_Private_CoreLib___ptrSystem_Threading__NativeOverlapped__System_Private_CoreLib *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSARecv")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSARecv(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffer, 
					int bufferCount, 
					out int bytesTransferred, 
					ref global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (int* pinned_bytesTransferred = &(bytesTransferred))
				fixed (global::System_Net_Sockets.SocketFlags__System_Net_Sockets* pinned_socketFlags = &(socketFlags))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSARecv(
										socketHandle, 
										((global::System_Net_Sockets.WSABuffer__System_Net_Sockets*)buffer), 
										bufferCount, 
										pinned_bytesTransferred, 
										pinned_socketFlags, 
										((global::System_Threading.NativeOverlapped__System_Private_CoreLib*)overlapped), 
										completionRoutine
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			// Return
			return unsafe___value;
		}

		// Signature, WSASend, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_Net_Sockets_WSABuffer__System_Net_Sockets___ptrSystem_Net_Sockets__WSABuffer__System_Net_Sockets *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] System_Threading_NativeOverlapped__System_Private_CoreLib___ptrSystem_Threading__NativeOverlapped__System_Private_CoreLib *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASend")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSASend(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffers, 
					int bufferCount, 
					out int bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (int* pinned_bytesTransferred = &(bytesTransferred))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASend(
									socketHandle, 
									((global::System_Net_Sockets.WSABuffer__System_Net_Sockets*)buffers), 
									bufferCount, 
									pinned_bytesTransferred, 
									socketFlags, 
									((global::System_Threading.NativeOverlapped__System_Private_CoreLib*)overlapped), 
									completionRoutine
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, GetNameInfoW, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "GetNameInfoW")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives GetNameInfoW(
					byte[] sa, 
					int salen, 
					global::System.Text.StringBuilder host, 
					int hostlen, 
					global::System.Text.StringBuilder serv, 
					int servlen, 
					int flags)
		{
			// Setup
			byte* unsafe_sa;
			ushort* unsafe_host = default(ushort*);
			ushort* unsafe_serv = default(ushort*);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_sa = ((sa != null 
							&& sa.Length == 0) ? new byte[1] : sa))
				{
					unsafe_sa = (byte*)pinned_sa;
					if (host == null)
						unsafe_host = null;
					else
					{
						unsafe_host = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(host.Capacity * 2 
											+ 2)));
						if (unsafe_host == null)
							throw new global::System.OutOfMemoryException();
					}
					if (serv == null)
						unsafe_serv = null;
					else
					{
						unsafe_serv = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(serv.Capacity * 2 
											+ 2)));
						if (unsafe_serv == null)
							throw new global::System.OutOfMemoryException();
					}
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.GetNameInfoW(
										unsafe_sa, 
										salen, 
										unsafe_host, 
										hostlen, 
										unsafe_serv, 
										servlen, 
										flags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (serv != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_serv, 
											serv
										);
					if (host != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_host, 
											host
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_host != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_host);
				if (unsafe_serv != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_serv);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'crypt32.dll'
	/// </summary>
	public unsafe static partial class crypt32_dll
	{
		// Signature, CertDuplicateCertificateContext, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertDuplicateCertificateContext")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates CertDuplicateCertificateContext(global::System.IntPtr pCertContext)
		{
			// Setup
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertDuplicateCertificateContext(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, CertGetCertificateContextProperty, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertContextPropId__System_Security_Cryptography_X509Certificates__CertContextPropId__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetCertificateContextProperty")]
		public static bool CertGetCertificateContextProperty(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					out global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			pCertContext.DangerousAddRef(ref addRefed);
			fixed (global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pinned_pvData = &(pvData))
				fixed (int* pinned_pcbData = &(pcbData))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetCertificateContextProperty(
										pCertContext.DangerousGetHandle(), 
										dwPropId, 
										pinned_pvData, 
										pinned_pcbData
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				pCertContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptQueryObject, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertQueryObjectType__System_Security_Cryptography_X509Certificates__CertQueryObjectType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates__ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates__ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_ContentType__System_Security_Cryptography_X509Certificates__ContentType__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_FormatType__System_Security_Cryptography_X509Certificates__FormatType__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptQueryObject")]
		public static bool CryptQueryObject(
					global::Internal_Cryptography_Pal_Native.CertQueryObjectType__System_Security_Cryptography_X509Certificates dwObjectType, 
					void* pvObject, 
					global::Internal_Cryptography_Pal_Native.ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedContentTypeFlags, 
					global::Internal_Cryptography_Pal_Native.ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedFormatTypeFlags, 
					int dwFlags, 
					out global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates pdwMsgAndCertEncodingType, 
					out global::Internal_Cryptography_Pal_Native.ContentType__System_Security_Cryptography_X509Certificates pdwContentType, 
					out global::Internal_Cryptography_Pal_Native.FormatType__System_Security_Cryptography_X509Certificates pdwFormatType, 
					out global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates phCertStore, 
					out global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates phMsg, 
					out global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates ppvContext)
		{
			// Setup
			global::System.IntPtr unsafe_phCertStore;
			global::System.IntPtr unsafe_phMsg;
			global::System.IntPtr unsafe_ppvContext;
			int unsafe___value;
			// Marshalling
			fixed (global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates* pinned_pdwMsgAndCertEncodingType = &(pdwMsgAndCertEncodingType))
				fixed (global::Internal_Cryptography_Pal_Native.ContentType__System_Security_Cryptography_X509Certificates* pinned_pdwContentType = &(pdwContentType))
					fixed (global::Internal_Cryptography_Pal_Native.FormatType__System_Security_Cryptography_X509Certificates* pinned_pdwFormatType = &(pdwFormatType))
					{
						phCertStore = new global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates();
						unsafe_phCertStore = phCertStore.DangerousGetHandle();
						phMsg = new global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates();
						unsafe_phMsg = phMsg.DangerousGetHandle();
						ppvContext = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
						unsafe_ppvContext = ppvContext.DangerousGetHandle();
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptQueryObject(
											dwObjectType, 
											((void*)pvObject), 
											dwExpectedContentTypeFlags, 
											dwExpectedFormatTypeFlags, 
											dwFlags, 
											pinned_pdwMsgAndCertEncodingType, 
											pinned_pdwContentType, 
											pinned_pdwFormatType, 
											&(unsafe_phCertStore), 
											&(unsafe_phMsg), 
											&(unsafe_ppvContext)
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											ppvContext, 
											unsafe_ppvContext
										);
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											phMsg, 
											unsafe_phMsg
										);
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											phCertStore, 
											unsafe_phCertStore
										);
					}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertDuplicateCertificateContextWithKeyContainerDeletion, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertDuplicateCertificateContextWithKeyContainerDeletion")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates CertDuplicateCertificateContextWithKeyContainerDeletion(global::System.IntPtr pCertContext)
		{
			// Setup
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertDuplicateCertificateContextWithKeyContainerDeletion(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, CertFreeCertificateContext, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFreeCertificateContext")]
		public static bool CertFreeCertificateContext(global::System.IntPtr pCertContext)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertFreeCertificateContext(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptMsgGetParam, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptMessageParameterType__System_Security_Cryptography_X509Certificates__CryptMessageParameterType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptMsgGetParam")]
		public static bool CryptMsgGetParam(
					global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					out int pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hCryptMsg.DangerousAddRef(ref addRefed);
			fixed (int* pinned_pvData = &(pvData))
				fixed (int* pinned_pcbData = &(pcbData))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptMsgGetParam(
										hCryptMsg.DangerousGetHandle(), 
										dwParamType, 
										dwIndex, 
										pinned_pvData, 
										pinned_pcbData
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				hCryptMsg.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptMsgGetParam__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptMessageParameterType__System_Security_Cryptography_X509Certificates__CryptMessageParameterType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptMsgGetParam")]
		public static bool CryptMsgGetParam__0(
					global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					byte* pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hCryptMsg.DangerousAddRef(ref addRefed);
			fixed (int* pinned_pcbData = &(pcbData))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptMsgGetParam__0(
									hCryptMsg.DangerousGetHandle(), 
									dwParamType, 
									dwIndex, 
									((byte*)pvData), 
									pinned_pcbData
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				hCryptMsg.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, PFXImportCertStore, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafePasswordHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_PfxCertStoreFlags__System_Security_Cryptography_X509Certificates__PfxCertStoreFlags__System_Security_Cryptography_X509Certificates, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "PFXImportCertStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates PFXImportCertStore(
					ref global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates pPFX, 
					global::Microsoft.Win32.SafeHandles.SafePasswordHandle__System_Security_Cryptography_X509Certificates password, 
					global::Internal_Cryptography_Pal_Native.PfxCertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pinned_pPFX = &(pPFX))
			{
				password.DangerousAddRef(ref addRefed);
				__value = new global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.PFXImportCertStore(
									pinned_pPFX, 
									password.DangerousGetHandle(), 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
				if (addRefed)
					password.DangerousRelease();
			}
			// Return
			return __value;
		}

		// Signature, CryptFindOIDInfo, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding__Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_OidGroup__System_Security_Cryptography_Encoding__OidGroup__System_Security_Cryptography_Encoding, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Encoding, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CryptFindOIDInfo")]
		public static global::System.IntPtr CryptFindOIDInfo(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFindOIDInfo(
								dwKeyType, 
								pvKey, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, CertGetCertificateContextProperty__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertContextPropId__System_Security_Cryptography_X509Certificates__CertContextPropId__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetCertificateContextProperty")]
		public static bool CertGetCertificateContextProperty__0(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					byte[] pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pvData;
			int unsafe___value;
			// Marshalling
			pCertContext.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pvData = ((pvData != null 
						&& pvData.Length == 0) ? new byte[1] : pvData))
			{
				unsafe_pvData = (byte*)pinned_pvData;
				fixed (int* pinned_pcbData = &(pcbData))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetCertificateContextProperty__0(
										pCertContext.DangerousGetHandle(), 
										dwPropId, 
										unsafe_pvData, 
										pinned_pcbData
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				pCertContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertCloseStore, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertCloseStore")]
		public static bool CertCloseStore(
					global::System.IntPtr hCertStore, 
					int dwFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertCloseStore(
								hCertStore, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptMsgClose, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptMsgClose")]
		public static bool CryptMsgClose(global::System.IntPtr hCryptMsg)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptMsgClose(hCryptMsg);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertFindCertificateInStore, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertFindFlags__System_Security_Cryptography_X509Certificates__CertFindFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertFindType__System_Security_Cryptography_X509Certificates__CertFindType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_CONTEXT__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_CONTEXT__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFindCertificateInStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates CertFindCertificateInStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CertFindFlags__System_Security_Cryptography_X509Certificates dwFindFlags, 
					global::Internal_Cryptography_Pal_Native.CertFindType__System_Security_Cryptography_X509Certificates dwFindType, 
					void* pvFindPara, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext)
		{
			// Setup
			bool addRefed = false;
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertFindCertificateInStore(
								hCertStore.DangerousGetHandle(), 
								dwCertEncodingType, 
								dwFindFlags, 
								dwFindType, 
								((void*)pvFindPara), 
								((global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates*)pPrevCertContext)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return __value;
		}

		// Signature, CertEnumCertificatesInStore, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_CONTEXT__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_CONTEXT__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertEnumCertificatesInStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates CertEnumCertificatesInStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext)
		{
			// Setup
			bool addRefed = false;
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertEnumCertificatesInStore(
								hCertStore.DangerousGetHandle(), 
								((global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates*)pPrevCertContext)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return __value;
		}

		// Signature, CertGetNameString, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameType__System_Security_Cryptography_X509Certificates__CertNameType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameFlags__System_Security_Cryptography_X509Certificates__CertNameFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates__CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetNameString")]
		public static int CertGetNameString(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					ref global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates pvPara, 
					global::System.Text.StringBuilder pszNameString, 
					int cchNameString)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszNameString = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				pCertContext.DangerousAddRef(ref addRefed);
				fixed (global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates* pinned_pvPara = &(pvPara))
				{
					if (pszNameString == null)
						unsafe_pszNameString = null;
					else
					{
						unsafe_pszNameString = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pszNameString.Capacity * 2 
											+ 2)));
						if (unsafe_pszNameString == null)
							throw new global::System.OutOfMemoryException();
					}
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetNameString(
										pCertContext.DangerousGetHandle(), 
										dwType, 
										dwFlags, 
										pinned_pvPara, 
										unsafe_pszNameString, 
										cchNameString
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (pszNameString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pszNameString, 
											pszNameString
										);
				}
				if (addRefed)
					pCertContext.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_pszNameString != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pszNameString);
			}
		}

		// Signature, CertGetNameString__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameType__System_Security_Cryptography_X509Certificates__CertNameType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameFlags__System_Security_Cryptography_X509Certificates__CertNameFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameStringType__System_Security_Cryptography_X509Certificates__CertNameStringType__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetNameString")]
		public static int CertGetNameString__0(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					ref global::Internal_Cryptography_Pal_Native.CertNameStringType__System_Security_Cryptography_X509Certificates pvTypePara, 
					global::System.Text.StringBuilder pszNameString, 
					int cchNameString)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszNameString = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				pCertContext.DangerousAddRef(ref addRefed);
				fixed (global::Internal_Cryptography_Pal_Native.CertNameStringType__System_Security_Cryptography_X509Certificates* pinned_pvTypePara = &(pvTypePara))
				{
					if (pszNameString == null)
						unsafe_pszNameString = null;
					else
					{
						unsafe_pszNameString = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pszNameString.Capacity * 2 
											+ 2)));
						if (unsafe_pszNameString == null)
							throw new global::System.OutOfMemoryException();
					}
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetNameString__0(
										pCertContext.DangerousGetHandle(), 
										dwType, 
										dwFlags, 
										pinned_pvTypePara, 
										unsafe_pszNameString, 
										cchNameString
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (pszNameString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pszNameString, 
											pszNameString
										);
				}
				if (addRefed)
					pCertContext.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_pszNameString != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pszNameString);
			}
		}

		// Signature, CryptFindOIDInfo__0, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates__Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_OidGroup__System_Security_Cryptography_Encoding__OidGroup__System_Security_Cryptography_Encoding, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+Crypt32", "CryptFindOIDInfo")]
		public static global::System.IntPtr CryptFindOIDInfo__0(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFindOIDInfo__0(
								dwKeyType, 
								pvKey, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, CertGetCertificateChain, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_FILETIME__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__FILETIME__System_Security_Cryptography_X509Certificates *, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertChainFlags__System_Security_Cryptography_X509Certificates__CertChainFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeX509ChainHandle__System_Security_Cryptography_X509Certificates____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetCertificateChain")]
		public static bool CertGetCertificateChain(
					global::System.IntPtr hChainEngine, 
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pTime, 
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hStore, 
					ref global::Internal_Cryptography_Pal_Native.CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates pChainPara, 
					global::Internal_Cryptography_Pal_Native.CertChainFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::System.IntPtr pvReserved, 
					out global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates ppChainContext)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_ppChainContext;
			int unsafe___value;
			// Marshalling
			pCertContext.DangerousAddRef(ref addRefed);
			hStore.DangerousAddRef(ref addRefed_1);
			fixed (global::Internal_Cryptography_Pal_Native.CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates* pinned_pChainPara = &(pChainPara))
			{
				ppChainContext = new global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates();
				unsafe_ppChainContext = ppChainContext.DangerousGetHandle();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetCertificateChain(
									hChainEngine, 
									pCertContext.DangerousGetHandle(), 
									((global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates*)pTime), 
									hStore.DangerousGetHandle(), 
									pinned_pChainPara, 
									dwFlags, 
									pvReserved, 
									&(unsafe_ppChainContext)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									ppChainContext, 
									unsafe_ppChainContext
								);
			}
			if (addRefed_1)
				hStore.DangerousRelease();
			if (addRefed)
				pCertContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertVerifyCertificateChainPolicy, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeX509ChainHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertVerifyCertificateChainPolicy")]
		public static bool CertVerifyCertificateChainPolicy(
					global::System.IntPtr pszPolicyOID, 
					global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates pChainContext, 
					ref global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates pPolicyPara, 
					ref global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates pPolicyStatus)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			pChainContext.DangerousAddRef(ref addRefed);
			fixed (global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates* pinned_pPolicyPara = &(pPolicyPara))
				fixed (global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates* pinned_pPolicyStatus = &(pPolicyStatus))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertVerifyCertificateChainPolicy(
										pszPolicyOID, 
										pChainContext.DangerousGetHandle(), 
										pinned_pPolicyPara, 
										pinned_pPolicyStatus
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				pChainContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertNameToStr, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates__CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertNameToStr")]
		public static int CertNameToStr(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					ref global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates pName, 
					global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates dwStrType, 
					global::System.Text.StringBuilder psz, 
					int csz)
		{
			// Setup
			ushort* unsafe_psz = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pinned_pName = &(pName))
				{
					if (psz == null)
						unsafe_psz = null;
					else
					{
						unsafe_psz = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(psz.Capacity * 2 
											+ 2)));
						if (unsafe_psz == null)
							throw new global::System.OutOfMemoryException();
					}
					if (unsafe_psz != null)
						global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
											psz, 
											unsafe_psz
										);
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertNameToStr(
										dwCertEncodingType, 
										pinned_pName, 
										dwStrType, 
										unsafe_psz, 
										csz
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (psz != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_psz, 
											psz
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_psz != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_psz);
			}
		}

		// Signature, CryptFormatObject, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Encoding, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.Cng+Interop", "CryptFormatObject")]
		public static bool CryptFormatObject(
					int dwCertEncodingType, 
					int dwFormatType, 
					int dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					string lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::System.Text.StringBuilder pbFormat, 
					ref int pcbFormat)
		{
			// Setup
			byte* unsafe_lpszStructType = default(byte*);
			byte* unsafe_pbEncoded;
			ushort* unsafe_pbFormat = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpszStructType = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(lpszStructType, false, false);
				fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
							&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
				{
					unsafe_pbEncoded = (byte*)pinned_pbEncoded;
					if (pbFormat == null)
						unsafe_pbFormat = null;
					else
					{
						unsafe_pbFormat = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pbFormat.Capacity * 2 
											+ 2)));
						if (unsafe_pbFormat == null)
							throw new global::System.OutOfMemoryException();
					}
					fixed (int* pinned_pcbFormat = &(pcbFormat))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFormatObject(
											dwCertEncodingType, 
											dwFormatType, 
											dwFormatStrType, 
											pFormatStruct, 
											unsafe_lpszStructType, 
											unsafe_pbEncoded, 
											cbEncoded, 
											unsafe_pbFormat, 
											pinned_pcbFormat
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
					if (pbFormat != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pbFormat, 
											pbFormat
										);
				}
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpszStructType);
				if (unsafe_pbFormat != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pbFormat);
			}
		}

		// Signature, CertControlStore, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertControlStoreFlags__System_Security_Cryptography_X509Certificates__CertControlStoreFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertControlStoreType__System_Security_Cryptography_X509Certificates__CertControlStoreType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertControlStore")]
		public static bool CertControlStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreType__System_Security_Cryptography_X509Certificates dwControlType, 
					global::System.IntPtr pvCtrlPara)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertControlStore(
								hCertStore.DangerousGetHandle(), 
								dwFlags, 
								dwControlType, 
								pvCtrlPara
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertAddCertificateLinkToStore, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertStoreAddDisposition__System_Security_Cryptography_X509Certificates__CertStoreAddDisposition__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertAddCertificateLinkToStore")]
		public static bool CertAddCertificateLinkToStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertStoreAddDisposition__System_Security_Cryptography_X509Certificates dwAddDisposition, 
					global::System.IntPtr ppStoreContext)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			int unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			pCertContext.DangerousAddRef(ref addRefed_1);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertAddCertificateLinkToStore(
								hCertStore.DangerousGetHandle(), 
								pCertContext.DangerousGetHandle(), 
								dwAddDisposition, 
								ppStoreContext
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed_1)
				pCertContext.DangerousRelease();
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptFormatObject__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_FormatObjectType__System_Security_Cryptography_X509Certificates__FormatObjectType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_FormatObjectStringType__System_Security_Cryptography_X509Certificates__FormatObjectStringType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptFormatObject")]
		public static bool CryptFormatObject__0(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectType__System_Security_Cryptography_X509Certificates dwFormatType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectStringType__System_Security_Cryptography_X509Certificates dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					global::System.IntPtr lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::System.Text.StringBuilder pbFormat, 
					ref int pcbFormat)
		{
			// Setup
			byte* unsafe_pbEncoded;
			ushort* unsafe_pbFormat = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
							&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
				{
					unsafe_pbEncoded = (byte*)pinned_pbEncoded;
					if (pbFormat == null)
						unsafe_pbFormat = null;
					else
					{
						unsafe_pbFormat = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pbFormat.Capacity * 2 
											+ 2)));
						if (unsafe_pbFormat == null)
							throw new global::System.OutOfMemoryException();
					}
					fixed (int* pinned_pcbFormat = &(pcbFormat))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFormatObject__0(
											dwCertEncodingType, 
											dwFormatType, 
											dwFormatStrType, 
											pFormatStruct, 
											lpszStructType, 
											unsafe_pbEncoded, 
											cbEncoded, 
											unsafe_pbFormat, 
											pinned_pcbFormat
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
					if (pbFormat != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pbFormat, 
											pbFormat
										);
				}
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				if (unsafe_pbFormat != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pbFormat);
			}
		}

		// Signature, CertOpenStore, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertStoreFlags__System_Security_Cryptography_X509Certificates__CertStoreFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertOpenStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates CertOpenStore(
					global::System.IntPtr lpszStoreProvider, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwMsgAndCertEncodingType, 
					global::System.IntPtr hCryptProv, 
					global::Internal_Cryptography_Pal_Native.CertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					string pvPara)
		{
			// Setup
			ushort* unsafe_pvPara = default(ushort*);
			global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_pvPara = pvPara)
			{
				unsafe_pvPara = (ushort*)pinned_pvPara;
				__value = new global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertOpenStore(
									lpszStoreProvider, 
									dwMsgAndCertEncodingType, 
									hCryptProv, 
									dwFlags, 
									unsafe_pvPara
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
			}
			// Return
			return __value;
		}

		// Signature, CryptImportPublicKeyInfoEx2, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptImportPublicKeyInfoEx2")]
		public static bool CryptImportPublicKeyInfoEx2(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates* pInfo, 
					int dwFlags, 
					void* pvAuxInfo, 
					out global::Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates phKey)
		{
			// Setup
			global::System.IntPtr unsafe_phKey;
			int unsafe___value;
			// Marshalling
			phKey = new global::Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates();
			unsafe_phKey = phKey.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptImportPublicKeyInfoEx2(
								dwCertEncodingType, 
								((global::Internal_Cryptography_Pal_Native.CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates*)pInfo), 
								dwFlags, 
								((void*)pvAuxInfo), 
								&(unsafe_phKey)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phKey, 
								unsafe_phKey
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptDecodeObject, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates__CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptDecodeObject")]
		public static bool CryptDecodeObject(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					byte[] pvStructInfo, 
					ref int pcbStructInfo)
		{
			// Setup
			byte* unsafe_pbEncoded;
			byte* unsafe_pvStructInfo;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
						&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
			{
				unsafe_pbEncoded = (byte*)pinned_pbEncoded;
				fixed (byte* pinned_pvStructInfo = ((pvStructInfo != null 
							&& pvStructInfo.Length == 0) ? new byte[1] : pvStructInfo))
				{
					unsafe_pvStructInfo = (byte*)pinned_pvStructInfo;
					fixed (int* pinned_pcbStructInfo = &(pcbStructInfo))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptDecodeObject(
											dwCertEncodingType, 
											lpszStructType, 
											unsafe_pbEncoded, 
											cbEncoded, 
											dwFlags, 
											unsafe_pvStructInfo, 
											pinned_pcbStructInfo
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertFreeCertificateChain, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFreeCertificateChain")]
		public static void CertFreeCertificateChain(global::System.IntPtr pChainContext)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.crypt32_dll_PInvokes.CertFreeCertificateChain(pChainContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, CertFindExtension, [fwd] [return] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_EXTENSION__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_EXTENSION__System_Security_Cryptography_X509Certificates *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_EXTENSION__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_EXTENSION__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFindExtension")]
		public static global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* CertFindExtension(
					string pszObjId, 
					int cExtensions, 
					global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* rgExtensions)
		{
			// Setup
			byte* unsafe_pszObjId = default(byte*);
			global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* unsafe___value;
			try
			{
				// Marshalling
				unsafe_pszObjId = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(pszObjId, true, false);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = (global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates*)global::__Interop.crypt32_dll_PInvokes.CertFindExtension(
									unsafe_pszObjId, 
									cExtensions, 
									((global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates*)rgExtensions)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
				return (global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates*)unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pszObjId);
			}
		}

		// Signature, CertGetValidUsages, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetValidUsages")]
		public static bool CertGetValidUsages(
					int cCerts, 
					ref global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates rghCerts, 
					out int cNumOIDs, 
					void* rghOIDs, 
					ref int pcbOIDs)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_rghCerts;
			int unsafe___value;
			// Marshalling
			rghCerts.DangerousAddRef(ref addRefed);
			unsafe_rghCerts = rghCerts.DangerousGetHandle();
			fixed (int* pinned_cNumOIDs = &(cNumOIDs))
				fixed (int* pinned_pcbOIDs = &(pcbOIDs))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetValidUsages(
										cCerts, 
										&(unsafe_rghCerts), 
										pinned_cNumOIDs, 
										((void*)rghOIDs), 
										pinned_pcbOIDs
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				rghCerts.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertGetIntendedKeyUsage, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_INFO__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_INFO__System_Security_Cryptography_X509Certificates *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] System_Security_Cryptography_X509Certificates_X509KeyUsageFlags__System_Security_Cryptography_X509Certificates__X509KeyUsageFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetIntendedKeyUsage")]
		public static bool CertGetIntendedKeyUsage(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo, 
					out global::System_Security_Cryptography_X509Certificates.X509KeyUsageFlags__System_Security_Cryptography_X509Certificates pbKeyUsage, 
					int cbKeyUsage)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System_Security_Cryptography_X509Certificates.X509KeyUsageFlags__System_Security_Cryptography_X509Certificates* pinned_pbKeyUsage = &(pbKeyUsage))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetIntendedKeyUsage(
									dwCertEncodingType, 
									((global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates*)pCertInfo), 
									pinned_pbKeyUsage, 
									cbKeyUsage
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptDecodeObjectPointer, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates__CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptDecodeObjectPointer")]
		public static bool CryptDecodeObjectPointer(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					void* pvStructInfo, 
					ref int pcbStructInfo)
		{
			// Setup
			byte* unsafe_pbEncoded;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
						&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
			{
				unsafe_pbEncoded = (byte*)pinned_pbEncoded;
				fixed (int* pinned_pcbStructInfo = &(pcbStructInfo))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptDecodeObjectPointer(
										dwCertEncodingType, 
										lpszStructType, 
										unsafe_pbEncoded, 
										cbEncoded, 
										dwFlags, 
										((void*)pvStructInfo), 
										pinned_pcbStructInfo
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertVerifyTimeValidity, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_FILETIME__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__FILETIME__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_INFO__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_INFO__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertVerifyTimeValidity")]
		public static int CertVerifyTimeValidity(
					ref global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates pTimeToVerify, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pinned_pTimeToVerify = &(pTimeToVerify))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertVerifyTimeValidity(
									pinned_pTimeToVerify, 
									((global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates*)pCertInfo)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, CryptFindOIDInfo__1, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng__Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_OidGroup__System_Security_Cryptography_Encoding__OidGroup__System_Security_Cryptography_Encoding, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CryptFindOIDInfo")]
		public static global::System.IntPtr CryptFindOIDInfo__1(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFindOIDInfo__1(
								dwKeyType, 
								pvKey, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, CertVerifyCertificateChainPolicy__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeX509ChainHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security____Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security____Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CertVerifyCertificateChainPolicy")]
		public static bool CertVerifyCertificateChainPolicy__0(
					global::System.IntPtr pszPolicyOID, 
					global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates pChainContext, 
					ref global::_.Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security pPolicyPara, 
					ref global::_.Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security pPolicyStatus)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			pChainContext.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security* pinned_pPolicyPara = &(pPolicyPara))
				fixed (global::_.Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security* pinned_pPolicyStatus = &(pPolicyStatus))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertVerifyCertificateChainPolicy__0(
										pszPolicyOID, 
										pChainContext.DangerousGetHandle(), 
										pinned_pPolicyPara, 
										pinned_pPolicyStatus
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				pChainContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertEnumCertificatesInStore__0, [fwd] [return] [EETypeRva:0x000419B0] __Interop_Crypt32_CERT_CONTEXT__System_Net_Security___ptr__Interop_Crypt32_CERT_CONTEXT__System_Net_Security *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] __Interop_Crypt32_CERT_CONTEXT__System_Net_Security___ptr__Interop_Crypt32_CERT_CONTEXT__System_Net_Security *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CertEnumCertificatesInStore")]
		public static global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* CertEnumCertificatesInStore__0(
					global::System.IntPtr hCertStore, 
					global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* pPrevCertContext)
		{
			// Setup
			global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = (global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security*)global::__Interop.crypt32_dll_PInvokes.CertEnumCertificatesInStore__0(
								hCertStore, 
								((global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security*)pPrevCertContext)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return (global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security*)unsafe___value;
		}

		// Signature, CertFreeCertificateContext__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CertFreeCertificateContext")]
		public static bool CertFreeCertificateContext__0(global::System.IntPtr pCertContext)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertFreeCertificateContext__0(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'advapi32.dll'
	/// </summary>
	public unsafe static partial class advapi32_dll
	{
		// Signature, LookupPrivilegeValue, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Advapi32_LUID__System_Diagnostics_Process____Interop_Advapi32_LUID__System_Diagnostics_Process, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LookupPrivilegeValue")]
		public static bool LookupPrivilegeValue(
					string lpSystemName, 
					string lpName, 
					out global::_.Interop_Advapi32_LUID__System_Diagnostics_Process lpLuid)
		{
			// Setup
			ushort* unsafe_lpSystemName = default(ushort*);
			ushort* unsafe_lpName = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_lpSystemName = lpSystemName)
			{
				unsafe_lpSystemName = (ushort*)pinned_lpSystemName;
				fixed (char* pinned_lpName = lpName)
				{
					unsafe_lpName = (ushort*)pinned_lpName;
					fixed (global::_.Interop_Advapi32_LUID__System_Diagnostics_Process* pinned_lpLuid = &(lpLuid))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.advapi32_dll_PInvokes.LookupPrivilegeValue(
											unsafe_lpSystemName, 
											unsafe_lpName, 
											pinned_lpLuid
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenProcessToken, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeProcessHandle__System_Diagnostics_Process____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeTokenHandle__System_Diagnostics_Process____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "OpenProcessToken")]
		public static bool OpenProcessToken(
					global::Microsoft.Win32.SafeHandles.SafeProcessHandle__System_Diagnostics_Process ProcessHandle, 
					int DesiredAccess, 
					out global::Microsoft.Win32.SafeHandles.SafeTokenHandle__System_Diagnostics_Process TokenHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_TokenHandle;
			int unsafe___value;
			// Marshalling
			ProcessHandle.DangerousAddRef(ref addRefed);
			TokenHandle = new global::Microsoft.Win32.SafeHandles.SafeTokenHandle__System_Diagnostics_Process();
			unsafe_TokenHandle = TokenHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.OpenProcessToken(
								ProcessHandle.DangerousGetHandle(), 
								DesiredAccess, 
								&(unsafe_TokenHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								TokenHandle, 
								unsafe_TokenHandle
							);
			if (addRefed)
				ProcessHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, AdjustTokenPrivileges, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeTokenHandle__System_Diagnostics_Process____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00043084] __Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process____Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.Process, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "AdjustTokenPrivileges")]
		public static bool AdjustTokenPrivileges(
					global::Microsoft.Win32.SafeHandles.SafeTokenHandle__System_Diagnostics_Process TokenHandle, 
					bool DisableAllPrivileges, 
					global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process NewState, 
					int BufferLength, 
					global::System.IntPtr PreviousState, 
					global::System.IntPtr ReturnLength)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process__Impl.UnsafeType* unsafe_NewState = default(global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process__Impl.UnsafeType*);
			int unsafe___value;
			try
			{
				// Marshalling
				TokenHandle.DangerousAddRef(ref addRefed);
				unsafe_NewState = (global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(sizeof(global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process__Impl.UnsafeType)));
				global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process__Impl.Marshal__SafeToUnsafe(
									NewState, 
									out (*(unsafe_NewState))
								);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.AdjustTokenPrivileges(
									TokenHandle.DangerousGetHandle(), 
									(DisableAllPrivileges ? 1 : 0), 
									unsafe_NewState, 
									BufferLength, 
									PreviousState, 
									ReturnLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed)
					TokenHandle.DangerousRelease();
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_NewState);
			}
		}

		// Signature, CryptAcquireContext, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates__CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+cryptoapi", "CryptAcquireContext")]
		public static bool CryptAcquireContext(
					out global::System.IntPtr psafeProvHandle, 
					char* pszContainer, 
					char* pszProvider, 
					int dwProvType, 
					global::Internal_Cryptography_Pal_Native.CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates dwFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_psafeProvHandle = &(psafeProvHandle))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptAcquireContext(
									pinned_psafeProvHandle, 
									((ushort*)pszContainer), 
									((ushort*)pszProvider), 
									dwProvType, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptGetKeyParam, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptGetKeyParam")]
		public static bool CryptGetKeyParam(
					global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp safeKeyHandle, 
					int dwParam, 
					byte[] pbData, 
					ref int pdwDataLen, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbData;
			int unsafe___value;
			// Marshalling
			safeKeyHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbData = ((pbData != null 
						&& pbData.Length == 0) ? new byte[1] : pbData))
			{
				unsafe_pbData = (byte*)pinned_pbData;
				fixed (int* pinned_pdwDataLen = &(pdwDataLen))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptGetKeyParam(
										safeKeyHandle.DangerousGetHandle(), 
										dwParam, 
										unsafe_pbData, 
										pinned_pdwDataLen, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				safeKeyHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptGetDefaultProvider, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptGetDefaultProvider")]
		public static bool CryptGetDefaultProvider(
					int dwProvType, 
					global::System.IntPtr pdwReserved, 
					int dwFlags, 
					global::System.Text.StringBuilder pszProvName, 
					ref int IntPtrProvName)
		{
			// Setup
			ushort* unsafe_pszProvName = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (pszProvName == null)
					unsafe_pszProvName = null;
				else
				{
					unsafe_pszProvName = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pszProvName.Capacity * 2 
										+ 2)));
					if (unsafe_pszProvName == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_pszProvName != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
										pszProvName, 
										unsafe_pszProvName
									);
				fixed (int* pinned_IntPtrProvName = &(IntPtrProvName))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptGetDefaultProvider(
										dwProvType, 
										pdwReserved, 
										dwFlags, 
										unsafe_pszProvName, 
										pinned_IntPtrProvName
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (pszProvName != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_pszProvName, 
										pszProvName
									);
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				if (unsafe_pszProvName != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pszProvName);
			}
		}

		// Signature, CryptAcquireContext__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptAcquireContext")]
		public static bool CryptAcquireContext__0(
					out global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp psafeProvHandle, 
					string pszContainer, 
					string pszProvider, 
					int dwProvType, 
					uint dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_psafeProvHandle;
			ushort* unsafe_pszContainer = default(ushort*);
			ushort* unsafe_pszProvider = default(ushort*);
			int unsafe___value;
			// Marshalling
			psafeProvHandle = new global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp();
			unsafe_psafeProvHandle = psafeProvHandle.DangerousGetHandle();
			fixed (char* pinned_pszContainer = pszContainer)
			{
				unsafe_pszContainer = (ushort*)pinned_pszContainer;
				fixed (char* pinned_pszProvider = pszProvider)
				{
					unsafe_pszProvider = (ushort*)pinned_pszProvider;
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptAcquireContext__0(
										&(unsafe_psafeProvHandle), 
										unsafe_pszContainer, 
										unsafe_pszProvider, 
										dwProvType, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								psafeProvHandle, 
								unsafe_psafeProvHandle
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, _CryptGetUserKey, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "_CryptGetUserKey")]
		public static bool _CryptGetUserKey(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					int dwKeySpec, 
					out global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp safeKeyHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_safeKeyHandle;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			safeKeyHandle = new global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp();
			unsafe_safeKeyHandle = safeKeyHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes._CryptGetUserKey(
								safeProvHandle.DangerousGetHandle(), 
								dwKeySpec, 
								&(unsafe_safeKeyHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								safeKeyHandle, 
								unsafe_safeKeyHandle
							);
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptGetProvParam, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp__Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "CryptGetProvParam")]
		public static bool CryptGetProvParam(
					global::System.Runtime.InteropServices.SafeHandle safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					ref int dwDataLen, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_dwDataLen = &(dwDataLen))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptGetProvParam(
									safeProvHandle.DangerousGetHandle(), 
									dwParam, 
									pbData, 
									pinned_dwDataLen, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptDestroyKey, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptDestroyKey")]
		public static bool CryptDestroyKey(global::System.IntPtr hKey)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptDestroyKey(hKey);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptReleaseContext, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptReleaseContext")]
		public static bool CryptReleaseContext(
					global::System.IntPtr safeProvHandle, 
					int dwFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptReleaseContext(
								safeProvHandle, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, _CryptImportKey, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "_CryptImportKey")]
		public static bool _CryptImportKey(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp hProv, 
					byte[] pbData, 
					int dwDataLen, 
					global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp hPubKey, 
					int dwFlags, 
					out global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp phKey)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbData;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_phKey;
			int unsafe___value;
			// Marshalling
			hProv.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbData = ((pbData != null 
						&& pbData.Length == 0) ? new byte[1] : pbData))
			{
				unsafe_pbData = (byte*)pinned_pbData;
				hPubKey.DangerousAddRef(ref addRefed_1);
				phKey = new global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp();
				unsafe_phKey = phKey.DangerousGetHandle();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes._CryptImportKey(
									hProv.DangerousGetHandle(), 
									unsafe_pbData, 
									dwDataLen, 
									hPubKey.DangerousGetHandle(), 
									dwFlags, 
									&(unsafe_phKey)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									phKey, 
									unsafe_phKey
								);
				if (addRefed_1)
					hPubKey.DangerousRelease();
			}
			if (addRefed)
				hProv.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptSetProvParamIndirectPtr, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp__Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptSetProvParamIndirectPtr")]
		public static bool CryptSetProvParamIndirectPtr(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					ref global::System.IntPtr pbData, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_pbData = &(pbData))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptSetProvParamIndirectPtr(
									safeProvHandle.DangerousGetHandle(), 
									dwParam, 
									pinned_pbData, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptSetProvParam, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp__Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "CryptSetProvParam")]
		public static bool CryptSetProvParam(
					global::System.Runtime.InteropServices.SafeHandle safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptSetProvParam(
								safeProvHandle.DangerousGetHandle(), 
								dwParam, 
								pbData, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, _CryptGenKey, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "_CryptGenKey")]
		public static bool _CryptGenKey(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					int Algid, 
					int dwFlags, 
					out global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp safeKeyHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_safeKeyHandle;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			safeKeyHandle = new global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp();
			unsafe_safeKeyHandle = safeKeyHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes._CryptGenKey(
								safeProvHandle.DangerousGetHandle(), 
								Algid, 
								dwFlags, 
								&(unsafe_safeKeyHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								safeKeyHandle, 
								unsafe_safeKeyHandle
							);
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, RevertToSelf, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "RevertToSelf")]
		public static bool RevertToSelf()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.RevertToSelf();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, ImpersonateLoggedOnUser, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "ImpersonateLoggedOnUser")]
		public static bool ImpersonateLoggedOnUser(global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows userToken)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			userToken.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.ImpersonateLoggedOnUser(userToken.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				userToken.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenThreadToken, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Principal_TokenAccessLevels__System_Security_Principal_Windows__TokenAccessLevels__System_Security_Principal_Windows, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "OpenThreadToken")]
		public static bool OpenThreadToken(
					global::System.IntPtr ThreadHandle, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows dwDesiredAccess, 
					bool bOpenAsSelf, 
					out global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows phThreadToken)
		{
			// Setup
			global::System.IntPtr unsafe_phThreadToken;
			int unsafe___value;
			// Marshalling
			phThreadToken = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			unsafe_phThreadToken = phThreadToken.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.OpenThreadToken(
								ThreadHandle, 
								dwDesiredAccess, 
								(bOpenAsSelf ? 1 : 0), 
								&(unsafe_phThreadToken)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phThreadToken, 
								unsafe_phThreadToken
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenProcessToken__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Principal_TokenAccessLevels__System_Security_Principal_Windows__TokenAccessLevels__System_Security_Principal_Windows, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "OpenProcessToken")]
		public static bool OpenProcessToken__0(
					global::System.IntPtr ProcessToken, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows DesiredAccess, 
					out global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows TokenHandle)
		{
			// Setup
			global::System.IntPtr unsafe_TokenHandle;
			int unsafe___value;
			// Marshalling
			TokenHandle = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			unsafe_TokenHandle = TokenHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.OpenProcessToken__0(
								ProcessToken, 
								DesiredAccess, 
								&(unsafe_TokenHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								TokenHandle, 
								unsafe_TokenHandle
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetTokenInformation, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "GetTokenInformation")]
		public static bool GetTokenInformation(
					global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows TokenHandle, 
					uint TokenInformationClass, 
					global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows TokenInformation, 
					uint TokenInformationLength, 
					out uint ReturnLength)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			int unsafe___value;
			// Marshalling
			TokenHandle.DangerousAddRef(ref addRefed);
			TokenInformation.DangerousAddRef(ref addRefed_1);
			fixed (uint* pinned_ReturnLength = &(ReturnLength))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.GetTokenInformation(
									TokenHandle.DangerousGetHandle(), 
									TokenInformationClass, 
									TokenInformation.DangerousGetHandle(), 
									TokenInformationLength, 
									pinned_ReturnLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed_1)
				TokenInformation.DangerousRelease();
			if (addRefed)
				TokenHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, LsaNtStatusToWinError, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaNtStatusToWinError")]
		public static uint LsaNtStatusToWinError(uint status)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaNtStatusToWinError(status);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DuplicateTokenEx, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "DuplicateTokenEx")]
		public static bool DuplicateTokenEx(
					global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows hExistingToken, 
					uint dwDesiredAccess, 
					global::System.IntPtr lpTokenAttributes, 
					uint ImpersonationLevel, 
					uint TokenType, 
					ref global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows phNewToken)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_phNewToken;
			global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows out_phNewToken;
			global::System.IntPtr prev_unsafe_phNewToken;
			int unsafe___value;
			// Marshalling
			hExistingToken.DangerousAddRef(ref addRefed);
			phNewToken.DangerousAddRef(ref addRefed_1);
			unsafe_phNewToken = phNewToken.DangerousGetHandle();
			prev_unsafe_phNewToken = unsafe_phNewToken;
			out_phNewToken = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.DuplicateTokenEx(
								hExistingToken.DangerousGetHandle(), 
								dwDesiredAccess, 
								lpTokenAttributes, 
								ImpersonationLevel, 
								TokenType, 
								&(unsafe_phNewToken)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed_1)
				phNewToken.DangerousRelease();
			if (prev_unsafe_phNewToken != unsafe_phNewToken)
			{
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									out_phNewToken, 
									unsafe_phNewToken
								);
				phNewToken = out_phNewToken;
			}
			if (addRefed)
				hExistingToken.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetTokenInformation__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "GetTokenInformation")]
		public static bool GetTokenInformation__0(
					global::System.IntPtr TokenHandle, 
					uint TokenInformationClass, 
					global::System.IntPtr TokenInformation, 
					uint TokenInformationLength, 
					out uint ReturnLength)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (uint* pinned_ReturnLength = &(ReturnLength))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.GetTokenInformation__0(
									TokenHandle, 
									TokenInformationClass, 
									TokenInformation, 
									TokenInformationLength, 
									pinned_ReturnLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, LsaLookupSids, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaPolicyHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaLookupSids")]
		public static uint LsaLookupSids(
					global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows handle, 
					int count, 
					global::System.IntPtr[] sids, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows referencedDomains, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows names)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr* unsafe_sids;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_referencedDomains;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_referencedDomains;
			global::System.IntPtr prev_unsafe_referencedDomains;
			bool addRefed_2 = false;
			global::System.IntPtr unsafe_names;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_names;
			global::System.IntPtr prev_unsafe_names;
			uint unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_sids = ((sids != null 
						&& sids.Length == 0) ? new global::System.IntPtr[1] : sids))
			{
				unsafe_sids = (global::System.IntPtr*)pinned_sids;
				referencedDomains.DangerousAddRef(ref addRefed_1);
				unsafe_referencedDomains = referencedDomains.DangerousGetHandle();
				prev_unsafe_referencedDomains = unsafe_referencedDomains;
				out_referencedDomains = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				names.DangerousAddRef(ref addRefed_2);
				unsafe_names = names.DangerousGetHandle();
				prev_unsafe_names = unsafe_names;
				out_names = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaLookupSids(
									handle.DangerousGetHandle(), 
									count, 
									unsafe_sids, 
									&(unsafe_referencedDomains), 
									&(unsafe_names)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed_2)
					names.DangerousRelease();
				if (prev_unsafe_names != unsafe_names)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_names, 
										unsafe_names
									);
					names = out_names;
				}
				if (addRefed_1)
					referencedDomains.DangerousRelease();
				if (prev_unsafe_referencedDomains != unsafe_referencedDomains)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_referencedDomains, 
										unsafe_referencedDomains
									);
					referencedDomains = out_referencedDomains;
				}
			}
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, LsaLookupNames2, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaPolicyHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000424E8] rg___Interop_UNICODE_STRING__System_Security_Principal_Windows____Interop_UNICODE_STRING__System_Security_Principal_Windows *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaLookupNames2")]
		public static uint LsaLookupNames2(
					global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows handle, 
					int flags, 
					int count, 
					global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows[] names, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows referencedDomains, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows sids)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType* unsafe_names = default(global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType*);
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_referencedDomains;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_referencedDomains;
			global::System.IntPtr prev_unsafe_referencedDomains;
			bool addRefed_2 = false;
			global::System.IntPtr unsafe_sids;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_sids;
			global::System.IntPtr prev_unsafe_sids;
			uint unsafe___value;
			try
			{
				// Marshalling
				handle.DangerousAddRef(ref addRefed);
				if (names == null)
					unsafe_names = null;
				else
				{
					if (names != null)
						unsafe_names = (global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(names.Length * sizeof(global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType))));
					if (names != null)
						for (uint mcgIdx = 0; (mcgIdx < names.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x000421C0] __Interop_UNICODE_STRING__System_Security_Principal_Windows____Interop_UNICODE_STRING__System_Security_Principal_Windows names
							global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.Marshal__SafeToUnsafe(
												ref names[mcgIdx], 
												out unsafe_names[mcgIdx]
											);
						}
				}
				referencedDomains.DangerousAddRef(ref addRefed_1);
				unsafe_referencedDomains = referencedDomains.DangerousGetHandle();
				prev_unsafe_referencedDomains = unsafe_referencedDomains;
				out_referencedDomains = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				sids.DangerousAddRef(ref addRefed_2);
				unsafe_sids = sids.DangerousGetHandle();
				prev_unsafe_sids = unsafe_sids;
				out_sids = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaLookupNames2(
									handle.DangerousGetHandle(), 
									flags, 
									count, 
									unsafe_names, 
									&(unsafe_referencedDomains), 
									&(unsafe_sids)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed_2)
					sids.DangerousRelease();
				if (prev_unsafe_sids != unsafe_sids)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_sids, 
										unsafe_sids
									);
					sids = out_sids;
				}
				if (addRefed_1)
					referencedDomains.DangerousRelease();
				if (prev_unsafe_referencedDomains != unsafe_referencedDomains)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_referencedDomains, 
										unsafe_referencedDomains
									);
					referencedDomains = out_referencedDomains;
				}
				if (addRefed)
					handle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_names != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < names.Length); mcgIdx_1++)
					{
						// [fwd] [in] [out] [optional] [EETypeRva:0x000421C0] __Interop_UNICODE_STRING__System_Security_Principal_Windows____Interop_UNICODE_STRING__System_Security_Principal_Windows names
						global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.Cleanup__Unsafe(ref unsafe_names[mcgIdx_1]);
					}
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_names);
			}
		}

		// Signature, LsaOpenPolicy, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows____Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaPolicyHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaOpenPolicy")]
		public static uint LsaOpenPolicy(
					string systemName, 
					ref global::_.Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows attributes, 
					int accessMask, 
					out global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows handle)
		{
			// Setup
			ushort* unsafe_systemName = default(ushort*);
			global::System.IntPtr unsafe_handle;
			uint unsafe___value;
			// Marshalling
			fixed (char* pinned_systemName = systemName)
			{
				unsafe_systemName = (ushort*)pinned_systemName;
				fixed (global::_.Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows* pinned_attributes = &(attributes))
				{
					handle = new global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows();
					unsafe_handle = handle.DangerousGetHandle();
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaOpenPolicy(
										unsafe_systemName, 
										pinned_attributes, 
										accessMask, 
										&(unsafe_handle)
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										handle, 
										unsafe_handle
									);
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, LsaClose, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaClose")]
		public static int LsaClose(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaClose(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, LsaFreeMemory, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaFreeMemory")]
		public static int LsaFreeMemory(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaFreeMemory(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-com-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll
	{
		// Signature, CoCreateInstance, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.StackTraceGenerator.StackTraceGenerator", "CoCreateInstance")]
		public static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					out global::System.IntPtr ppv)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_ppv = &(ppv))
			{
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_com_l1_1_0_dll_PInvokes.CoCreateInstance(
									((byte*)rclsid), 
									pUnkOuter, 
									dwClsContext, 
									((byte*)riid), 
									pinned_ppv
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'iphlpapi.dll'
	/// </summary>
	public unsafe static partial class iphlpapi_dll
	{
		// Signature, GetNetworkParams, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_NetworkInformation____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NetworkInformation, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+IpHlpApi", "GetNetworkParams")]
		public static uint GetNetworkParams(
					global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_NetworkInformation pFixedInfo, 
					ref uint pOutBufLen)
		{
			// Setup
			bool addRefed = false;
			uint unsafe___value;
			// Marshalling
			pFixedInfo.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_pOutBufLen = &(pOutBufLen))
			{
				// Call to native method
				unsafe___value = global::__Interop.iphlpapi_dll_PInvokes.GetNetworkParams(
									pFixedInfo.DangerousGetHandle(), 
									pinned_pOutBufLen
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				pFixedInfo.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, GetNetworkParams__0, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_Primitives____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+IpHlpApi", "GetNetworkParams")]
		public static uint GetNetworkParams__0(
					global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives pFixedInfo, 
					ref uint pOutBufLen)
		{
			// Setup
			bool addRefed = false;
			uint unsafe___value;
			// Marshalling
			pFixedInfo.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_pOutBufLen = &(pOutBufLen))
			{
				// Call to native method
				unsafe___value = global::__Interop.iphlpapi_dll_PInvokes.GetNetworkParams__0(
									pFixedInfo.DangerousGetHandle(), 
									pinned_pOutBufLen
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				pFixedInfo.DangerousRelease();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'OleAut32'
	/// </summary>
	public unsafe static partial class OleAut32
	{
		// Signature, SysFreeString, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.LightweightInterop.MarshalExtensions", "SysFreeString")]
		public static void SysFreeString(global::System.IntPtr bstr)
		{
			// Marshalling
			// Call to native method
			global::__Interop.OleAut32_PInvokes.SysFreeString(bstr);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'ncrypt.dll'
	/// </summary>
	public unsafe static partial class ncrypt_dll
	{
		// Signature, NCryptOpenKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptProviderHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptKeyHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_CngKeyOpenOptions__System_Security_Cryptography_Cng__CngKeyOpenOptions__System_Security_Cryptography_Cng, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptOpenKey")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenKey(
					global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng hProvider, 
					out global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng phKey, 
					string pszKeyName, 
					int dwLegacyKeySpec, 
					global::System_Security_Cryptography.CngKeyOpenOptions__System_Security_Cryptography_Cng dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_phKey;
			ushort* unsafe_pszKeyName = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			phKey = new global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng();
			unsafe_phKey = phKey.DangerousGetHandle();
			fixed (char* pinned_pszKeyName = pszKeyName)
			{
				unsafe_pszKeyName = (ushort*)pinned_pszKeyName;
				// Call to native method
				unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptOpenKey(
									hProvider.DangerousGetHandle(), 
									&(unsafe_phKey), 
									unsafe_pszKeyName, 
									dwLegacyKeySpec, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phKey, 
								unsafe_phKey
							);
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptDeleteKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptKeyHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptDeleteKey")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptDeleteKey(
					global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng hKey, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptDeleteKey(
								hKey.DangerousGetHandle(), 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptOpenStorageProvider, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptProviderHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptOpenStorageProvider")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenStorageProvider(
					out global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng phProvider, 
					string pszProviderName, 
					int dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_phProvider;
			ushort* unsafe_pszProviderName = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			phProvider = new global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng();
			unsafe_phProvider = phProvider.DangerousGetHandle();
			fixed (char* pinned_pszProviderName = pszProviderName)
			{
				unsafe_pszProviderName = (ushort*)pinned_pszProviderName;
				// Call to native method
				unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptOpenStorageProvider(
									&(unsafe_phProvider), 
									unsafe_pszProviderName, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phProvider, 
								unsafe_phProvider
							);
			// Return
			return unsafe___value;
		}

		// Signature, NCryptFreeObject, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptFreeObject")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptFreeObject(global::System.IntPtr hObject)
		{
			// Setup
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptFreeObject(hObject);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptImportKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptProviderHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptKeyHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptImportKey")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptImportKey(
					global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng hProvider, 
					global::System.IntPtr hImportKey, 
					string pszBlobType, 
					global::System.IntPtr pParameterList, 
					out global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng phKey, 
					byte[] pbData, 
					int cbData, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszBlobType = default(ushort*);
			global::System.IntPtr unsafe_phKey;
			byte* unsafe_pbData;
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszBlobType = pszBlobType)
			{
				unsafe_pszBlobType = (ushort*)pinned_pszBlobType;
				phKey = new global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng();
				unsafe_phKey = phKey.DangerousGetHandle();
				fixed (byte* pinned_pbData = ((pbData != null 
							&& pbData.Length == 0) ? new byte[1] : pbData))
				{
					unsafe_pbData = (byte*)pinned_pbData;
					// Call to native method
					unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptImportKey(
										hProvider.DangerousGetHandle(), 
										hImportKey, 
										unsafe_pszBlobType, 
										pParameterList, 
										&(unsafe_phKey), 
										unsafe_pbData, 
										cbData, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									phKey, 
									unsafe_phKey
								);
			}
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptGetProperty, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [out] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_CngPropertyOptions__System_Security_Cryptography_Cng__CngPropertyOptions__System_Security_Cryptography_Cng, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptGetProperty")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptGetProperty(
					global::Microsoft.Win32.SafeHandles.SafeNCryptHandle__System_Security_Cryptography_Cng hObject, 
					string pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (int* pinned_pcbResult = &(pcbResult))
				{
					// Call to native method
					unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptGetProperty(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										((void*)pbOutput), 
										cbOutput, 
										pinned_pcbResult, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptSetProperty, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_CngPropertyOptions__System_Security_Cryptography_Cng__CngPropertyOptions__System_Security_Cryptography_Cng, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptSetProperty")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptSetProperty(
					global::Microsoft.Win32.SafeHandles.SafeNCryptHandle__System_Security_Cryptography_Cng hObject, 
					string pszProperty, 
					void* pbInput, 
					int cbInput, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				// Call to native method
				unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptSetProperty(
									hObject.DangerousGetHandle(), 
									unsafe_pszProperty, 
									((void*)pbInput), 
									cbInput, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'clrcompression.dll'
	/// </summary>
	public unsafe static partial class clrcompression_dll
	{
		// Signature, deflate, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.Compression, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+zlib", "deflate")]
		public static int deflate(
					byte* stream, 
					int flush)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.clrcompression_dll_PInvokes.deflate(
								((byte*)stream), 
								flush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, inflateInit2_, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.Compression, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+zlib", "inflateInit2_")]
		public static int inflateInit2_(
					byte* stream, 
					int windowBits, 
					byte* version, 
					int stream_size)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.clrcompression_dll_PInvokes.inflateInit2_(
								((byte*)stream), 
								windowBits, 
								((byte*)version), 
								stream_size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, deflateInit2_, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.Compression, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+zlib", "deflateInit2_")]
		public static int deflateInit2_(
					byte* stream, 
					int level, 
					int method, 
					int windowBits, 
					int memLevel, 
					int strategy, 
					byte* version, 
					int stream_size)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.clrcompression_dll_PInvokes.deflateInit2_(
								((byte*)stream), 
								level, 
								method, 
								windowBits, 
								memLevel, 
								strategy, 
								((byte*)version), 
								stream_size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, inflate, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.Compression, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+zlib", "inflate")]
		public static int inflate(
					byte* stream, 
					int flush)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.clrcompression_dll_PInvokes.inflate(
								((byte*)stream), 
								flush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, deflateEnd, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.Compression, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+zlib", "deflateEnd")]
		public static int deflateEnd(byte* strm)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.clrcompression_dll_PInvokes.deflateEnd(((byte*)strm));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, inflateEnd, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.Compression, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+zlib", "inflateEnd")]
		public static int inflateEnd(byte* stream)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.clrcompression_dll_PInvokes.inflateEnd(((byte*)stream));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'BCrypt.dll'
	/// </summary>
	public unsafe static partial class BCrypt_dll
	{
		// Signature, BCryptExportKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+BCrypt", "BCryptExportKey")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptExportKey(
					global::Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates hKey, 
					global::System.IntPtr hExportKey, 
					string pszBlobType, 
					byte[] pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszBlobType = default(ushort*);
			byte* unsafe_pbOutput;
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszBlobType = pszBlobType)
			{
				unsafe_pszBlobType = (ushort*)pinned_pszBlobType;
				fixed (byte* pinned_pbOutput = ((pbOutput != null 
							&& pbOutput.Length == 0) ? new byte[1] : pbOutput))
				{
					unsafe_pbOutput = (byte*)pinned_pbOutput;
					fixed (int* pinned_pcbResult = &(pcbResult))
					{
						// Call to native method
						unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptExportKey(
											hKey.DangerousGetHandle(), 
											hExportKey, 
											unsafe_pszBlobType, 
											unsafe_pbOutput, 
											cbOutput, 
											pinned_pcbResult, 
											dwFlags
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
				}
			}
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGetProperty, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+BCrypt", "BCryptGetProperty")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptGetProperty(
					global::Microsoft.Win32.SafeHandles.SafeBCryptHandle__System_Security_Cryptography_X509Certificates hObject, 
					string pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (int* pinned_pcbResult = &(pcbResult))
				{
					// Call to native method
					unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptGetProperty(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										((void*)pbOutput), 
										cbOutput, 
										pinned_pcbResult, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGenRandom, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptGenRandom")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGenRandom(
					global::System.IntPtr hAlgorithm, 
					ref byte pbBuffer, 
					int cbBuffer, 
					int dwFlags)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			fixed (byte* pinned_pbBuffer = &(pbBuffer))
			{
				// Call to native method
				unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptGenRandom(
									hAlgorithm, 
									pinned_pbBuffer, 
									cbBuffer, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, BCryptDestroyKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+BCrypt", "BCryptDestroyKey")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptDestroyKey(global::System.IntPtr hKey)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptDestroyKey(hKey);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptCreateHash, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptHashHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms__Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptCreateHash")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCreateHash(
					global::Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms hAlgorithm, 
					out global::Microsoft.Win32.SafeHandles.SafeBCryptHashHandle__System_Security_Cryptography_Algorithms phHash, 
					global::System.IntPtr pbHashObject, 
					int cbHashObject, 
					byte[] pbSecret, 
					int cbSecret, 
					global::_.Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_phHash;
			byte* unsafe_pbSecret;
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			hAlgorithm.DangerousAddRef(ref addRefed);
			phHash = new global::Microsoft.Win32.SafeHandles.SafeBCryptHashHandle__System_Security_Cryptography_Algorithms();
			unsafe_phHash = phHash.DangerousGetHandle();
			fixed (byte* pinned_pbSecret = ((pbSecret != null 
						&& pbSecret.Length == 0) ? new byte[1] : pbSecret))
			{
				unsafe_pbSecret = (byte*)pinned_pbSecret;
				// Call to native method
				unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptCreateHash(
									hAlgorithm.DangerousGetHandle(), 
									&(unsafe_phHash), 
									pbHashObject, 
									cbHashObject, 
									unsafe_pbSecret, 
									cbSecret, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phHash, 
								unsafe_phHash
							);
			if (addRefed)
				hAlgorithm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGetProperty__0, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptGetProperty")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGetProperty__0(
					global::Microsoft.Win32.SafeHandles.SafeBCryptHandle__System_Security_Cryptography_Algorithms hObject, 
					string pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (int* pinned_pcbResult = &(pcbResult))
				{
					// Call to native method
					unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptGetProperty__0(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										((void*)pbOutput), 
										cbOutput, 
										pinned_pcbResult, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptOpenAlgorithmProvider, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms__Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptOpenAlgorithmProvider")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptOpenAlgorithmProvider(
					out global::Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms phAlgorithm, 
					string pszAlgId, 
					string pszImplementation, 
					global::_.Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_phAlgorithm;
			ushort* unsafe_pszAlgId = default(ushort*);
			ushort* unsafe_pszImplementation = default(ushort*);
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			phAlgorithm = new global::Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms();
			unsafe_phAlgorithm = phAlgorithm.DangerousGetHandle();
			fixed (char* pinned_pszAlgId = pszAlgId)
			{
				unsafe_pszAlgId = (ushort*)pinned_pszAlgId;
				fixed (char* pinned_pszImplementation = pszImplementation)
				{
					unsafe_pszImplementation = (ushort*)pinned_pszImplementation;
					// Call to native method
					unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptOpenAlgorithmProvider(
										&(unsafe_phAlgorithm), 
										unsafe_pszAlgId, 
										unsafe_pszImplementation, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phAlgorithm, 
								unsafe_phAlgorithm
							);
			// Return
			return unsafe___value;
		}

		// Signature, BCryptCloseAlgorithmProvider, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptCloseAlgorithmProvider")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCloseAlgorithmProvider(
					global::System.IntPtr hAlgorithm, 
					int dwFlags)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptCloseAlgorithmProvider(
								hAlgorithm, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptDestroyHash, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptDestroyHash")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptDestroyHash(global::System.IntPtr hHash)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptDestroyHash(hHash);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-robuffer-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll
	{
		// Signature, RoGetBufferMarshaler, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] System_Runtime_InteropServices_IMarshal__System_Runtime_WindowsRuntime__System_Runtime_InteropServices__IMarshal__System_Runtime_WindowsRuntime *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.WindowsRuntime, Version=4.0.14.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+mincore", "RoGetBufferMarshaler")]
		public static int RoGetBufferMarshaler(out global::System_Runtime_InteropServices.IMarshal__System_Runtime_WindowsRuntime bufferMarshalerPtr)
		{
			// Setup
			void* unsafe_bufferMarshalerPtr = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_bufferMarshalerPtr = null;
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes.RoGetBufferMarshaler(&(unsafe_bufferMarshalerPtr));
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				bufferMarshalerPtr = (global::System_Runtime_InteropServices.IMarshal__System_Runtime_WindowsRuntime)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_bufferMarshalerPtr), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("System.Runtime.InteropServices.IMarshal,System.Runtime.WindowsRuntime, Version=4.0.14.0, Culture=neutral, Public" +
											"KeyToken=b77a5c561934e089")
								);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_bufferMarshalerPtr)));
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'sspicli.dll'
	/// </summary>
	public unsafe static partial class sspicli_dll
	{
		// Signature, LsaGetLogonSessionData, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_LUID__System_Security_Principal_Windows____Interop_LUID__System_Security_Principal_Windows, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaReturnBufferHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "LsaGetLogonSessionData")]
		public static int LsaGetLogonSessionData(
					ref global::_.Interop_LUID__System_Security_Principal_Windows LogonId, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle__System_Security_Principal_Windows ppLogonSessionData)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_ppLogonSessionData;
			global::Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle__System_Security_Principal_Windows out_ppLogonSessionData;
			global::System.IntPtr prev_unsafe_ppLogonSessionData;
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_LUID__System_Security_Principal_Windows* pinned_LogonId = &(LogonId))
			{
				ppLogonSessionData.DangerousAddRef(ref addRefed);
				unsafe_ppLogonSessionData = ppLogonSessionData.DangerousGetHandle();
				prev_unsafe_ppLogonSessionData = unsafe_ppLogonSessionData;
				out_ppLogonSessionData = new global::Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle__System_Security_Principal_Windows();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.LsaGetLogonSessionData(
									pinned_LogonId, 
									&(unsafe_ppLogonSessionData)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed)
					ppLogonSessionData.DangerousRelease();
				if (prev_unsafe_ppLogonSessionData != unsafe_ppLogonSessionData)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_ppLogonSessionData, 
										unsafe_ppLogonSessionData
									);
					ppLogonSessionData = out_ppLogonSessionData;
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, LsaFreeReturnBuffer, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "LsaFreeReturnBuffer")]
		public static int LsaFreeReturnBuffer(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.sspicli_dll_PInvokes.LsaFreeReturnBuffer(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, EncryptMessage, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "EncryptMessage")]
		public static int EncryptMessage(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security contextHandle, 
					uint qualityOfProtection, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security inputOutput, 
					uint sequenceNumber)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_contextHandle = &(contextHandle))
				fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_inputOutput = &(inputOutput))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.sspicli_dll_PInvokes.EncryptMessage(
										pinned_contextHandle, 
										qualityOfProtection, 
										pinned_inputOutput, 
										sequenceNumber
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			// Return
			return unsafe___value;
		}

		// Signature, DecryptMessage, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint___ptrunsigned int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "DecryptMessage")]
		public static int DecryptMessage(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security contextHandle, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security inputOutput, 
					uint sequenceNumber, 
					uint* qualityOfProtection)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_contextHandle = &(contextHandle))
				fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_inputOutput = &(inputOutput))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.sspicli_dll_PInvokes.DecryptMessage(
										pinned_contextHandle, 
										pinned_inputOutput, 
										sequenceNumber, 
										((uint*)qualityOfProtection)
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			// Return
			return unsafe___value;
		}

		// Signature, EnumerateSecurityPackagesW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Net_Security_SafeFreeContextBuffer_SECURITY__System_Net_Security____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "EnumerateSecurityPackagesW")]
		public static int EnumerateSecurityPackagesW(
					out int pkgnum, 
					out global::System.Net.Security.SafeFreeContextBuffer_SECURITY__System_Net_Security handle)
		{
			// Setup
			global::System.IntPtr unsafe_handle;
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_pkgnum = &(pkgnum))
			{
				handle = new global::System.Net.Security.SafeFreeContextBuffer_SECURITY__System_Net_Security();
				unsafe_handle = handle.DangerousGetHandle();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.EnumerateSecurityPackagesW(
									pinned_pkgnum, 
									&(unsafe_handle)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									handle, 
									unsafe_handle
								);
			}
			// Return
			return unsafe___value;
		}

		// Signature, QueryContextAttributesW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextAttribute__System_Net_Security__Interop_SspiCli_ContextAttribute__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "QueryContextAttributesW")]
		public static int QueryContextAttributesW(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security contextHandle, 
					global::_.Interop_SspiCli_ContextAttribute__System_Net_Security attribute, 
					void* buffer)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_contextHandle = &(contextHandle))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.QueryContextAttributesW(
									pinned_contextHandle, 
									attribute, 
									((void*)buffer)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, ApplyControlToken, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "ApplyControlToken")]
		public static int ApplyControlToken(
					void* inContextPtr, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security inputBuffers)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_inputBuffers = &(inputBuffers))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.ApplyControlToken(
									((void*)inContextPtr), 
									pinned_inputBuffers
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FreeContextBuffer, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "FreeContextBuffer")]
		public static int FreeContextBuffer(global::System.IntPtr contextBuffer)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.sspicli_dll_PInvokes.FreeContextBuffer(contextBuffer);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, AcceptSecurityContext, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] __Interop_SspiCli_SecBufferDesc__System_Net_Security___ptr__Interop_SspiCli_SecBufferDesc__System_Net_Security *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_Endianness__System_Net_Security__Interop_SspiCli_Endianness__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "AcceptSecurityContext")]
		public static int AcceptSecurityContext(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security credentialHandle, 
					void* inContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security outContextPtr, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security outputBuffer, 
					ref global::_.Interop_SspiCli_ContextFlags__System_Net_Security attributes, 
					out long timeStamp)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_credentialHandle = &(credentialHandle))
				fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_outContextPtr = &(outContextPtr))
					fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_outputBuffer = &(outputBuffer))
						fixed (global::_.Interop_SspiCli_ContextFlags__System_Net_Security* pinned_attributes = &(attributes))
							fixed (long* pinned_timeStamp = &(timeStamp))
							{
								global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
								// Call to native method
								unsafe___value = global::__Interop.sspicli_dll_PInvokes.AcceptSecurityContext(
													pinned_credentialHandle, 
													((void*)inContextPtr), 
													((global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security*)inputBuffer), 
													inFlags, 
													endianness, 
													pinned_outContextPtr, 
													pinned_outputBuffer, 
													pinned_attributes, 
													pinned_timeStamp
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
								global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
							}
			// Return
			return unsafe___value;
		}

		// Signature, DeleteSecurityContext, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "DeleteSecurityContext")]
		public static int DeleteSecurityContext(ref global::_.Interop_SspiCli_CredHandle__System_Net_Security handlePtr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_handlePtr = &(handlePtr))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.DeleteSecurityContext(pinned_handlePtr);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, InitializeSecurityContextW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_Endianness__System_Net_Security__Interop_SspiCli_Endianness__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] __Interop_SspiCli_SecBufferDesc__System_Net_Security___ptr__Interop_SspiCli_SecBufferDesc__System_Net_Security *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "InitializeSecurityContextW")]
		public static int InitializeSecurityContextW(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security credentialHandle, 
					void* inContextPtr, 
					byte* targetName, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					int reservedI, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					int reservedII, 
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security outContextPtr, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security outputBuffer, 
					ref global::_.Interop_SspiCli_ContextFlags__System_Net_Security attributes, 
					out long timeStamp)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_credentialHandle = &(credentialHandle))
				fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_outContextPtr = &(outContextPtr))
					fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_outputBuffer = &(outputBuffer))
						fixed (global::_.Interop_SspiCli_ContextFlags__System_Net_Security* pinned_attributes = &(attributes))
							fixed (long* pinned_timeStamp = &(timeStamp))
							{
								global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
								// Call to native method
								unsafe___value = global::__Interop.sspicli_dll_PInvokes.InitializeSecurityContextW(
													pinned_credentialHandle, 
													((void*)inContextPtr), 
													((byte*)targetName), 
													inFlags, 
													reservedI, 
													endianness, 
													((global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security*)inputBuffer), 
													reservedII, 
													pinned_outContextPtr, 
													pinned_outputBuffer, 
													pinned_attributes, 
													pinned_timeStamp
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
								global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
							}
			// Return
			return unsafe___value;
		}

		// Signature, AcquireCredentialsHandleW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SCHANNEL_CRED__System_Net_Security____Interop_SspiCli_SCHANNEL_CRED__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "AcquireCredentialsHandleW")]
		public static int AcquireCredentialsHandleW(
					string principal, 
					string moduleName, 
					int usage, 
					void* logonID, 
					ref global::_.Interop_SspiCli_SCHANNEL_CRED__System_Net_Security authData, 
					void* keyCallback, 
					void* keyArgument, 
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security handlePtr, 
					out long timeStamp)
		{
			// Setup
			ushort* unsafe_principal = default(ushort*);
			ushort* unsafe_moduleName = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_principal = principal)
			{
				unsafe_principal = (ushort*)pinned_principal;
				fixed (char* pinned_moduleName = moduleName)
				{
					unsafe_moduleName = (ushort*)pinned_moduleName;
					fixed (global::_.Interop_SspiCli_SCHANNEL_CRED__System_Net_Security* pinned_authData = &(authData))
						fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_handlePtr = &(handlePtr))
							fixed (long* pinned_timeStamp = &(timeStamp))
							{
								global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
								// Call to native method
								unsafe___value = global::__Interop.sspicli_dll_PInvokes.AcquireCredentialsHandleW(
													unsafe_principal, 
													unsafe_moduleName, 
													usage, 
													((void*)logonID), 
													pinned_authData, 
													((void*)keyCallback), 
													((void*)keyArgument), 
													pinned_handlePtr, 
													pinned_timeStamp
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
								global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
							}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, FreeCredentialsHandle, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "FreeCredentialsHandle")]
		public static int FreeCredentialsHandle(ref global::_.Interop_SspiCli_CredHandle__System_Net_Security handlePtr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_handlePtr = &(handlePtr))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.FreeCredentialsHandle(pinned_handlePtr);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}
	}

	public unsafe static partial class Microsoft_CognitiveServices_Speech_core_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_bot_framework_config_from_subscription@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr bot_framework_config_from_subscription(
					global::System.IntPtr* config, 
					byte* subscription, 
					byte* region);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_bot_framework_config_from_authorization_token@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr bot_framework_config_from_authorization_token(
					global::System.IntPtr* config, 
					byte* auth_token, 
					byte* region);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_custom_commands_config_from_subscription@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr custom_commands_config_from_subscription(
					global::System.IntPtr* config, 
					byte* app_id, 
					byte* subscription, 
					byte* region);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_custom_commands_config_from_authorization_token@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr custom_commands_config_from_authorization_token(
					global::System.IntPtr* config, 
					byte* app_id, 
					byte* auth_token, 
					byte* region);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_get_property_bag@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_get_property_bag(
					global::System.IntPtr connectorHandle, 
					global::System.IntPtr* propertyBag);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_handle_release(global::System.IntPtr connectorHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_connect@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_connect(global::System.IntPtr connectorHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_disconnect@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_disconnect(global::System.IntPtr connectorHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_send_activity@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_send_activity(
					global::System.IntPtr connectorHandle, 
					global::System.IntPtr activityHandle, 
					byte* interactionId);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_start_keyword_recognition@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_start_keyword_recognition(
					global::System.IntPtr connectorHandle, 
					global::System.IntPtr keywordHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_stop_keyword_recognition@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_stop_keyword_recognition(global::System.IntPtr connectorHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_listen_once@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_listen_once(
					global::System.IntPtr connectorHandle, 
					global::System.IntPtr* result);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_session_started_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_session_started_set_callback(
					global::System.IntPtr connectorHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_session_stopped_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_session_stopped_set_callback(
					global::System.IntPtr connectorHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_recognized_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_recognized_set_callback(
					global::System.IntPtr connectorHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_recognizing_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_recognizing_set_callback(
					global::System.IntPtr connectorHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_canceled_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_canceled_set_callback(
					global::System.IntPtr connectorHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_activity_received_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_activity_received_set_callback(
					global::System.IntPtr connectorHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_activity_received_event_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int dialog_service_connector_activity_received_event_handle_is_valid(global::System.IntPtr eventHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_activity_received_event_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_activity_received_event_release(global::System.IntPtr eventHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_activity_received_event_get_activity_size@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_activity_received_event_get_activity_size(
					global::System.IntPtr eventHandle, 
					uint* size);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_activity_received_event_get_activity@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_activity_received_event_get_activity(
					global::System.IntPtr eventHandle, 
					global::System.IntPtr activity, 
					uint bufferSize);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_activity_received_event_has_audio@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int dialog_service_connector_activity_received_event_has_audio(global::System.IntPtr eventHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_activity_received_event_get_audio@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_activity_received_event_get_audio(
					global::System.IntPtr eventHandle, 
					global::System.IntPtr* audioHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_grammar_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int grammar_handle_is_valid(global::System.IntPtr grammar);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_phrase_list_grammar_from_recognizer_by_name@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr phrase_list_grammar_from_recognizer_by_name(
					global::System.IntPtr* grammar, 
					global::System.IntPtr reco, 
					byte* name);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_grammar_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr grammar_handle_release(global::System.IntPtr grammar);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_phrase_list_grammar_add_phrase@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr phrase_list_grammar_add_phrase(
					global::System.IntPtr grammar, 
					global::System.IntPtr phrase);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_phrase_list_grammar_clear@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr phrase_list_grammar_clear(global::System.IntPtr grammar);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_grammar_phrase_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int grammar_phrase_handle_is_valid(global::System.IntPtr phrase);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_grammar_phrase_create_from_text@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr grammar_phrase_create_from_text(
					global::System.IntPtr* phrase, 
					global::System.IntPtr text);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_grammar_phrase_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr grammar_phrase_handle_release(global::System.IntPtr phrase);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_grammar_create_from_storage_id@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr grammar_create_from_storage_id(
					global::System.IntPtr* hgrammarlist, 
					global::System.IntPtr id);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_grammar_list_from_recognizer@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr grammar_list_from_recognizer(
					global::System.IntPtr* hgrammarlist, 
					global::System.IntPtr hreco);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_grammar_list_add_grammar@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr grammar_list_add_grammar(
					global::System.IntPtr hgrammarlist, 
					global::System.IntPtr hgrammar);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_class_language_model_from_storage_id@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr class_language_model_from_storage_id(
					global::System.IntPtr* hclm, 
					global::System.IntPtr storageid);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_class_language_model_assign_class@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr class_language_model_assign_class(
					global::System.IntPtr hclm, 
					global::System.IntPtr classname, 
					global::System.IntPtr hgrammar);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_result_get_reason_canceled@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr result_get_reason_canceled(
					global::System.IntPtr result, 
					global::Microsoft_CognitiveServices_Speech.CancellationReason__Microsoft_CognitiveServices_Speech_csharp* reason);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_result_get_canceled_error_code@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr result_get_canceled_error_code(
					global::System.IntPtr result, 
					global::Microsoft_CognitiveServices_Speech.CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp* errorCode);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_config_is_handle_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int audio_config_is_handle_valid(global::System.IntPtr audioConfig);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_config_create_audio_input_from_default_microphone@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_config_create_audio_input_from_default_microphone(global::System.IntPtr* audioConfig);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_config_create_audio_input_from_wav_file_name@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_config_create_audio_input_from_wav_file_name(
					global::System.IntPtr* audioConfig, 
					global::System.IntPtr fileName);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_config_create_audio_input_from_a_microphone@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_config_create_audio_input_from_a_microphone(
					global::System.IntPtr* audioConfig, 
					byte* deviceName);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_config_create_audio_input_from_stream@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_config_create_audio_input_from_stream(
					global::System.IntPtr* audioConfig, 
					global::System.IntPtr audioStream);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_config_create_audio_output_from_default_speaker@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_config_create_audio_output_from_default_speaker(global::System.IntPtr* audioConfig);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_config_create_audio_output_from_wav_file_name@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_config_create_audio_output_from_wav_file_name(
					global::System.IntPtr* audioConfig, 
					global::System.IntPtr fileName);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_config_create_audio_output_from_stream@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_config_create_audio_output_from_stream(
					global::System.IntPtr* audioConfig, 
					global::System.IntPtr audioStream);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_config_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_config_release(global::System.IntPtr audioConfig);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_config_is_handle_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int speech_config_is_handle_valid(global::System.IntPtr config);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_config_from_subscription@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_config_from_subscription(
					global::System.IntPtr* config, 
					byte* subscriptionKey, 
					byte* region);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_config_from_authorization_token@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_config_from_authorization_token(
					global::System.IntPtr* config, 
					byte* authToken, 
					byte* region);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_config_from_endpoint@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_config_from_endpoint(
					global::System.IntPtr* config, 
					byte* endpoint, 
					byte* subscription);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_config_from_host@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_config_from_host(
					global::System.IntPtr* config, 
					byte* host, 
					byte* subscription);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_config_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_config_release(global::System.IntPtr config);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_config_get_property_bag@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_config_get_property_bag(
					global::System.IntPtr config, 
					global::System.IntPtr* propbag);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_config_set_audio_output_format@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_config_set_audio_output_format(
					global::System.IntPtr config, 
					global::Microsoft_CognitiveServices_Speech.SpeechSynthesisOutputFormat__Microsoft_CognitiveServices_Speech_csharp formatId);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_config_set_service_property@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_config_set_service_property(
					global::System.IntPtr config, 
					byte* name, 
					byte* value, 
					global::Microsoft_CognitiveServices_Speech.ServicePropertyChannel__Microsoft_CognitiveServices_Speech_csharp channel);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_config_set_profanity@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_config_set_profanity(
					global::System.IntPtr config, 
					global::Microsoft_CognitiveServices_Speech.ProfanityOption__Microsoft_CognitiveServices_Speech_csharp profanity);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_translation_config_from_subscription@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_translation_config_from_subscription(
					global::System.IntPtr* config, 
					byte* subscriptionKey, 
					byte* region);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_translation_config_from_authorization_token@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_translation_config_from_authorization_token(
					global::System.IntPtr* config, 
					byte* authToken, 
					byte* region);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_translation_config_from_endpoint@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_translation_config_from_endpoint(
					global::System.IntPtr* config, 
					byte* endpoint, 
					byte* subscription);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_translation_config_from_host@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_translation_config_from_host(
					global::System.IntPtr* config, 
					byte* host, 
					byte* subscription);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_translation_config_add_target_language@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_translation_config_add_target_language(
					global::System.IntPtr config, 
					byte* language);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_speech_translation_config_remove_target_language@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr speech_translation_config_remove_target_language(
					global::System.IntPtr config, 
					byte* language);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_connection_from_recognizer@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr connection_from_recognizer(
					global::System.IntPtr recognizerHandle, 
					global::System.IntPtr* connectionHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_connection_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int connection_handle_is_valid(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_connection_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr connection_handle_release(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_connection_open@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr connection_open(
					global::System.IntPtr handle, 
					int forContinuousRecognition);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_connection_close@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr connection_close(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_connection_connected_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr connection_connected_set_callback(
					global::System.IntPtr connection, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_connection_disconnected_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr connection_disconnected_set_callback(
					global::System.IntPtr connection, 
					void* Callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_connection_set_message_property@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr connection_set_message_property(
					global::System.IntPtr connection, 
					byte* path, 
					byte* name, 
					byte* value);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_connection_send_message@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr connection_send_message(
					global::System.IntPtr connection, 
					byte* path, 
					global::System.IntPtr payload);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_conversation_update_participant@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr conversation_update_participant(
					global::System.IntPtr convHandle, 
					int add, 
					global::System.IntPtr participant);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_conversation_update_participant_by_user@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr conversation_update_participant_by_user(
					global::System.IntPtr convHandle, 
					int add, 
					global::System.IntPtr participant);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_conversation_update_participant_by_user_id@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr conversation_update_participant_by_user_id(
					global::System.IntPtr convHandle, 
					int add, 
					byte* userId);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_conversation_get_conversation_id@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr conversation_get_conversation_id(
					global::System.IntPtr convHandle, 
					global::System.IntPtr conversationIdPtr, 
					uint size);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_conversation_end_conversation@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr conversation_end_conversation(global::System.IntPtr convHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_conversation_get_property_bag@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr conversation_get_property_bag(
					global::System.IntPtr convHandle, 
					global::System.IntPtr* propbag);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_conversation_release_handle@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr conversation_release_handle(global::System.IntPtr convHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_conversation_transcription_result_get_user_id@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr conversation_transcription_result_get_user_id(
					global::System.IntPtr result, 
					global::System.IntPtr userIdPtr, 
					uint userIdSize);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_error_get_message@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr error_get_message(global::System.IntPtr errorHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_error_get_call_stack@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr error_get_call_stack(global::System.IntPtr errorHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_error_get_error_code@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr error_get_error_code(global::System.IntPtr errorHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_error_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr error_release(global::System.IntPtr errorHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_event_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int recognizer_event_handle_is_valid(global::System.IntPtr eventHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_event_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_event_handle_release(global::System.IntPtr eventHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_create_speech_recognizer_from_config@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_create_speech_recognizer_from_config(
					global::System.IntPtr* recoHandle, 
					global::System.IntPtr speechconfig, 
					global::System.IntPtr audioInput);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_create_translation_recognizer_from_config@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_create_translation_recognizer_from_config(
					global::System.IntPtr* recoHandle, 
					global::System.IntPtr speechconfig, 
					global::System.IntPtr audioInput);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_create_intent_recognizer_from_config@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_create_intent_recognizer_from_config(
					global::System.IntPtr* recoHandle, 
					global::System.IntPtr speechconfig, 
					global::System.IntPtr audioInput);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_create_speech_synthesizer_from_config@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_create_speech_synthesizer_from_config(
					global::System.IntPtr* synthHandle, 
					global::System.IntPtr speechconfig, 
					global::System.IntPtr audioOutput);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_dialog_service_connector_create_dialog_service_connector_from_config@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr dialog_service_connector_create_dialog_service_connector_from_config(
					global::System.IntPtr* recoHandle, 
					global::System.IntPtr speechconfig, 
					global::System.IntPtr audioInput);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_conversation_create_from_config@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr conversation_create_from_config(
					global::System.IntPtr* recoHandle, 
					global::System.IntPtr speechconfig, 
					global::System.IntPtr id);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_create_conversation_transcriber_from_config@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_create_conversation_transcriber_from_config(
					global::System.IntPtr* recoHandle, 
					global::System.IntPtr audioInput);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_intent_trigger_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int intent_trigger_handle_is_valid(global::System.IntPtr trigger);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_intent_trigger_create_from_phrase@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr intent_trigger_create_from_phrase(
					global::System.IntPtr* trigger, 
					global::System.IntPtr phrase);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_intent_trigger_create_from_language_understanding_model@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr intent_trigger_create_from_language_understanding_model(
					global::System.IntPtr* trigger, 
					global::System.IntPtr lumodel, 
					global::System.IntPtr intentName);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_intent_trigger_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr intent_trigger_handle_release(global::System.IntPtr trigger);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_keyword_recognition_model_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int keyword_recognition_model_handle_is_valid(global::System.IntPtr keyword);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_keyword_recognition_model_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr keyword_recognition_model_handle_release(global::System.IntPtr keyword);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_keyword_recognition_model_create_from_file@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr keyword_recognition_model_create_from_file(
					byte* fileName, 
					global::System.IntPtr* kwmodel);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_language_understanding_model_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int language_understanding_model_handle_is_valid(global::System.IntPtr lumodel);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_language_understanding_model_create_from_uri@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr language_understanding_model_create_from_uri(
					global::System.IntPtr* lumodel, 
					byte* uri);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_language_understanding_model_create_from_app_id@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr language_understanding_model_create_from_app_id(
					global::System.IntPtr* lumodel, 
					byte* appId);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_language_understanding_model_create_from_subscription@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr language_understanding_model_create_from_subscription(
					global::System.IntPtr* lumodel, 
					byte* subscriptionKey, 
					byte* appId, 
					byte* region);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_language_understanding_model__handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr language_understanding_model__handle_release(global::System.IntPtr lumodel);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_result_get_no_match_reason@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr result_get_no_match_reason(
					global::System.IntPtr result, 
					global::Microsoft_CognitiveServices_Speech.NoMatchReason__Microsoft_CognitiveServices_Speech_csharp* reason);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_participant_set_preferred_langugage@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr participant_set_preferred_langugage(
					global::System.IntPtr participant, 
					byte* value);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_participant_set_voice_signature@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr participant_set_voice_signature(
					global::System.IntPtr participant, 
					byte* value, 
					int size);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_participant_create_handle@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr participant_create_handle(
					global::System.IntPtr* participant, 
					global::System.IntPtr userId, 
					byte* preferredLanguage, 
					byte* voice);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_participant_release_handle@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr participant_release_handle(global::System.IntPtr participant);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_participant_get_property_bag@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr participant_get_property_bag(
					global::System.IntPtr participant, 
					global::System.IntPtr* hpropbag);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_property_bag_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int property_bag_is_valid(global::System.IntPtr propbag);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_property_bag_set_string@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr property_bag_set_string(
					global::System.IntPtr propbag, 
					int id, 
					global::System.IntPtr name, 
					global::System.IntPtr value);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_property_bag_get_string@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr property_bag_get_string(
					global::System.IntPtr propbag, 
					int id, 
					global::System.IntPtr name, 
					global::System.IntPtr defaultValue);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_property_bag_free_string@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr property_bag_free_string(global::System.IntPtr ptr);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_property_bag_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr property_bag_release(global::System.IntPtr propbag);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_result_get_reason@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr result_get_reason(
					global::System.IntPtr result, 
					global::Microsoft_CognitiveServices_Speech.ResultReason__Microsoft_CognitiveServices_Speech_csharp* reason);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_result_get_result_id@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr result_get_result_id(
					global::System.IntPtr result, 
					global::System.IntPtr resultId, 
					uint resultIdLength);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_result_get_text@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr result_get_text(
					global::System.IntPtr result, 
					global::System.IntPtr text, 
					uint textLength);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_result_get_offset@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr result_get_offset(
					global::System.IntPtr result, 
					ulong* offset);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_result_get_duration@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr result_get_duration(
					global::System.IntPtr result, 
					ulong* duration);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_result_get_property_bag@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr result_get_property_bag(
					global::System.IntPtr result, 
					global::System.IntPtr* hpropbag);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_result_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int recognizer_result_handle_is_valid(global::System.IntPtr result);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_result_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_result_handle_release(global::System.IntPtr result);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_translation_text_result_get_translation_text_buffer_header@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr translation_text_result_get_translation_text_buffer_header(
					global::System.IntPtr handle, 
					global::System.IntPtr translationResultBuffer, 
					int* lengthPointer);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_translation_synthesis_result_get_audio_data@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr translation_synthesis_result_get_audio_data(
					global::System.IntPtr handle, 
					global::System.IntPtr audioBuffer, 
					int* lengthPointer);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_intent_result_get_intent_id@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr intent_result_get_intent_id(
					global::System.IntPtr result, 
					global::System.IntPtr intentId, 
					uint intentIdLength);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_get_property_bag@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_get_property_bag(
					global::System.IntPtr recoHandle, 
					global::System.IntPtr* propbag);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int recognizer_handle_is_valid(global::System.IntPtr recoHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_handle_release(global::System.IntPtr recoHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_enable@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_enable(global::System.IntPtr recoHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_disable@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_disable(global::System.IntPtr recoHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_is_enabled@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_is_enabled(
					global::System.IntPtr recoHandle, 
					int* enabled);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_recognize_once@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_recognize_once(
					global::System.IntPtr recoHandle, 
					global::System.IntPtr* result);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_recognize_once_async@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_recognize_once_async(
					global::System.IntPtr recoHandle, 
					global::System.IntPtr* asyncHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_recognize_once_async_wait_for@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_recognize_once_async_wait_for(
					global::System.IntPtr asyncHandle, 
					uint milliseconds, 
					global::System.IntPtr* phresult);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_start_continuous_recognition_async@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_start_continuous_recognition_async(
					global::System.IntPtr recoHandle, 
					global::System.IntPtr* asyncHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_start_continuous_recognition_async_wait_for@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_start_continuous_recognition_async_wait_for(
					global::System.IntPtr asyncHandle, 
					uint milliseconds);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_stop_continuous_recognition_async@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_stop_continuous_recognition_async(
					global::System.IntPtr recoHandle, 
					global::System.IntPtr* asyncHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_stop_continuous_recognition_async_wait_for@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_stop_continuous_recognition_async_wait_for(
					global::System.IntPtr asyncHandle, 
					uint milliseconds);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_async_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int recognizer_async_handle_is_valid(global::System.IntPtr asyncHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_async_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_async_handle_release(global::System.IntPtr asyncHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_start_keyword_recognition@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_start_keyword_recognition(
					global::System.IntPtr recoHandle, 
					global::System.IntPtr keyword);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_start_keyword_recognition_async@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_start_keyword_recognition_async(
					global::System.IntPtr recoHandle, 
					global::System.IntPtr hkeyword, 
					global::System.IntPtr* asyncHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_start_keyword_recognition_async_wait_for@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_start_keyword_recognition_async_wait_for(
					global::System.IntPtr asyncHandle, 
					uint milliseconds);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_stop_keyword_recognition@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_stop_keyword_recognition(global::System.IntPtr recoHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_stop_keyword_recognition_async@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_stop_keyword_recognition_async(
					global::System.IntPtr recoHandle, 
					global::System.IntPtr* asyncHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_stop_keyword_recognition_async_wait_for@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_stop_keyword_recognition_async_wait_for(
					global::System.IntPtr asyncHandle, 
					uint milliseconds);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_recognition_event_get_offset@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_recognition_event_get_offset(
					global::System.IntPtr eventHandle, 
					ulong* offset);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_session_event_get_session_id@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_session_event_get_session_id(
					global::System.IntPtr eventHandle, 
					global::System.IntPtr sessionIdStr, 
					uint sessionId);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_recognition_event_get_result@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_recognition_event_get_result(
					global::System.IntPtr eventHandle, 
					global::System.IntPtr* result);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_event_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int recognizer_event_handle_is_valid__0(global::System.IntPtr eventHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_session_started_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_session_started_set_callback(
					global::System.IntPtr recoHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_session_stopped_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_session_stopped_set_callback(
					global::System.IntPtr recoHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_speech_start_detected_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_speech_start_detected_set_callback(
					global::System.IntPtr recoHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_speech_end_detected_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_speech_end_detected_set_callback(
					global::System.IntPtr recoHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_recognizing_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_recognizing_set_callback(
					global::System.IntPtr recoHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_recognized_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_recognized_set_callback(
					global::System.IntPtr recoHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_canceled_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_canceled_set_callback(
					global::System.IntPtr recoHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_intent_recognizer_add_intent@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr intent_recognizer_add_intent(
					global::System.IntPtr recoHandle, 
					global::System.IntPtr intentId, 
					global::System.IntPtr trigger);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_translator_synthesizing_audio_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr translator_synthesizing_audio_set_callback(
					global::System.IntPtr recoHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_translator_add_target_language@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr translator_add_target_language(
					global::System.IntPtr recoHandle, 
					byte* language);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_translator_remove_target_language@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr translator_remove_target_language(
					global::System.IntPtr recoHandle, 
					byte* language);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_join_conversation@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_join_conversation(
					global::System.IntPtr convhandle, 
					global::System.IntPtr recoHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_recognizer_leave_conversation@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr recognizer_leave_conversation(global::System.IntPtr recoHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_is_handle_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int audio_data_stream_is_handle_valid(global::System.IntPtr audioStream);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_create_from_result@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_data_stream_create_from_result(
					global::System.IntPtr* audioStream, 
					global::System.IntPtr result);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_get_status@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_data_stream_get_status(
					global::System.IntPtr audioStream, 
					global::Microsoft_CognitiveServices_Speech.StreamStatus__Microsoft_CognitiveServices_Speech_csharp* status);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_get_reason_canceled@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_data_stream_get_reason_canceled(
					global::System.IntPtr audioStream, 
					global::Microsoft_CognitiveServices_Speech.CancellationReason__Microsoft_CognitiveServices_Speech_csharp* reason);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_get_canceled_error_code@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_data_stream_get_canceled_error_code(
					global::System.IntPtr audioStream, 
					global::Microsoft_CognitiveServices_Speech.CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp* errorCode);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_can_read_data@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int audio_data_stream_can_read_data(
					global::System.IntPtr audioStream, 
					uint requestedSize);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_can_read_data_from_position@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int audio_data_stream_can_read_data_from_position(
					global::System.IntPtr audioStream, 
					uint requestedSize, 
					uint position);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_read@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_data_stream_read(
					global::System.IntPtr audioStream, 
					global::System.IntPtr buffer, 
					uint bufferSize, 
					uint* filledSize);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_read_from_position@20", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_data_stream_read_from_position(
					global::System.IntPtr audioStream, 
					global::System.IntPtr buffer, 
					uint bufferSize, 
					uint position, 
					uint* filledSize);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_save_to_wave_file@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_data_stream_save_to_wave_file(
					global::System.IntPtr audioStream, 
					byte* fileName);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_get_position@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_data_stream_get_position(
					global::System.IntPtr audioStream, 
					uint* position);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_set_position@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_data_stream_set_position(
					global::System.IntPtr audioStream, 
					uint position);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_get_property_bag@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_data_stream_get_property_bag(
					global::System.IntPtr audioStream, 
					global::System.IntPtr* propbag);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_data_stream_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_data_stream_release(global::System.IntPtr audioStream);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_is_handle_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int audio_stream_is_handle_valid(global::System.IntPtr audioStream);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_stream_release(global::System.IntPtr audioStream);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_is_handle_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int audio_stream_is_handle_valid__0(global::System.IntPtr audioStream);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_stream_release__0(global::System.IntPtr audioStream);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_format_is_handle_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int audio_stream_format_is_handle_valid(global::System.IntPtr format);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_format_create_from_default_input@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_stream_format_create_from_default_input(global::System.IntPtr* format);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_format_create_from_default_output@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_stream_format_create_from_default_output(global::System.IntPtr* format);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_format_create_from_waveformat_pcm@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_stream_format_create_from_waveformat_pcm(
					global::System.IntPtr* format, 
					uint samplesPerSecond, 
					byte bitsPerSample, 
					byte channels);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_format_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_stream_format_release(global::System.IntPtr format);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_format_create_from_compressed_format@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_stream_format_create_from_compressed_format(
					global::System.IntPtr* format, 
					global::Microsoft_CognitiveServices_Speech_Audio.AudioStreamContainerFormat__Microsoft_CognitiveServices_Speech_csharp compressedFormat);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_create_pull_audio_input_stream@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_stream_create_pull_audio_input_stream(
					global::System.IntPtr* audioStream, 
					global::System.IntPtr format);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_pull_audio_input_stream_set_callbacks@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr pull_audio_input_stream_set_callbacks(
					global::System.IntPtr audioStream, 
					global::System.IntPtr context, 
					void* readCallback, 
					void* closeCallback);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_pull_audio_input_stream_set_getproperty_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr pull_audio_input_stream_set_getproperty_callback(
					global::System.IntPtr audioStream, 
					global::System.IntPtr context, 
					void* getPropertyCallback);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_create_pull_audio_output_stream@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_stream_create_pull_audio_output_stream(global::System.IntPtr* audioStream);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_pull_audio_output_stream_read@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr pull_audio_output_stream_read(
					global::System.IntPtr audioStream, 
					global::System.IntPtr buffer, 
					uint bufferSize, 
					uint* filledSize);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_create_push_audio_input_stream@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_stream_create_push_audio_input_stream(
					global::System.IntPtr* audioStream, 
					global::System.IntPtr format);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_push_audio_input_stream_write@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr push_audio_input_stream_write(
					global::System.IntPtr audioStream, 
					byte* buffer, 
					uint size);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_push_audio_input_stream_close@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr push_audio_input_stream_close(global::System.IntPtr audioStream);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_push_audio_input_stream_set_property_by_id@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr push_audio_input_stream_set_property_by_id(
					global::System.IntPtr haudioStream, 
					int id, 
					byte* value);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_push_audio_input_stream_set_property_by_name@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr push_audio_input_stream_set_property_by_name(
					global::System.IntPtr haudioStream, 
					byte* name, 
					byte* value);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_audio_stream_create_push_audio_output_stream@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr audio_stream_create_push_audio_output_stream(global::System.IntPtr* audioStream);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_push_audio_output_stream_set_callbacks@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr push_audio_output_stream_set_callbacks(
					global::System.IntPtr audioStream, 
					global::System.IntPtr context, 
					void* writeCallback, 
					void* closeCallback);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synth_result_get_result_id@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synth_result_get_result_id(
					global::System.IntPtr result, 
					global::System.IntPtr resultId, 
					uint resultIdLength);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synth_result_get_reason@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synth_result_get_reason(
					global::System.IntPtr result, 
					global::Microsoft_CognitiveServices_Speech.ResultReason__Microsoft_CognitiveServices_Speech_csharp* reason);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synth_result_get_reason_canceled@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synth_result_get_reason_canceled(
					global::System.IntPtr result, 
					global::Microsoft_CognitiveServices_Speech.CancellationReason__Microsoft_CognitiveServices_Speech_csharp* reason);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synth_result_get_canceled_error_code@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synth_result_get_canceled_error_code(
					global::System.IntPtr result, 
					global::Microsoft_CognitiveServices_Speech.CancellationErrorCode__Microsoft_CognitiveServices_Speech_csharp* errorCode);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synth_result_get_audio_data@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synth_result_get_audio_data(
					global::System.IntPtr result, 
					global::System.IntPtr buffer, 
					uint bufferSize, 
					uint* filledSize);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synth_result_get_audio_length@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synth_result_get_audio_length(
					global::System.IntPtr result, 
					uint* audioLength);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synth_result_get_property_bag@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synth_result_get_property_bag(
					global::System.IntPtr result, 
					global::System.IntPtr* hpropbag);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_result_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int synthesizer_result_handle_is_valid(global::System.IntPtr result);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_result_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_result_handle_release(global::System.IntPtr result);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int synthesizer_handle_is_valid(global::System.IntPtr synthHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_handle_release(global::System.IntPtr synthHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_async_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int synthesizer_async_handle_is_valid(global::System.IntPtr synthHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_async_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_async_handle_release(global::System.IntPtr synthHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_result_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int synthesizer_result_handle_is_valid__0(global::System.IntPtr resultHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_result_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_result_handle_release__0(global::System.IntPtr resultHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_event_handle_is_valid@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int synthesizer_event_handle_is_valid(global::System.IntPtr eventHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_event_handle_release@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_event_handle_release(global::System.IntPtr eventHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_enable@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_enable(global::System.IntPtr synthHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_disable@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_disable(global::System.IntPtr synthHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_is_enabled@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_is_enabled(
					global::System.IntPtr synthHandle, 
					int* enabled);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_get_property_bag@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_get_property_bag(
					global::System.IntPtr synthHandle, 
					global::System.IntPtr* hpropbag);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_speak_text@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_speak_text(
					global::System.IntPtr synthHandle, 
					global::System.IntPtr text, 
					uint textLength, 
					global::System.IntPtr* resultHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_speak_ssml@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_speak_ssml(
					global::System.IntPtr synthHandle, 
					global::System.IntPtr ssml, 
					uint ssmlLength, 
					global::System.IntPtr* resultHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_speak_text_async@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_speak_text_async(
					global::System.IntPtr synthHandle, 
					global::System.IntPtr text, 
					uint textLength, 
					global::System.IntPtr* asyncHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_speak_ssml_async@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_speak_ssml_async(
					global::System.IntPtr synthHandle, 
					global::System.IntPtr ssml, 
					uint ssmlLength, 
					global::System.IntPtr* asyncHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_start_speaking_text@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_start_speaking_text(
					global::System.IntPtr synthHandle, 
					global::System.IntPtr text, 
					uint textLength, 
					global::System.IntPtr* resultHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_start_speaking_ssml@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_start_speaking_ssml(
					global::System.IntPtr synthHandle, 
					global::System.IntPtr ssml, 
					uint ssmlLength, 
					global::System.IntPtr* resultHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_start_speaking_text_async@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_start_speaking_text_async(
					global::System.IntPtr synthHandle, 
					global::System.IntPtr text, 
					uint textLength, 
					global::System.IntPtr* asyncHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_start_speaking_ssml_async@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_start_speaking_ssml_async(
					global::System.IntPtr synthHandle, 
					global::System.IntPtr ssml, 
					uint ssmlLength, 
					global::System.IntPtr* asyncHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_speak_async_wait_for@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_speak_async_wait_for(
					global::System.IntPtr hasync, 
					uint milliseconds, 
					global::System.IntPtr* resultHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_started_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_started_set_callback(
					global::System.IntPtr synthHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_synthesizing_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_synthesizing_set_callback(
					global::System.IntPtr synthHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_completed_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_completed_set_callback(
					global::System.IntPtr synthHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_canceled_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_canceled_set_callback(
					global::System.IntPtr synthHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_word_boundary_set_callback@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_word_boundary_set_callback(
					global::System.IntPtr synthHandle, 
					void* callback, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_synthesis_event_get_result@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_synthesis_event_get_result(
					global::System.IntPtr eventHandle, 
					global::System.IntPtr* resultHandle);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_synthesizer_word_boundary_event_get_values@16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr synthesizer_word_boundary_event_get_values(
					global::System.IntPtr eventHandle, 
					ulong* audioOffset, 
					uint* textOffset, 
					uint* wordLength);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_user_get_id@12", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr user_get_id(
					global::System.IntPtr user, 
					global::System.IntPtr text, 
					uint size);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_user_create_from_id@8", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr user_create_from_id(
					global::System.IntPtr text, 
					global::System.IntPtr* user);

		[global::System.Runtime.InteropServices.DllImport("Microsoft.CognitiveServices.Speech.core.dll", EntryPoint="_user_release_handle@4", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static global::System.IntPtr user_release_handle(global::System.IntPtr user);
	}

	public unsafe static partial class _MRT__PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpGetFuncEvalParameterBufferSize();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpGetFuncEvalMode();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpRecordDebuggeeInitiatedHandle(void* objectHandle);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void RhpVerifyDebuggerCleanup();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr RhpGetCurrentThread();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhWaitForPendingFinalizers(int allowReentrantWait);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", EntryPoint="RhYield", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int _RhYield();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void RhFlushProcessWriteBuffers();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", EntryPoint="RhCallDescrWorker", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhCallDescrWorkerNative(global::System.IntPtr callDescr);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memmove(
					byte* dmem, 
					byte* smem, 
					uint size);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memset(
					byte* mem, 
					int value, 
					uint size);
	}

	public unsafe static partial class __PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("*", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CallingConventionConverter_GetStubs(
					global::System.IntPtr* returnVoidStub, 
					global::System.IntPtr* returnIntegerStub, 
					global::System.IntPtr* commonStub, 
					global::System.IntPtr* returnFloatingPointReturn4Thunk, 
					global::System.IntPtr* returnFloatingPointReturn8Thunk);
	}

	public unsafe static partial class api_ms_win_core_winrt_string_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-string-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WindowsCreateStringReference(
					ushort* sourceString, 
					uint length, 
					global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop* phstringHeader, 
					void* hstring);
	}

	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetLastError();

		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SetLastError(uint dwErrCode);
	}

	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RoInitialize(uint initType);
	}

	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int IsValidLocaleName(ushort* lpLocaleName);

		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ResolveLocaleName(
					ushort* lpNameToResolve, 
					ushort* lpLocaleName, 
					int cchLocaleName);
	}

	public unsafe static partial class kernel32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetCurrentProcessId();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="CreateDirectoryW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CreateDirectoryPrivate(
					ushort* path, 
					global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem* lpSecurityAttributes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetCurrentProcess();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetThreadErrorMode(
					uint dwNewMode, 
					uint* lpOldMode);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetFileAttributesExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetFileAttributesExPrivate(
					ushort* name, 
					global::_.Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem fileInfoLevel, 
					global::_.Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem* lpFileInformation);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FindFirstFileExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr FindFirstFileExPrivate(
					ushort* lpFileName, 
					global::_.Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem fInfoLevelId, 
					global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem* lpFindFileData, 
					global::_.Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem fSearchOp, 
					global::System.IntPtr lpSearchFilter, 
					int dwAdditionalFlags);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetCurrentProcessId", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetCurrentProcessId__0();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetProcessId(global::System.IntPtr nativeHandle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetExitCodeProcess(
					global::System.IntPtr processHandle, 
					int* exitCode);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CloseHandle(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DuplicateHandle(
					global::System.IntPtr hSourceProcessHandle, 
					global::System.IntPtr hSourceHandle, 
					global::System.IntPtr hTargetProcess, 
					global::System.IntPtr* targetHandle, 
					int dwDesiredAccess, 
					int bInheritHandle, 
					int dwOptions);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetStdHandle(int nStdHandle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetFileType(global::System.IntPtr hFile);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FindClose(global::System.IntPtr hFindFile);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalAlloc(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetComputerNameW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetComputerName(
					ushort* lpBuffer, 
					uint* nSize);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr OpenProcess(
					int access, 
					int inherit, 
					int processId);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetConsoleMode(
					global::System.IntPtr handle, 
					int* mode);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__0(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WriteFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToWrite, 
					int* numBytesWritten, 
					global::System.IntPtr mustBeZero);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetConsoleOutputCP();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalFree(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ReadFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToRead, 
					int* numBytesRead, 
					global::System.IntPtr mustBeZero);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="ReadConsoleW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ReadConsole(
					global::System.IntPtr hConsoleInput, 
					byte* lpBuffer, 
					int nNumberOfCharsToRead, 
					int* lpNumberOfCharsRead, 
					global::System.IntPtr pInputControl);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="WriteConsoleW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WriteConsole(
					global::System.IntPtr hConsoleOutput, 
					byte* lpBuffer, 
					int nNumberOfCharsToWrite, 
					int* lpNumberOfCharsWritten, 
					global::System.IntPtr lpReservedMustBeNull);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__1(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetConsoleCP();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="LocalAlloc", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalAlloc__0(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WideCharToMultiByte(
					uint CodePage, 
					uint dwFlags, 
					ushort* lpWideCharStr, 
					int cchWideChar, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					global::System.IntPtr lpDefaultChar, 
					global::System.IntPtr lpUsedDefaultChar);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MultiByteToWideChar(
					uint CodePage, 
					uint dwFlags, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					ushort* lpWideCharStr, 
					int cchWideChar);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="K32EnumProcesses", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int EnumProcesses(
					int* processIds, 
					int size, 
					int* needed);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="LocalFree", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalFree__0(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetCPInfoExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW__0(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Console* lpCPInfoEx);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__2(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__3(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__4(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__5(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetCurrentThread();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetCurrentProcess", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetCurrentProcess__0();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="CloseHandle", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CloseHandle__0(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="LocalAlloc", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalAlloc__1(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CheckTokenMembershipEx(
					global::System.IntPtr TokenHandle, 
					byte* SidToCheck, 
					uint Flags, 
					int* IsMember);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="DuplicateHandle", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DuplicateHandle__0(
					global::System.IntPtr hSourceProcessHandle, 
					global::System.IntPtr hSourceHandle, 
					global::System.IntPtr hTargetProcessHandle, 
					global::System.IntPtr* lpTargetHandle, 
					uint dwDesiredAccess, 
					int bInheritHandle, 
					uint dwOptions);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="LocalFree", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalFree__1(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetFileCompletionNotificationModes(
					global::System.IntPtr handle, 
					global::_.Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets flags);
	}

	public unsafe static partial class ws2_32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAStartup(
					short wVersionRequested, 
					global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType* lpWSAData);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives gethostname(
					byte* hostName, 
					int bufferLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void FreeAddrInfoExW(global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* pAddrInfo);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WSAGetOverlappedResult(
					global::System.IntPtr socketHandle, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					uint* bytesTransferred, 
					int wait, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets* socketFlags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WSASocketW(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Internals.SocketType__System_Net_NameResolution socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket(global::System.IntPtr socketHandle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::System.IntPtr* pointer, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="setsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__0(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					byte* optionValue, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockname(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int* socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getpeername(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int* socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int select(
					int ignoredParameter, 
					global::System.IntPtr* readfds, 
					global::System.IntPtr* writefds, 
					global::System.IntPtr* exceptfds, 
					global::_.Interop_Winsock_TimeValue__System_Net_Sockets* timeout);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="select", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int select__0(
					int ignoredParameter, 
					global::System.IntPtr* readfds, 
					global::System.IntPtr* writefds, 
					global::System.IntPtr* exceptfds, 
					global::System.IntPtr nullTimeout);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket(
					global::System.IntPtr socketHandle, 
					int cmd, 
					int* argp);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives shutdown(
					global::System.IntPtr socketHandle, 
					int how);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="setsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__1(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					int* optionValue, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int recv(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAIoctl(
					global::System.IntPtr socketHandle, 
					int ioControlCode, 
					global::System.Guid* guid, 
					int guidSize, 
					global::System.IntPtr* funcPtr, 
					int funcPtrSize, 
					int* bytesTransferred, 
					global::System.IntPtr shouldBeNull, 
					global::System.IntPtr shouldBeNull2);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetAddrInfoW(
					ushort* nodename, 
					ushort* servicename, 
					global::System_Net_Sockets.AddressInfo__System_Net_NameResolution* hints, 
					global::System.IntPtr* handle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="WSASocketW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WSASocketW__0(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="closesocket", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket__0(global::System.IntPtr socketHandle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="WSASocketW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WSASocketW__1(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					global::System_Net_Sockets.ProtocolType__System_Net_Sockets protocolType, 
					global::System.IntPtr protocolInfo, 
					uint group, 
					global::_.Interop_Winsock_SocketConstructorFlags__System_Net_Sockets flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAConnect(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int socketAddressSize, 
					global::System.IntPtr inBuffer, 
					global::System.IntPtr outBuffer, 
					global::System.IntPtr sQOS, 
					global::System.IntPtr gQOS);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives listen(
					global::System.IntPtr socketHandle, 
					int backlog);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives bind(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					int* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int send(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void freeaddrinfo(global::System.IntPtr info);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="getsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__0(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_Linger__System_Net_Sockets* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="getsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__1(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_IPMulticastRequest__System_Net_Sockets* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="getsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__2(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="ioctlsocket", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket__0(
					global::System.IntPtr handle, 
					int cmd, 
					int* argp);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="setsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__2(
					global::System.IntPtr handle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_Linger__System_Net_Sockets* linger, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr accept(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int* socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetAddrInfoExW(
					ushort* pName, 
					ushort* pServiceName, 
					int dwNamespace, 
					global::System.IntPtr lpNspId, 
					global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* pHints, 
					global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution** ppResult, 
					global::System.IntPtr timeout, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* lpOverlapped, 
					void* lpCompletionRoutine, 
					global::System.IntPtr* lpNameHandle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSARecv(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffer, 
					int bufferCount, 
					int* bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets* socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSASend(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffers, 
					int bufferCount, 
					int* bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives GetNameInfoW(
					byte* sa, 
					int salen, 
					ushort* host, 
					int hostlen, 
					ushort* serv, 
					int servlen, 
					int flags);
	}

	public unsafe static partial class crypt32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertDuplicateCertificateContext(global::System.IntPtr pCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetCertificateContextProperty(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptQueryObject(
					global::Internal_Cryptography_Pal_Native.CertQueryObjectType__System_Security_Cryptography_X509Certificates dwObjectType, 
					void* pvObject, 
					global::Internal_Cryptography_Pal_Native.ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedContentTypeFlags, 
					global::Internal_Cryptography_Pal_Native.ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedFormatTypeFlags, 
					int dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates* pdwMsgAndCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.ContentType__System_Security_Cryptography_X509Certificates* pdwContentType, 
					global::Internal_Cryptography_Pal_Native.FormatType__System_Security_Cryptography_X509Certificates* pdwFormatType, 
					global::System.IntPtr* phCertStore, 
					global::System.IntPtr* phMsg, 
					global::System.IntPtr* ppvContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertDuplicateCertificateContext", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertDuplicateCertificateContextWithKeyContainerDeletion(global::System.IntPtr pCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertFreeCertificateContext(global::System.IntPtr pCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptMsgGetParam(
					global::System.IntPtr hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					int* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptMsgGetParam", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptMsgGetParam__0(
					global::System.IntPtr hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					byte* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr PFXImportCertStore(
					global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pPFX, 
					global::System.IntPtr password, 
					global::Internal_Cryptography_Pal_Native.PfxCertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CryptFindOIDInfo(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertGetCertificateContextProperty", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetCertificateContextProperty__0(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					byte* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertCloseStore(
					global::System.IntPtr hCertStore, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptMsgClose(global::System.IntPtr hCryptMsg);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertFindCertificateInStore(
					global::System.IntPtr hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CertFindFlags__System_Security_Cryptography_X509Certificates dwFindFlags, 
					global::Internal_Cryptography_Pal_Native.CertFindType__System_Security_Cryptography_X509Certificates dwFindType, 
					void* pvFindPara, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertEnumCertificatesInStore(
					global::System.IntPtr hCertStore, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertGetNameStringW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetNameString(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates* pvPara, 
					ushort* pszNameString, 
					int cchNameString);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertGetNameStringW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetNameString__0(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertNameStringType__System_Security_Cryptography_X509Certificates* pvTypePara, 
					ushort* pszNameString, 
					int cchNameString);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptFindOIDInfo", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CryptFindOIDInfo__0(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetCertificateChain(
					global::System.IntPtr hChainEngine, 
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pTime, 
					global::System.IntPtr hStore, 
					global::Internal_Cryptography_Pal_Native.CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates* pChainPara, 
					global::Internal_Cryptography_Pal_Native.CertChainFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::System.IntPtr pvReserved, 
					global::System.IntPtr* ppChainContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertVerifyCertificateChainPolicy(
					global::System.IntPtr pszPolicyOID, 
					global::System.IntPtr pChainContext, 
					global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates* pPolicyPara, 
					global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates* pPolicyStatus);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertNameToStrW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertNameToStr(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pName, 
					global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates dwStrType, 
					ushort* psz, 
					int csz);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptFormatObject(
					int dwCertEncodingType, 
					int dwFormatType, 
					int dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					byte* lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					ushort* pbFormat, 
					int* pcbFormat);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertControlStore(
					global::System.IntPtr hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreType__System_Security_Cryptography_X509Certificates dwControlType, 
					global::System.IntPtr pvCtrlPara);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertAddCertificateLinkToStore(
					global::System.IntPtr hCertStore, 
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertStoreAddDisposition__System_Security_Cryptography_X509Certificates dwAddDisposition, 
					global::System.IntPtr ppStoreContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptFormatObject", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptFormatObject__0(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectType__System_Security_Cryptography_X509Certificates dwFormatType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectStringType__System_Security_Cryptography_X509Certificates dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					global::System.IntPtr lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					ushort* pbFormat, 
					int* pcbFormat);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertOpenStore(
					global::System.IntPtr lpszStoreProvider, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwMsgAndCertEncodingType, 
					global::System.IntPtr hCryptProv, 
					global::Internal_Cryptography_Pal_Native.CertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					ushort* pvPara);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptImportPublicKeyInfoEx2(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates* pInfo, 
					int dwFlags, 
					void* pvAuxInfo, 
					global::System.IntPtr* phKey);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptDecodeObject(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					byte* pvStructInfo, 
					int* pcbStructInfo);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CertFreeCertificateChain(global::System.IntPtr pChainContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* CertFindExtension(
					byte* pszObjId, 
					int cExtensions, 
					global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* rgExtensions);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetValidUsages(
					int cCerts, 
					global::System.IntPtr* rghCerts, 
					int* cNumOIDs, 
					void* rghOIDs, 
					int* pcbOIDs);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetIntendedKeyUsage(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo, 
					global::System_Security_Cryptography_X509Certificates.X509KeyUsageFlags__System_Security_Cryptography_X509Certificates* pbKeyUsage, 
					int cbKeyUsage);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptDecodeObject", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptDecodeObjectPointer(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					void* pvStructInfo, 
					int* pcbStructInfo);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertVerifyTimeValidity(
					global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pTimeToVerify, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptFindOIDInfo", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CryptFindOIDInfo__1(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertVerifyCertificateChainPolicy", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertVerifyCertificateChainPolicy__0(
					global::System.IntPtr pszPolicyOID, 
					global::System.IntPtr pChainContext, 
					global::_.Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security* pPolicyPara, 
					global::_.Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security* pPolicyStatus);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertEnumCertificatesInStore", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* CertEnumCertificatesInStore__0(
					global::System.IntPtr hCertStore, 
					global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* pPrevCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertFreeCertificateContext", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertFreeCertificateContext__0(global::System.IntPtr pCertContext);
	}

	public unsafe static partial class advapi32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="LookupPrivilegeValueW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LookupPrivilegeValue(
					ushort* lpSystemName, 
					ushort* lpName, 
					global::_.Interop_Advapi32_LUID__System_Diagnostics_Process* lpLuid);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int OpenProcessToken(
					global::System.IntPtr ProcessHandle, 
					int DesiredAccess, 
					global::System.IntPtr* TokenHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int AdjustTokenPrivileges(
					global::System.IntPtr TokenHandle, 
					int DisableAllPrivileges, 
					global::_.Interop_Advapi32_TokenPrivileges__System_Diagnostics_Process__Impl.UnsafeType* NewState, 
					int BufferLength, 
					global::System.IntPtr PreviousState, 
					global::System.IntPtr ReturnLength);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptAcquireContextW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptAcquireContext(
					global::System.IntPtr* psafeProvHandle, 
					ushort* pszContainer, 
					ushort* pszProvider, 
					int dwProvType, 
					global::Internal_Cryptography_Pal_Native.CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptGetKeyParam(
					global::System.IntPtr safeKeyHandle, 
					int dwParam, 
					byte* pbData, 
					int* pdwDataLen, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptGetDefaultProviderW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptGetDefaultProvider(
					int dwProvType, 
					global::System.IntPtr pdwReserved, 
					int dwFlags, 
					ushort* pszProvName, 
					int* IntPtrProvName);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptAcquireContextW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptAcquireContext__0(
					global::System.IntPtr* psafeProvHandle, 
					ushort* pszContainer, 
					ushort* pszProvider, 
					int dwProvType, 
					uint dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptGetUserKey", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int _CryptGetUserKey(
					global::System.IntPtr safeProvHandle, 
					int dwKeySpec, 
					global::System.IntPtr* safeKeyHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptGetProvParam(
					global::System.IntPtr safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					int* dwDataLen, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptDestroyKey(global::System.IntPtr hKey);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptReleaseContext(
					global::System.IntPtr safeProvHandle, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptImportKey", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int _CryptImportKey(
					global::System.IntPtr hProv, 
					byte* pbData, 
					int dwDataLen, 
					global::System.IntPtr hPubKey, 
					int dwFlags, 
					global::System.IntPtr* phKey);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptSetProvParam", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptSetProvParamIndirectPtr(
					global::System.IntPtr safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr* pbData, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptSetProvParam(
					global::System.IntPtr safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptGenKey", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int _CryptGenKey(
					global::System.IntPtr safeProvHandle, 
					int Algid, 
					int dwFlags, 
					global::System.IntPtr* safeKeyHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RevertToSelf();

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ImpersonateLoggedOnUser(global::System.IntPtr userToken);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int OpenThreadToken(
					global::System.IntPtr ThreadHandle, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows dwDesiredAccess, 
					int bOpenAsSelf, 
					global::System.IntPtr* phThreadToken);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="OpenProcessToken", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int OpenProcessToken__0(
					global::System.IntPtr ProcessToken, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows DesiredAccess, 
					global::System.IntPtr* TokenHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetTokenInformation(
					global::System.IntPtr TokenHandle, 
					uint TokenInformationClass, 
					global::System.IntPtr TokenInformation, 
					uint TokenInformationLength, 
					uint* ReturnLength);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaNtStatusToWinError(uint status);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DuplicateTokenEx(
					global::System.IntPtr hExistingToken, 
					uint dwDesiredAccess, 
					global::System.IntPtr lpTokenAttributes, 
					uint ImpersonationLevel, 
					uint TokenType, 
					global::System.IntPtr* phNewToken);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="GetTokenInformation", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetTokenInformation__0(
					global::System.IntPtr TokenHandle, 
					uint TokenInformationClass, 
					global::System.IntPtr TokenInformation, 
					uint TokenInformationLength, 
					uint* ReturnLength);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaLookupSids(
					global::System.IntPtr handle, 
					int count, 
					global::System.IntPtr* sids, 
					global::System.IntPtr* referencedDomains, 
					global::System.IntPtr* names);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaLookupNames2(
					global::System.IntPtr handle, 
					int flags, 
					int count, 
					global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType* names, 
					global::System.IntPtr* referencedDomains, 
					global::System.IntPtr* sids);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaOpenPolicy(
					ushort* systemName, 
					global::_.Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows* attributes, 
					int accessMask, 
					global::System.IntPtr* handle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaClose(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaFreeMemory(global::System.IntPtr handle);
	}

	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-com-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					global::System.IntPtr* ppv);
	}

	public unsafe static partial class iphlpapi_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("iphlpapi.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetNetworkParams(
					global::System.IntPtr pFixedInfo, 
					uint* pOutBufLen);

		[global::System.Runtime.InteropServices.DllImport("iphlpapi.dll", EntryPoint="GetNetworkParams", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetNetworkParams__0(
					global::System.IntPtr pFixedInfo, 
					uint* pOutBufLen);
	}

	public unsafe static partial class OleAut32_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("OleAut32", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SysFreeString(global::System.IntPtr bstr);
	}

	public unsafe static partial class ncrypt_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenKey(
					global::System.IntPtr hProvider, 
					global::System.IntPtr* phKey, 
					ushort* pszKeyName, 
					int dwLegacyKeySpec, 
					global::System_Security_Cryptography.CngKeyOpenOptions__System_Security_Cryptography_Cng dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptDeleteKey(
					global::System.IntPtr hKey, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenStorageProvider(
					global::System.IntPtr* phProvider, 
					ushort* pszProviderName, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptFreeObject(global::System.IntPtr hObject);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptImportKey(
					global::System.IntPtr hProvider, 
					global::System.IntPtr hImportKey, 
					ushort* pszBlobType, 
					global::System.IntPtr pParameterList, 
					global::System.IntPtr* phKey, 
					byte* pbData, 
					int cbData, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptGetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptSetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbInput, 
					int cbInput, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags);
	}

	public unsafe static partial class clrcompression_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("clrcompression.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int deflate(
					byte* stream, 
					int flush);

		[global::System.Runtime.InteropServices.DllImport("clrcompression.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int inflateInit2_(
					byte* stream, 
					int windowBits, 
					byte* version, 
					int stream_size);

		[global::System.Runtime.InteropServices.DllImport("clrcompression.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int deflateInit2_(
					byte* stream, 
					int level, 
					int method, 
					int windowBits, 
					int memLevel, 
					int strategy, 
					byte* version, 
					int stream_size);

		[global::System.Runtime.InteropServices.DllImport("clrcompression.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int inflate(
					byte* stream, 
					int flush);

		[global::System.Runtime.InteropServices.DllImport("clrcompression.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int deflateEnd(byte* strm);

		[global::System.Runtime.InteropServices.DllImport("clrcompression.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int inflateEnd(byte* stream);
	}

	public unsafe static partial class BCrypt_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptExportKey(
					global::System.IntPtr hKey, 
					global::System.IntPtr hExportKey, 
					ushort* pszBlobType, 
					byte* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptGetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGenRandom(
					global::System.IntPtr hAlgorithm, 
					byte* pbBuffer, 
					int cbBuffer, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptDestroyKey(global::System.IntPtr hKey);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCreateHash(
					global::System.IntPtr hAlgorithm, 
					global::System.IntPtr* phHash, 
					global::System.IntPtr pbHashObject, 
					int cbHashObject, 
					byte* pbSecret, 
					int cbSecret, 
					global::_.Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", EntryPoint="BCryptGetProperty", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGetProperty__0(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptOpenAlgorithmProvider(
					global::System.IntPtr* phAlgorithm, 
					ushort* pszAlgId, 
					ushort* pszImplementation, 
					global::_.Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCloseAlgorithmProvider(
					global::System.IntPtr hAlgorithm, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptDestroyHash(global::System.IntPtr hHash);
	}

	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-robuffer-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int RoGetBufferMarshaler(void** bufferMarshalerPtr);
	}

	public unsafe static partial class sspicli_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaGetLogonSessionData(
					global::_.Interop_LUID__System_Security_Principal_Windows* LogonId, 
					global::System.IntPtr* ppLogonSessionData);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaFreeReturnBuffer(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int EncryptMessage(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* contextHandle, 
					uint qualityOfProtection, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputOutput, 
					uint sequenceNumber);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DecryptMessage(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* contextHandle, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputOutput, 
					uint sequenceNumber, 
					uint* qualityOfProtection);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int EnumerateSecurityPackagesW(
					int* pkgnum, 
					global::System.IntPtr* handle);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int QueryContextAttributesW(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* contextHandle, 
					global::_.Interop_SspiCli_ContextAttribute__System_Net_Security attribute, 
					void* buffer);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ApplyControlToken(
					void* inContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffers);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FreeContextBuffer(global::System.IntPtr contextBuffer);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int AcceptSecurityContext(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* credentialHandle, 
					void* inContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* outContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* outputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security* attributes, 
					long* timeStamp);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DeleteSecurityContext(global::_.Interop_SspiCli_CredHandle__System_Net_Security* handlePtr);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int InitializeSecurityContextW(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* credentialHandle, 
					void* inContextPtr, 
					byte* targetName, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					int reservedI, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					int reservedII, 
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* outContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* outputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security* attributes, 
					long* timeStamp);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int AcquireCredentialsHandleW(
					ushort* principal, 
					ushort* moduleName, 
					int usage, 
					void* logonID, 
					global::_.Interop_SspiCli_SCHANNEL_CRED__System_Net_Security* authData, 
					void* keyCallback, 
					void* keyArgument, 
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* handlePtr, 
					long* timeStamp);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FreeCredentialsHandle(global::_.Interop_SspiCli_CredHandle__System_Net_Security* handlePtr);
	}
}

